{"version":3,"file":"reveal.esm.js","sources":["../js/utils/util.js","../js/utils/device.js","../node_modules/fitty/dist/fitty.module.js","../js/controllers/slidecontent.js","../js/controllers/slidenumber.js","../js/utils/color.js","../js/controllers/backgrounds.js","../js/utils/constants.js","../js/controllers/autoanimate.js","../js/controllers/fragments.js","../js/controllers/overview.js","../js/controllers/keyboard.js","../js/controllers/location.js","../js/controllers/controls.js","../js/controllers/progress.js","../js/controllers/pointer.js","../js/utils/loader.js","../js/controllers/plugins.js","../js/controllers/print.js","../js/controllers/touch.js","../js/controllers/focus.js","../js/controllers/notes.js","../js/components/playback.js","../js/config.js","../js/reveal.js","../js/index.js"],"sourcesContent":["/**\r\n * Extend object a with the properties of object b.\r\n * If there's a conflict, object b takes precedence.\r\n *\r\n * @param {object} a\r\n * @param {object} b\r\n */\r\nexport const extend = (a, b) => {\r\n  for (let i in b) {\r\n    a[i] = b[i];\r\n  }\r\n\r\n  return a;\r\n};\r\n\r\n/**\r\n * querySelectorAll but returns an Array.\r\n */\r\nexport const queryAll = (el, selector) => {\r\n  return Array.from(el.querySelectorAll(selector));\r\n};\r\n\r\n/**\r\n * classList.toggle() with cross browser support\r\n */\r\nexport const toggleClass = (el, className, value) => {\r\n  if (value) {\r\n    el.classList.add(className);\r\n  } else {\r\n    el.classList.remove(className);\r\n  }\r\n};\r\n\r\n/**\r\n * Utility for deserializing a value.\r\n *\r\n * @param {*} value\r\n * @return {*}\r\n */\r\nexport const deserialize = (value) => {\r\n  if (typeof value === 'string') {\r\n    if (value === 'null') return null;\r\n    else if (value === 'true') return true;\r\n    else if (value === 'false') return false;\r\n    else if (value.match(/^-?[\\d\\.]+$/)) return parseFloat(value);\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\n/**\r\n * Measures the distance in pixels between point a\r\n * and point b.\r\n *\r\n * @param {object} a point with x/y properties\r\n * @param {object} b point with x/y properties\r\n *\r\n * @return {number}\r\n */\r\nexport const distanceBetween = (a, b) => {\r\n  let dx = a.x - b.x,\r\n    dy = a.y - b.y;\r\n\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n};\r\n\r\n/**\r\n * Applies a CSS transform to the target element.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {string} transform\r\n */\r\nexport const transformElement = (element, transform) => {\r\n  element.style.transform = transform;\r\n};\r\n\r\n/**\r\n * Element.matches with IE support.\r\n *\r\n * @param {HTMLElement} target The element to match\r\n * @param {String} selector The CSS selector to match\r\n * the element against\r\n *\r\n * @return {Boolean}\r\n */\r\nexport const matches = (target, selector) => {\r\n  let matchesMethod =\r\n    target.matches || target.matchesSelector || target.msMatchesSelector;\r\n\r\n  return !!(matchesMethod && matchesMethod.call(target, selector));\r\n};\r\n\r\n/**\r\n * Find the closest parent that matches the given\r\n * selector.\r\n *\r\n * @param {HTMLElement} target The child element\r\n * @param {String} selector The CSS selector to match\r\n * the parents against\r\n *\r\n * @return {HTMLElement} The matched parent or null\r\n * if no matching parent was found\r\n */\r\nexport const closest = (target, selector) => {\r\n  // Native Element.closest\r\n  if (typeof target.closest === 'function') {\r\n    return target.closest(selector);\r\n  }\r\n\r\n  // Polyfill\r\n  while (target) {\r\n    if (matches(target, selector)) {\r\n      return target;\r\n    }\r\n\r\n    // Keep searching\r\n    target = target.parentNode;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Handling the fullscreen functionality via the fullscreen API\r\n *\r\n * @see http://fullscreen.spec.whatwg.org/\r\n * @see https://developer.mozilla.org/en-US/docs/DOM/Using_fullscreen_mode\r\n */\r\nexport const enterFullscreen = (element) => {\r\n  element = element || document.documentElement;\r\n\r\n  // Check which implementation is available\r\n  let requestMethod =\r\n    element.requestFullscreen ||\r\n    element.webkitRequestFullscreen ||\r\n    element.webkitRequestFullScreen ||\r\n    element.mozRequestFullScreen ||\r\n    element.msRequestFullscreen;\r\n\r\n  if (requestMethod) {\r\n    requestMethod.apply(element);\r\n  }\r\n};\r\n\r\n/**\r\n * Creates an HTML element and returns a reference to it.\r\n * If the element already exists the existing instance will\r\n * be returned.\r\n *\r\n * @param {HTMLElement} container\r\n * @param {string} tagname\r\n * @param {string} classname\r\n * @param {string} innerHTML\r\n *\r\n * @return {HTMLElement}\r\n */\r\nexport const createSingletonNode = (\r\n  container,\r\n  tagname,\r\n  classname,\r\n  innerHTML = ''\r\n) => {\r\n  // Find all nodes matching the description\r\n  let nodes = container.querySelectorAll('.' + classname);\r\n\r\n  // Check all matches to find one which is a direct child of\r\n  // the specified container\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    let testNode = nodes[i];\r\n    if (testNode.parentNode === container) {\r\n      return testNode;\r\n    }\r\n  }\r\n\r\n  // If no node was found, create it now\r\n  let node = document.createElement(tagname);\r\n  node.className = classname;\r\n  node.innerHTML = innerHTML;\r\n  container.appendChild(node);\r\n\r\n  return node;\r\n};\r\n\r\n/**\r\n * Injects the given CSS styles into the DOM.\r\n *\r\n * @param {string} value\r\n */\r\nexport const createStyleSheet = (value) => {\r\n  let tag = document.createElement('style');\r\n  tag.type = 'text/css';\r\n\r\n  if (value && value.length > 0) {\r\n    if (tag.styleSheet) {\r\n      tag.styleSheet.cssText = value;\r\n    } else {\r\n      tag.appendChild(document.createTextNode(value));\r\n    }\r\n  }\r\n\r\n  document.head.appendChild(tag);\r\n\r\n  return tag;\r\n};\r\n\r\n/**\r\n * Returns a key:value hash of all query params.\r\n */\r\nexport const getQueryHash = () => {\r\n  let query = {};\r\n\r\n  location.search.replace(/[A-Z0-9]+?=([\\w\\.%-]*)/gi, (a) => {\r\n    query[a.split('=').shift()] = a.split('=').pop();\r\n  });\r\n\r\n  // Basic deserialization\r\n  for (let i in query) {\r\n    let value = query[i];\r\n\r\n    query[i] = deserialize(unescape(value));\r\n  }\r\n\r\n  // Do not accept new dependencies via query config to avoid\r\n  // the potential of malicious script injection\r\n  if (typeof query['dependencies'] !== 'undefined')\r\n    delete query['dependencies'];\r\n\r\n  return query;\r\n};\r\n\r\n/**\r\n * Returns the remaining height within the parent of the\r\n * target element.\r\n *\r\n * remaining height = [ configured parent height ] - [ current parent height ]\r\n *\r\n * @param {HTMLElement} element\r\n * @param {number} [height]\r\n */\r\nexport const getRemainingHeight = (element, height = 0) => {\r\n  if (element) {\r\n    let newHeight,\r\n      oldHeight = element.style.height;\r\n\r\n    // Change the .stretch element height to 0 in order find the height of all\r\n    // the other elements\r\n    element.style.height = '0px';\r\n\r\n    // In Overview mode, the parent (.slide) height is set of 700px.\r\n    // Restore it temporarily to its natural height.\r\n    element.parentNode.style.height = 'auto';\r\n\r\n    newHeight = height - element.parentNode.offsetHeight;\r\n\r\n    // Restore the old height, just in case\r\n    element.style.height = oldHeight + 'px';\r\n\r\n    // Clear the parent (.slide) height. .removeProperty works in IE9+\r\n    element.parentNode.style.removeProperty('height');\r\n\r\n    return newHeight;\r\n  }\r\n\r\n  return height;\r\n};\r\n\r\nconst fileExtensionToMimeMap = {\r\n  mp4: 'video/mp4',\r\n  m4a: 'video/mp4',\r\n  ogv: 'video/ogg',\r\n  mpeg: 'video/mpeg',\r\n  webm: 'video/webm',\r\n};\r\n\r\n/**\r\n * Guess the MIME type for common file formats.\r\n */\r\nexport const getMimeTypeFromFile = (filename = '') => {\r\n  return fileExtensionToMimeMap[filename.split('.').pop()];\r\n};\r\n","const UA = navigator.userAgent;\r\n\r\nexport const isMobile =\r\n  /(iphone|ipod|ipad|android)/gi.test(UA) ||\r\n  (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1); // iPadOS\r\n\r\nexport const isChrome = /chrome/i.test(UA) && !/edge/i.test(UA);\r\n\r\nexport const isAndroid = /android/gi.test(UA);\r\n","/*\n * fitty v2.3.3 - Snugly resizes text to fit its parent container\n * Copyright (c) 2020 Rik Schennink <rik@pqina.nl> (https://pqina.nl/)\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = function (w) {\n\n  // no window, early exit\n  if (!w) return;\n\n  // node list to array helper method\n  var toArray = function toArray(nl) {\n    return [].slice.call(nl);\n  };\n\n  // states\n  var DrawState = {\n    IDLE: 0,\n    DIRTY_CONTENT: 1,\n    DIRTY_LAYOUT: 2,\n    DIRTY: 3\n  };\n\n  // all active fitty elements\n  var fitties = [];\n\n  // group all redraw calls till next frame, we cancel each frame request when a new one comes in. If no support for request animation frame, this is an empty function and supports for fitty stops.\n  var redrawFrame = null;\n  var requestRedraw = 'requestAnimationFrame' in w ? function () {\n    w.cancelAnimationFrame(redrawFrame);\n    redrawFrame = w.requestAnimationFrame(function () {\n      return redraw(fitties.filter(function (f) {\n        return f.dirty && f.active;\n      }));\n    });\n  } : function () {};\n\n  // sets all fitties to dirty so they are redrawn on the next redraw loop, then calls redraw\n  var redrawAll = function redrawAll(type) {\n    return function () {\n      fitties.forEach(function (f) {\n        return f.dirty = type;\n      });\n      requestRedraw();\n    };\n  };\n\n  // redraws fitties so they nicely fit their parent container\n  var redraw = function redraw(fitties) {\n\n    // getting info from the DOM at this point should not trigger a reflow, let's gather as much intel as possible before triggering a reflow\n\n    // check if styles of all fitties have been computed\n    fitties.filter(function (f) {\n      return !f.styleComputed;\n    }).forEach(function (f) {\n      f.styleComputed = computeStyle(f);\n    });\n\n    // restyle elements that require pre-styling, this triggers a reflow, please try to prevent by adding CSS rules (see docs)\n    fitties.filter(shouldPreStyle).forEach(applyStyle);\n\n    // we now determine which fitties should be redrawn\n    var fittiesToRedraw = fitties.filter(shouldRedraw);\n\n    // we calculate final styles for these fitties\n    fittiesToRedraw.forEach(calculateStyles);\n\n    // now we apply the calculated styles from our previous loop\n    fittiesToRedraw.forEach(function (f) {\n      applyStyle(f);\n      markAsClean(f);\n    });\n\n    // now we dispatch events for all restyled fitties\n    fittiesToRedraw.forEach(dispatchFitEvent);\n  };\n\n  var markAsClean = function markAsClean(f) {\n    return f.dirty = DrawState.IDLE;\n  };\n\n  var calculateStyles = function calculateStyles(f) {\n\n    // get available width from parent node\n    f.availableWidth = f.element.parentNode.clientWidth;\n\n    // the space our target element uses\n    f.currentWidth = f.element.scrollWidth;\n\n    // remember current font size\n    f.previousFontSize = f.currentFontSize;\n\n    // let's calculate the new font size\n    f.currentFontSize = Math.min(Math.max(f.minSize, f.availableWidth / f.currentWidth * f.previousFontSize), f.maxSize);\n\n    // if allows wrapping, only wrap when at minimum font size (otherwise would break container)\n    f.whiteSpace = f.multiLine && f.currentFontSize === f.minSize ? 'normal' : 'nowrap';\n  };\n\n  // should always redraw if is not dirty layout, if is dirty layout, only redraw if size has changed\n  var shouldRedraw = function shouldRedraw(f) {\n    return f.dirty !== DrawState.DIRTY_LAYOUT || f.dirty === DrawState.DIRTY_LAYOUT && f.element.parentNode.clientWidth !== f.availableWidth;\n  };\n\n  // every fitty element is tested for invalid styles\n  var computeStyle = function computeStyle(f) {\n\n    // get style properties\n    var style = w.getComputedStyle(f.element, null);\n\n    // get current font size in pixels (if we already calculated it, use the calculated version)\n    f.currentFontSize = parseFloat(style.getPropertyValue('font-size'));\n\n    // get display type and wrap mode\n    f.display = style.getPropertyValue('display');\n    f.whiteSpace = style.getPropertyValue('white-space');\n  };\n\n  // determines if this fitty requires initial styling, can be prevented by applying correct styles through CSS\n  var shouldPreStyle = function shouldPreStyle(f) {\n\n    var preStyle = false;\n\n    // if we already tested for prestyling we don't have to do it again\n    if (f.preStyleTestCompleted) return false;\n\n    // should have an inline style, if not, apply\n    if (!/inline-/.test(f.display)) {\n      preStyle = true;\n      f.display = 'inline-block';\n    }\n\n    // to correctly calculate dimensions the element should have whiteSpace set to nowrap\n    if (f.whiteSpace !== 'nowrap') {\n      preStyle = true;\n      f.whiteSpace = 'nowrap';\n    }\n\n    // we don't have to do this twice\n    f.preStyleTestCompleted = true;\n\n    return preStyle;\n  };\n\n  // apply styles to single fitty\n  var applyStyle = function applyStyle(f) {\n    f.element.style.whiteSpace = f.whiteSpace;\n    f.element.style.display = f.display;\n    f.element.style.fontSize = f.currentFontSize + 'px';\n  };\n\n  // dispatch a fit event on a fitty\n  var dispatchFitEvent = function dispatchFitEvent(f) {\n    f.element.dispatchEvent(new CustomEvent('fit', {\n      detail: {\n        oldValue: f.previousFontSize,\n        newValue: f.currentFontSize,\n        scaleFactor: f.currentFontSize / f.previousFontSize\n      }\n    }));\n  };\n\n  // fit method, marks the fitty as dirty and requests a redraw (this will also redraw any other fitty marked as dirty)\n  var fit = function fit(f, type) {\n    return function () {\n      f.dirty = type;\n      if (!f.active) return;\n      requestRedraw();\n    };\n  };\n\n  var init = function init(f) {\n\n    // save some of the original CSS properties before we change them\n    f.originalStyle = {\n      whiteSpace: f.element.style.whiteSpace,\n      display: f.element.style.display,\n      fontSize: f.element.style.fontSize\n    };\n\n    // should we observe DOM mutations\n    observeMutations(f);\n\n    // this is a new fitty so we need to validate if it's styles are in order\n    f.newbie = true;\n\n    // because it's a new fitty it should also be dirty, we want it to redraw on the first loop\n    f.dirty = true;\n\n    // we want to be able to update this fitty\n    fitties.push(f);\n  };\n\n  var destroy = function destroy(f) {\n    return function () {\n\n      // remove from fitties array\n      fitties = fitties.filter(function (_) {\n        return _.element !== f.element;\n      });\n\n      // stop observing DOM\n      if (f.observeMutations) f.observer.disconnect();\n\n      // reset the CSS properties we changes\n      f.element.style.whiteSpace = f.originalStyle.whiteSpace;\n      f.element.style.display = f.originalStyle.display;\n      f.element.style.fontSize = f.originalStyle.fontSize;\n    };\n  };\n\n  // add a new fitty, does not redraw said fitty\n  var subscribe = function subscribe(f) {\n    return function () {\n      if (f.active) return;\n      f.active = true;\n      requestRedraw();\n    };\n  };\n\n  // remove an existing fitty\n  var unsubscribe = function unsubscribe(f) {\n    return function () {\n      return f.active = false;\n    };\n  };\n\n  var observeMutations = function observeMutations(f) {\n\n    // no observing?\n    if (!f.observeMutations) return;\n\n    // start observing mutations\n    f.observer = new MutationObserver(fit(f, DrawState.DIRTY_CONTENT));\n\n    // start observing\n    f.observer.observe(f.element, f.observeMutations);\n  };\n\n  // default mutation observer settings\n  var mutationObserverDefaultSetting = {\n    subtree: true,\n    childList: true,\n    characterData: true\n  };\n\n  // default fitty options\n  var defaultOptions = {\n    minSize: 16,\n    maxSize: 512,\n    multiLine: true,\n    observeMutations: 'MutationObserver' in w ? mutationObserverDefaultSetting : false\n  };\n\n  // array of elements in, fitty instances out\n  function fittyCreate(elements, options) {\n\n    // set options object\n    var fittyOptions = _extends({}, defaultOptions, options);\n\n    // create fitties\n    var publicFitties = elements.map(function (element) {\n\n      // create fitty instance\n      var f = _extends({}, fittyOptions, {\n\n        // internal options for this fitty\n        element: element,\n        active: true\n      });\n\n      // initialise this fitty\n      init(f);\n\n      // expose API\n      return {\n        element: element,\n        fit: fit(f, DrawState.DIRTY),\n        unfreeze: subscribe(f),\n        freeze: unsubscribe(f),\n        unsubscribe: destroy(f)\n      };\n    });\n\n    // call redraw on newly initiated fitties\n    requestRedraw();\n\n    // expose fitties\n    return publicFitties;\n  }\n\n  // fitty creation function\n  function fitty(target) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    // if target is a string\n    return typeof target === 'string' ?\n\n    // treat it as a querySelector\n    fittyCreate(toArray(document.querySelectorAll(target)), options) :\n\n    // create single fitty\n    fittyCreate([target], options)[0];\n  }\n\n  // handles viewport changes, redraws all fitties, but only does so after a timeout\n  var resizeDebounce = null;\n  var onWindowResized = function onWindowResized() {\n    w.clearTimeout(resizeDebounce);\n    resizeDebounce = w.setTimeout(redrawAll(DrawState.DIRTY_LAYOUT), fitty.observeWindowDelay);\n  };\n\n  // define observe window property, so when we set it to true or false events are automatically added and removed\n  var events = ['resize', 'orientationchange'];\n  Object.defineProperty(fitty, 'observeWindow', {\n    set: function set(enabled) {\n      var method = (enabled ? 'add' : 'remove') + 'EventListener';\n      events.forEach(function (e) {\n        w[method](e, onWindowResized);\n      });\n    }\n  });\n\n  // fitty global properties (by setting observeWindow to true the events above get added)\n  fitty.observeWindow = true;\n  fitty.observeWindowDelay = 100;\n\n  // public fit all method, will force redraw no matter what\n  fitty.fitAll = redrawAll(DrawState.DIRTY);\n\n  // export our fitty function, we don't want to keep it to our selves\n  return fitty;\n}(typeof window === 'undefined' ? null : window);","import {\r\n  extend,\r\n  queryAll,\r\n  closest,\r\n  getMimeTypeFromFile,\r\n} from '../utils/util.js';\r\nimport { isMobile } from '../utils/device.js';\r\n\r\nimport fitty from 'fitty';\r\n\r\n/**\r\n * Handles loading, unloading and playback of slide\r\n * content such as images, videos and iframes.\r\n */\r\nexport default class SlideContent {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n\r\n    this.startEmbeddedIframe = this.startEmbeddedIframe.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Should the given element be preloaded?\r\n   * Decides based on local element attributes and global config.\r\n   *\r\n   * @param {HTMLElement} element\r\n   */\r\n  shouldPreload(element) {\r\n    // Prefer an explicit global preload setting\r\n    let preload = this.Reveal.getConfig().preloadIframes;\r\n\r\n    // If no global setting is available, fall back on the element's\r\n    // own preload setting\r\n    if (typeof preload !== 'boolean') {\r\n      preload = element.hasAttribute('data-preload');\r\n    }\r\n\r\n    return preload;\r\n  }\r\n\r\n  /**\r\n   * Called when the given slide is within the configured view\r\n   * distance. Shows the slide element and loads any content\r\n   * that is set to load lazily (data-src).\r\n   *\r\n   * @param {HTMLElement} slide Slide to show\r\n   */\r\n  load(slide, options = {}) {\r\n    // Show the slide element\r\n    slide.style.display = this.Reveal.getConfig().display;\r\n\r\n    // Media elements with data-src attributes\r\n    queryAll(\r\n      slide,\r\n      'img[data-src], video[data-src], audio[data-src], iframe[data-src]'\r\n    ).forEach((element) => {\r\n      if (element.tagName !== 'IFRAME' || this.shouldPreload(element)) {\r\n        element.setAttribute('src', element.getAttribute('data-src'));\r\n        element.setAttribute('data-lazy-loaded', '');\r\n        element.removeAttribute('data-src');\r\n      }\r\n    });\r\n\r\n    // Media elements with <source> children\r\n    queryAll(slide, 'video, audio').forEach((media) => {\r\n      let sources = 0;\r\n\r\n      queryAll(media, 'source[data-src]').forEach((source) => {\r\n        source.setAttribute('src', source.getAttribute('data-src'));\r\n        source.removeAttribute('data-src');\r\n        source.setAttribute('data-lazy-loaded', '');\r\n        sources += 1;\r\n      });\r\n\r\n      // Enable inline video playback in mobile Safari\r\n      if (isMobile && media.tagName === 'VIDEO') {\r\n        media.setAttribute('playsinline', '');\r\n      }\r\n\r\n      // If we rewrote sources for this video/audio element, we need\r\n      // to manually tell it to load from its new origin\r\n      if (sources > 0) {\r\n        media.load();\r\n      }\r\n    });\r\n\r\n    // Show the corresponding background element\r\n    let background = slide.slideBackgroundElement;\r\n    if (background) {\r\n      background.style.display = 'block';\r\n\r\n      let backgroundContent = slide.slideBackgroundContentElement;\r\n      let backgroundIframe = slide.getAttribute('data-background-iframe');\r\n\r\n      // If the background contains media, load it\r\n      if (background.hasAttribute('data-loaded') === false) {\r\n        background.setAttribute('data-loaded', 'true');\r\n\r\n        let backgroundImage = slide.getAttribute('data-background-image'),\r\n          backgroundVideo = slide.getAttribute('data-background-video'),\r\n          backgroundVideoLoop = slide.hasAttribute(\r\n            'data-background-video-loop'\r\n          ),\r\n          backgroundVideoMuted = slide.hasAttribute(\r\n            'data-background-video-muted'\r\n          );\r\n\r\n        // Images\r\n        if (backgroundImage) {\r\n          // base64\r\n          if (/^data:/.test(backgroundImage.trim())) {\r\n            backgroundContent.style.backgroundImage = `url(${backgroundImage.trim()})`;\r\n          }\r\n          // URL(s)\r\n          else {\r\n            backgroundContent.style.backgroundImage = backgroundImage\r\n              .split(',')\r\n              .map((background) => {\r\n                return `url(${encodeURI(background.trim())})`;\r\n              })\r\n              .join(',');\r\n          }\r\n        }\r\n        // Videos\r\n        else if (backgroundVideo && !this.Reveal.isSpeakerNotes()) {\r\n          let video = document.createElement('video');\r\n\r\n          if (backgroundVideoLoop) {\r\n            video.setAttribute('loop', '');\r\n          }\r\n\r\n          if (backgroundVideoMuted) {\r\n            video.muted = true;\r\n          }\r\n\r\n          // Enable inline playback in mobile Safari\r\n          //\r\n          // Mute is required for video to play when using\r\n          // swipe gestures to navigate since they don't\r\n          // count as direct user actions :'(\r\n          if (isMobile) {\r\n            video.muted = true;\r\n            video.setAttribute('playsinline', '');\r\n          }\r\n\r\n          // Support comma separated lists of video sources\r\n          backgroundVideo.split(',').forEach((source) => {\r\n            let type = getMimeTypeFromFile(source);\r\n            if (type) {\r\n              video.innerHTML += `<source src=\"${source}\" type=\"${type}\">`;\r\n            } else {\r\n              video.innerHTML += `<source src=\"${source}\">`;\r\n            }\r\n          });\r\n\r\n          backgroundContent.appendChild(video);\r\n        }\r\n        // Iframes\r\n        else if (backgroundIframe && options.excludeIframes !== true) {\r\n          let iframe = document.createElement('iframe');\r\n          iframe.setAttribute('allowfullscreen', '');\r\n          iframe.setAttribute('mozallowfullscreen', '');\r\n          iframe.setAttribute('webkitallowfullscreen', '');\r\n          iframe.setAttribute('allow', 'autoplay');\r\n\r\n          iframe.setAttribute('data-src', backgroundIframe);\r\n\r\n          iframe.style.width = '100%';\r\n          iframe.style.height = '100%';\r\n          iframe.style.maxHeight = '100%';\r\n          iframe.style.maxWidth = '100%';\r\n\r\n          backgroundContent.appendChild(iframe);\r\n        }\r\n      }\r\n\r\n      // Start loading preloadable iframes\r\n      let backgroundIframeElement =\r\n        backgroundContent.querySelector('iframe[data-src]');\r\n      if (backgroundIframeElement) {\r\n        // Check if this iframe is eligible to be preloaded\r\n        if (\r\n          this.shouldPreload(background) &&\r\n          !/autoplay=(1|true|yes)/gi.test(backgroundIframe)\r\n        ) {\r\n          if (\r\n            backgroundIframeElement.getAttribute('src') !== backgroundIframe\r\n          ) {\r\n            backgroundIframeElement.setAttribute('src', backgroundIframe);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.layout(slide);\r\n  }\r\n\r\n  /**\r\n   * Applies JS-dependent layout helpers for the scope.\r\n   */\r\n  layout(scopeElement) {\r\n    // Autosize text with the r-fit-text class based on the\r\n    // size of its container. This needs to happen after the\r\n    // slide is visible in order to measure the text.\r\n    Array.from(scopeElement.querySelectorAll('.r-fit-text')).forEach(\r\n      (element) => {\r\n        fitty(element, {\r\n          minSize: 24,\r\n          maxSize: this.Reveal.getConfig().height * 0.8,\r\n          observeMutations: false,\r\n          observeWindow: false,\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unloads and hides the given slide. This is called when the\r\n   * slide is moved outside of the configured view distance.\r\n   *\r\n   * @param {HTMLElement} slide\r\n   */\r\n  unload(slide) {\r\n    // Hide the slide element\r\n    slide.style.display = 'none';\r\n\r\n    // Hide the corresponding background element\r\n    let background = this.Reveal.getSlideBackground(slide);\r\n    if (background) {\r\n      background.style.display = 'none';\r\n\r\n      // Unload any background iframes\r\n      queryAll(background, 'iframe[src]').forEach((element) => {\r\n        element.removeAttribute('src');\r\n      });\r\n    }\r\n\r\n    // Reset lazy-loaded media elements with src attributes\r\n    queryAll(\r\n      slide,\r\n      'video[data-lazy-loaded][src], audio[data-lazy-loaded][src], iframe[data-lazy-loaded][src]'\r\n    ).forEach((element) => {\r\n      element.setAttribute('data-src', element.getAttribute('src'));\r\n      element.removeAttribute('src');\r\n    });\r\n\r\n    // Reset lazy-loaded media elements with <source> children\r\n    queryAll(\r\n      slide,\r\n      'video[data-lazy-loaded] source[src], audio source[src]'\r\n    ).forEach((source) => {\r\n      source.setAttribute('data-src', source.getAttribute('src'));\r\n      source.removeAttribute('src');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enforces origin-specific format rules for embedded media.\r\n   */\r\n  formatEmbeddedContent() {\r\n    let _appendParamToIframeSource = (sourceAttribute, sourceURL, param) => {\r\n      queryAll(\r\n        this.Reveal.getSlidesElement(),\r\n        'iframe[' + sourceAttribute + '*=\"' + sourceURL + '\"]'\r\n      ).forEach((el) => {\r\n        let src = el.getAttribute(sourceAttribute);\r\n        if (src && src.indexOf(param) === -1) {\r\n          el.setAttribute(\r\n            sourceAttribute,\r\n            src + (!/\\?/.test(src) ? '?' : '&') + param\r\n          );\r\n        }\r\n      });\r\n    };\r\n\r\n    // YouTube frames must include \"?enablejsapi=1\"\r\n    _appendParamToIframeSource('src', 'youtube.com/embed/', 'enablejsapi=1');\r\n    _appendParamToIframeSource(\r\n      'data-src',\r\n      'youtube.com/embed/',\r\n      'enablejsapi=1'\r\n    );\r\n\r\n    // Vimeo frames must include \"?api=1\"\r\n    _appendParamToIframeSource('src', 'player.vimeo.com/', 'api=1');\r\n    _appendParamToIframeSource('data-src', 'player.vimeo.com/', 'api=1');\r\n  }\r\n\r\n  /**\r\n   * Start playback of any embedded content inside of\r\n   * the given element.\r\n   *\r\n   * @param {HTMLElement} element\r\n   */\r\n  startEmbeddedContent(element) {\r\n    if (element && !this.Reveal.isSpeakerNotes()) {\r\n      // Restart GIFs\r\n      queryAll(element, 'img[src$=\".gif\"]').forEach((el) => {\r\n        // Setting the same unchanged source like this was confirmed\r\n        // to work in Chrome, FF & Safari\r\n        el.setAttribute('src', el.getAttribute('src'));\r\n      });\r\n\r\n      // HTML5 media elements\r\n      queryAll(element, 'video, audio').forEach((el) => {\r\n        if (closest(el, '.fragment') && !closest(el, '.fragment.visible')) {\r\n          return;\r\n        }\r\n\r\n        // Prefer an explicit global autoplay setting\r\n        let autoplay = this.Reveal.getConfig().autoPlayMedia;\r\n\r\n        // If no global setting is available, fall back on the element's\r\n        // own autoplay setting\r\n        if (typeof autoplay !== 'boolean') {\r\n          autoplay =\r\n            el.hasAttribute('data-autoplay') ||\r\n            !!closest(el, '.slide-background');\r\n        }\r\n\r\n        if (autoplay && typeof el.play === 'function') {\r\n          // If the media is ready, start playback\r\n          if (el.readyState > 1) {\r\n            this.startEmbeddedMedia({ target: el });\r\n          }\r\n          // Mobile devices never fire a loaded event so instead\r\n          // of waiting, we initiate playback\r\n          else if (isMobile) {\r\n            let promise = el.play();\r\n\r\n            // If autoplay does not work, ensure that the controls are visible so\r\n            // that the viewer can start the media on their own\r\n            if (\r\n              promise &&\r\n              typeof promise.catch === 'function' &&\r\n              el.controls === false\r\n            ) {\r\n              promise.catch(() => {\r\n                el.controls = true;\r\n\r\n                // Once the video does start playing, hide the controls again\r\n                el.addEventListener('play', () => {\r\n                  el.controls = false;\r\n                });\r\n              });\r\n            }\r\n          }\r\n          // If the media isn't loaded, wait before playing\r\n          else {\r\n            el.removeEventListener('loadeddata', this.startEmbeddedMedia); // remove first to avoid dupes\r\n            el.addEventListener('loadeddata', this.startEmbeddedMedia);\r\n          }\r\n        }\r\n      });\r\n\r\n      // Normal iframes\r\n      queryAll(element, 'iframe[src]').forEach((el) => {\r\n        if (closest(el, '.fragment') && !closest(el, '.fragment.visible')) {\r\n          return;\r\n        }\r\n\r\n        this.startEmbeddedIframe({ target: el });\r\n      });\r\n\r\n      // Lazy loading iframes\r\n      queryAll(element, 'iframe[data-src]').forEach((el) => {\r\n        if (closest(el, '.fragment') && !closest(el, '.fragment.visible')) {\r\n          return;\r\n        }\r\n\r\n        if (el.getAttribute('src') !== el.getAttribute('data-src')) {\r\n          el.removeEventListener('load', this.startEmbeddedIframe); // remove first to avoid dupes\r\n          el.addEventListener('load', this.startEmbeddedIframe);\r\n          el.setAttribute('src', el.getAttribute('data-src'));\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts playing an embedded video/audio element after\r\n   * it has finished loading.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  startEmbeddedMedia(event) {\r\n    let isAttachedToDOM = !!closest(event.target, 'html'),\r\n      isVisible = !!closest(event.target, '.present');\r\n\r\n    if (isAttachedToDOM && isVisible) {\r\n      event.target.currentTime = 0;\r\n      event.target.play();\r\n    }\r\n\r\n    event.target.removeEventListener('loadeddata', this.startEmbeddedMedia);\r\n  }\r\n\r\n  /**\r\n   * \"Starts\" the content of an embedded iframe using the\r\n   * postMessage API.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  startEmbeddedIframe(event) {\r\n    let iframe = event.target;\r\n\r\n    if (iframe && iframe.contentWindow) {\r\n      let isAttachedToDOM = !!closest(event.target, 'html'),\r\n        isVisible = !!closest(event.target, '.present');\r\n\r\n      if (isAttachedToDOM && isVisible) {\r\n        // Prefer an explicit global autoplay setting\r\n        let autoplay = this.Reveal.getConfig().autoPlayMedia;\r\n\r\n        // If no global setting is available, fall back on the element's\r\n        // own autoplay setting\r\n        if (typeof autoplay !== 'boolean') {\r\n          autoplay =\r\n            iframe.hasAttribute('data-autoplay') ||\r\n            !!closest(iframe, '.slide-background');\r\n        }\r\n\r\n        // YouTube postMessage API\r\n        if (\r\n          /youtube\\.com\\/embed\\//.test(iframe.getAttribute('src')) &&\r\n          autoplay\r\n        ) {\r\n          iframe.contentWindow.postMessage(\r\n            '{\"event\":\"command\",\"func\":\"playVideo\",\"args\":\"\"}',\r\n            '*'\r\n          );\r\n        }\r\n        // Vimeo postMessage API\r\n        else if (\r\n          /player\\.vimeo\\.com\\//.test(iframe.getAttribute('src')) &&\r\n          autoplay\r\n        ) {\r\n          iframe.contentWindow.postMessage('{\"method\":\"play\"}', '*');\r\n        }\r\n        // Generic postMessage API\r\n        else {\r\n          iframe.contentWindow.postMessage('slide:start', '*');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop playback of any embedded content inside of\r\n   * the targeted slide.\r\n   *\r\n   * @param {HTMLElement} element\r\n   */\r\n  stopEmbeddedContent(element, options = {}) {\r\n    options = extend(\r\n      {\r\n        // Defaults\r\n        unloadIframes: true,\r\n      },\r\n      options\r\n    );\r\n\r\n    if (element && element.parentNode) {\r\n      // HTML5 media elements\r\n      queryAll(element, 'video, audio').forEach((el) => {\r\n        if (!el.hasAttribute('data-ignore') && typeof el.pause === 'function') {\r\n          el.setAttribute('data-paused-by-reveal', '');\r\n          el.pause();\r\n        }\r\n      });\r\n\r\n      // Generic postMessage API for non-lazy loaded iframes\r\n      queryAll(element, 'iframe').forEach((el) => {\r\n        if (el.contentWindow) el.contentWindow.postMessage('slide:stop', '*');\r\n        el.removeEventListener('load', this.startEmbeddedIframe);\r\n      });\r\n\r\n      // YouTube postMessage API\r\n      queryAll(element, 'iframe[src*=\"youtube.com/embed/\"]').forEach((el) => {\r\n        if (\r\n          !el.hasAttribute('data-ignore') &&\r\n          el.contentWindow &&\r\n          typeof el.contentWindow.postMessage === 'function'\r\n        ) {\r\n          el.contentWindow.postMessage(\r\n            '{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}',\r\n            '*'\r\n          );\r\n        }\r\n      });\r\n\r\n      // Vimeo postMessage API\r\n      queryAll(element, 'iframe[src*=\"player.vimeo.com/\"]').forEach((el) => {\r\n        if (\r\n          !el.hasAttribute('data-ignore') &&\r\n          el.contentWindow &&\r\n          typeof el.contentWindow.postMessage === 'function'\r\n        ) {\r\n          el.contentWindow.postMessage('{\"method\":\"pause\"}', '*');\r\n        }\r\n      });\r\n\r\n      if (options.unloadIframes === true) {\r\n        // Unload lazy-loaded iframes\r\n        queryAll(element, 'iframe[data-src]').forEach((el) => {\r\n          // Only removing the src doesn't actually unload the frame\r\n          // in all browsers (Firefox) so we set it to blank first\r\n          el.setAttribute('src', 'about:blank');\r\n          el.removeAttribute('src');\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Handles the display of reveal.js' optional slide number.\r\n */\r\nexport default class SlideNumber {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n  }\r\n\r\n  render() {\r\n    this.element = document.createElement('div');\r\n    this.element.className = 'slide-number';\r\n    this.Reveal.getRevealElement().appendChild(this.element);\r\n  }\r\n\r\n  /**\r\n   * Called when the reveal.js config is updated.\r\n   */\r\n  configure(config, oldConfig) {\r\n    let slideNumberDisplay = 'none';\r\n    if (config.slideNumber && !this.Reveal.isPrintingPDF()) {\r\n      if (config.showSlideNumber === 'all') {\r\n        slideNumberDisplay = 'block';\r\n      } else if (\r\n        config.showSlideNumber === 'speaker' &&\r\n        this.Reveal.isSpeakerNotes()\r\n      ) {\r\n        slideNumberDisplay = 'block';\r\n      }\r\n    }\r\n\r\n    this.element.style.display = slideNumberDisplay;\r\n  }\r\n\r\n  /**\r\n   * Updates the slide number to match the current slide.\r\n   */\r\n  update() {\r\n    // Update slide number if enabled\r\n    if (this.Reveal.getConfig().slideNumber && this.element) {\r\n      this.element.innerHTML = this.getSlideNumber();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the HTML string corresponding to the current slide\r\n   * number, including formatting.\r\n   */\r\n  getSlideNumber(slide = this.Reveal.getCurrentSlide()) {\r\n    let config = this.Reveal.getConfig();\r\n    let value;\r\n    let format = 'h.v';\r\n\r\n    if (typeof config.slideNumber === 'function') {\r\n      value = config.slideNumber(slide);\r\n    } else {\r\n      // Check if a custom number format is available\r\n      if (typeof config.slideNumber === 'string') {\r\n        format = config.slideNumber;\r\n      }\r\n\r\n      // If there are ONLY vertical slides in this deck, always use\r\n      // a flattened slide number\r\n      if (!/c/.test(format) && this.Reveal.getHorizontalSlides().length === 1) {\r\n        format = 'c';\r\n      }\r\n\r\n      // Offset the current slide number by 1 to make it 1-indexed\r\n      let horizontalOffset =\r\n        slide && slide.dataset.visibility === 'uncounted' ? 0 : 1;\r\n\r\n      value = [];\r\n      switch (format) {\r\n        case 'c':\r\n          value.push(this.Reveal.getSlidePastCount(slide) + horizontalOffset);\r\n          break;\r\n        case 'c/t':\r\n          value.push(\r\n            this.Reveal.getSlidePastCount(slide) + horizontalOffset,\r\n            '/',\r\n            this.Reveal.getTotalSlides()\r\n          );\r\n          break;\r\n        default:\r\n          let indices = this.Reveal.getIndices(slide);\r\n          value.push(indices.h + horizontalOffset);\r\n          let sep = format === 'h/v' ? '/' : '.';\r\n          if (this.Reveal.isVerticalSlide(slide))\r\n            value.push(sep, indices.v + 1);\r\n      }\r\n    }\r\n\r\n    let url = '#' + this.Reveal.location.getHash(slide);\r\n    return this.formatNumber(value[0], value[1], value[2], url);\r\n  }\r\n\r\n  /**\r\n   * Applies HTML formatting to a slide number before it's\r\n   * written to the DOM.\r\n   *\r\n   * @param {number} a Current slide\r\n   * @param {string} delimiter Character to separate slide numbers\r\n   * @param {(number|*)} b Total slides\r\n   * @param {HTMLElement} [url='#'+locationHash()] The url to link to\r\n   * @return {string} HTML string fragment\r\n   */\r\n  formatNumber(a, delimiter, b, url = '#' + this.Reveal.location.getHash()) {\r\n    if (typeof b === 'number' && !isNaN(b)) {\r\n      return `<a href=\"${url}\">\r\n\t\t\t\t\t<span class=\"slide-number-a\">${a}</span>\r\n\t\t\t\t\t<span class=\"slide-number-delimiter\">${delimiter}</span>\r\n\t\t\t\t\t<span class=\"slide-number-b\">${b}</span>\r\n\t\t\t\t\t</a>`;\r\n    } else {\r\n      return `<a href=\"${url}\">\r\n\t\t\t\t\t<span class=\"slide-number-a\">${a}</span>\r\n\t\t\t\t\t</a>`;\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.element.remove();\r\n  }\r\n}\r\n","/**\r\n * Converts various color input formats to an {r:0,g:0,b:0} object.\r\n *\r\n * @param {string} color The string representation of a color\r\n * @example\r\n * colorToRgb('#000');\r\n * @example\r\n * colorToRgb('#000000');\r\n * @example\r\n * colorToRgb('rgb(0,0,0)');\r\n * @example\r\n * colorToRgb('rgba(0,0,0)');\r\n *\r\n * @return {{r: number, g: number, b: number, [a]: number}|null}\r\n */\r\nexport const colorToRgb = (color) => {\r\n  let hex3 = color.match(/^#([0-9a-f]{3})$/i);\r\n  if (hex3 && hex3[1]) {\r\n    hex3 = hex3[1];\r\n    return {\r\n      r: parseInt(hex3.charAt(0), 16) * 0x11,\r\n      g: parseInt(hex3.charAt(1), 16) * 0x11,\r\n      b: parseInt(hex3.charAt(2), 16) * 0x11,\r\n    };\r\n  }\r\n\r\n  let hex6 = color.match(/^#([0-9a-f]{6})$/i);\r\n  if (hex6 && hex6[1]) {\r\n    hex6 = hex6[1];\r\n    return {\r\n      r: parseInt(hex6.slice(0, 2), 16),\r\n      g: parseInt(hex6.slice(2, 4), 16),\r\n      b: parseInt(hex6.slice(4, 6), 16),\r\n    };\r\n  }\r\n\r\n  let rgb = color.match(/^rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$/i);\r\n  if (rgb) {\r\n    return {\r\n      r: parseInt(rgb[1], 10),\r\n      g: parseInt(rgb[2], 10),\r\n      b: parseInt(rgb[3], 10),\r\n    };\r\n  }\r\n\r\n  let rgba = color.match(\r\n    /^rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\,\\s*([\\d]+|[\\d]*.[\\d]+)\\s*\\)$/i\r\n  );\r\n  if (rgba) {\r\n    return {\r\n      r: parseInt(rgba[1], 10),\r\n      g: parseInt(rgba[2], 10),\r\n      b: parseInt(rgba[3], 10),\r\n      a: parseFloat(rgba[4]),\r\n    };\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Calculates brightness on a scale of 0-255.\r\n *\r\n * @param {string} color See colorToRgb for supported formats.\r\n * @see {@link colorToRgb}\r\n */\r\nexport const colorBrightness = (color) => {\r\n  if (typeof color === 'string') color = colorToRgb(color);\r\n\r\n  if (color) {\r\n    return (color.r * 299 + color.g * 587 + color.b * 114) / 1000;\r\n  }\r\n\r\n  return null;\r\n};\r\n","import { queryAll } from '../utils/util.js';\r\nimport { colorToRgb, colorBrightness } from '../utils/color.js';\r\n\r\n/**\r\n * Creates and updates slide backgrounds.\r\n */\r\nexport default class Backgrounds {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n  }\r\n\r\n  render() {\r\n    this.element = document.createElement('div');\r\n    this.element.className = 'backgrounds';\r\n    this.Reveal.getRevealElement().appendChild(this.element);\r\n  }\r\n\r\n  /**\r\n   * Creates the slide background elements and appends them\r\n   * to the background container. One element is created per\r\n   * slide no matter if the given slide has visible background.\r\n   */\r\n  create() {\r\n    // Clear prior backgrounds\r\n    this.element.innerHTML = '';\r\n    this.element.classList.add('no-transition');\r\n\r\n    // Iterate over all horizontal slides\r\n    this.Reveal.getHorizontalSlides().forEach((slideh) => {\r\n      let backgroundStack = this.createBackground(slideh, this.element);\r\n\r\n      // Iterate over all vertical slides\r\n      queryAll(slideh, 'section').forEach((slidev) => {\r\n        this.createBackground(slidev, backgroundStack);\r\n\r\n        backgroundStack.classList.add('stack');\r\n      });\r\n    });\r\n\r\n    // Add parallax background if specified\r\n    if (this.Reveal.getConfig().parallaxBackgroundImage) {\r\n      this.element.style.backgroundImage =\r\n        'url(\"' + this.Reveal.getConfig().parallaxBackgroundImage + '\")';\r\n      this.element.style.backgroundSize =\r\n        this.Reveal.getConfig().parallaxBackgroundSize;\r\n      this.element.style.backgroundRepeat =\r\n        this.Reveal.getConfig().parallaxBackgroundRepeat;\r\n      this.element.style.backgroundPosition =\r\n        this.Reveal.getConfig().parallaxBackgroundPosition;\r\n\r\n      // Make sure the below properties are set on the element - these properties are\r\n      // needed for proper transitions to be set on the element via CSS. To remove\r\n      // annoying background slide-in effect when the presentation starts, apply\r\n      // these properties after short time delay\r\n      setTimeout(() => {\r\n        this.Reveal.getRevealElement().classList.add('has-parallax-background');\r\n      }, 1);\r\n    } else {\r\n      this.element.style.backgroundImage = '';\r\n      this.Reveal.getRevealElement().classList.remove(\r\n        'has-parallax-background'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a background for the given slide.\r\n   *\r\n   * @param {HTMLElement} slide\r\n   * @param {HTMLElement} container The element that the background\r\n   * should be appended to\r\n   * @return {HTMLElement} New background div\r\n   */\r\n  createBackground(slide, container) {\r\n    // Main slide background element\r\n    let element = document.createElement('div');\r\n    element.className =\r\n      'slide-background ' + slide.className.replace(/present|past|future/, '');\r\n\r\n    // Inner background element that wraps images/videos/iframes\r\n    let contentElement = document.createElement('div');\r\n    contentElement.className = 'slide-background-content';\r\n\r\n    element.appendChild(contentElement);\r\n    container.appendChild(element);\r\n\r\n    slide.slideBackgroundElement = element;\r\n    slide.slideBackgroundContentElement = contentElement;\r\n\r\n    // Syncs the background to reflect all current background settings\r\n    this.sync(slide);\r\n\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Renders all of the visual properties of a slide background\r\n   * based on the various background attributes.\r\n   *\r\n   * @param {HTMLElement} slide\r\n   */\r\n  sync(slide) {\r\n    const element = slide.slideBackgroundElement,\r\n      contentElement = slide.slideBackgroundContentElement;\r\n\r\n    const data = {\r\n      background: slide.getAttribute('data-background'),\r\n      backgroundSize: slide.getAttribute('data-background-size'),\r\n      backgroundImage: slide.getAttribute('data-background-image'),\r\n      backgroundVideo: slide.getAttribute('data-background-video'),\r\n      backgroundIframe: slide.getAttribute('data-background-iframe'),\r\n      backgroundColor: slide.getAttribute('data-background-color'),\r\n      backgroundGradient: slide.getAttribute('data-background-gradient'),\r\n      backgroundRepeat: slide.getAttribute('data-background-repeat'),\r\n      backgroundPosition: slide.getAttribute('data-background-position'),\r\n      backgroundTransition: slide.getAttribute('data-background-transition'),\r\n      backgroundOpacity: slide.getAttribute('data-background-opacity'),\r\n    };\r\n\r\n    const dataPreload = slide.hasAttribute('data-preload');\r\n\r\n    // Reset the prior background state in case this is not the\r\n    // initial sync\r\n    slide.classList.remove('has-dark-background');\r\n    slide.classList.remove('has-light-background');\r\n\r\n    element.removeAttribute('data-loaded');\r\n    element.removeAttribute('data-background-hash');\r\n    element.removeAttribute('data-background-size');\r\n    element.removeAttribute('data-background-transition');\r\n    element.style.backgroundColor = '';\r\n\r\n    contentElement.style.backgroundSize = '';\r\n    contentElement.style.backgroundRepeat = '';\r\n    contentElement.style.backgroundPosition = '';\r\n    contentElement.style.backgroundImage = '';\r\n    contentElement.style.opacity = '';\r\n    contentElement.innerHTML = '';\r\n\r\n    if (data.background) {\r\n      // Auto-wrap image urls in url(...)\r\n      if (\r\n        /^(http|file|\\/\\/)/gi.test(data.background) ||\r\n        /\\.(svg|png|jpg|jpeg|gif|bmp|webp)([?#\\s]|$)/gi.test(data.background)\r\n      ) {\r\n        slide.setAttribute('data-background-image', data.background);\r\n      } else {\r\n        element.style.background = data.background;\r\n      }\r\n    }\r\n\r\n    // Create a hash for this combination of background settings.\r\n    // This is used to determine when two slide backgrounds are\r\n    // the same.\r\n    if (\r\n      data.background ||\r\n      data.backgroundColor ||\r\n      data.backgroundGradient ||\r\n      data.backgroundImage ||\r\n      data.backgroundVideo ||\r\n      data.backgroundIframe\r\n    ) {\r\n      element.setAttribute(\r\n        'data-background-hash',\r\n        data.background +\r\n          data.backgroundSize +\r\n          data.backgroundImage +\r\n          data.backgroundVideo +\r\n          data.backgroundIframe +\r\n          data.backgroundColor +\r\n          data.backgroundGradient +\r\n          data.backgroundRepeat +\r\n          data.backgroundPosition +\r\n          data.backgroundTransition +\r\n          data.backgroundOpacity\r\n      );\r\n    }\r\n\r\n    // Additional and optional background properties\r\n    if (data.backgroundSize)\r\n      element.setAttribute('data-background-size', data.backgroundSize);\r\n    if (data.backgroundColor)\r\n      element.style.backgroundColor = data.backgroundColor;\r\n    if (data.backgroundGradient)\r\n      element.style.backgroundImage = data.backgroundGradient;\r\n    if (data.backgroundTransition)\r\n      element.setAttribute(\r\n        'data-background-transition',\r\n        data.backgroundTransition\r\n      );\r\n\r\n    if (dataPreload) element.setAttribute('data-preload', '');\r\n\r\n    // Background image options are set on the content wrapper\r\n    if (data.backgroundSize)\r\n      contentElement.style.backgroundSize = data.backgroundSize;\r\n    if (data.backgroundRepeat)\r\n      contentElement.style.backgroundRepeat = data.backgroundRepeat;\r\n    if (data.backgroundPosition)\r\n      contentElement.style.backgroundPosition = data.backgroundPosition;\r\n    if (data.backgroundOpacity)\r\n      contentElement.style.opacity = data.backgroundOpacity;\r\n\r\n    // If this slide has a background color, we add a class that\r\n    // signals if it is light or dark. If the slide has no background\r\n    // color, no class will be added\r\n    let contrastColor = data.backgroundColor;\r\n\r\n    // If no bg color was found, or it cannot be converted by colorToRgb, check the computed background\r\n    if (!contrastColor || !colorToRgb(contrastColor)) {\r\n      let computedBackgroundStyle = window.getComputedStyle(element);\r\n      if (computedBackgroundStyle && computedBackgroundStyle.backgroundColor) {\r\n        contrastColor = computedBackgroundStyle.backgroundColor;\r\n      }\r\n    }\r\n\r\n    if (contrastColor) {\r\n      const rgb = colorToRgb(contrastColor);\r\n\r\n      // Ignore fully transparent backgrounds. Some browsers return\r\n      // rgba(0,0,0,0) when reading the computed background color of\r\n      // an element with no background\r\n      if (rgb && rgb.a !== 0) {\r\n        if (colorBrightness(contrastColor) < 128) {\r\n          slide.classList.add('has-dark-background');\r\n        } else {\r\n          slide.classList.add('has-light-background');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the background elements to reflect the current\r\n   * slide.\r\n   *\r\n   * @param {boolean} includeAll If true, the backgrounds of\r\n   * all vertical slides (not just the present) will be updated.\r\n   */\r\n  update(includeAll = false) {\r\n    let currentSlide = this.Reveal.getCurrentSlide();\r\n    let indices = this.Reveal.getIndices();\r\n\r\n    let currentBackground = null;\r\n\r\n    // Reverse past/future classes when in RTL mode\r\n    let horizontalPast = this.Reveal.getConfig().rtl ? 'future' : 'past',\r\n      horizontalFuture = this.Reveal.getConfig().rtl ? 'past' : 'future';\r\n\r\n    // Update the classes of all backgrounds to match the\r\n    // states of their slides (past/present/future)\r\n    Array.from(this.element.childNodes).forEach((backgroundh, h) => {\r\n      backgroundh.classList.remove('past', 'present', 'future');\r\n\r\n      if (h < indices.h) {\r\n        backgroundh.classList.add(horizontalPast);\r\n      } else if (h > indices.h) {\r\n        backgroundh.classList.add(horizontalFuture);\r\n      } else {\r\n        backgroundh.classList.add('present');\r\n\r\n        // Store a reference to the current background element\r\n        currentBackground = backgroundh;\r\n      }\r\n\r\n      if (includeAll || h === indices.h) {\r\n        queryAll(backgroundh, '.slide-background').forEach((backgroundv, v) => {\r\n          backgroundv.classList.remove('past', 'present', 'future');\r\n\r\n          if (v < indices.v) {\r\n            backgroundv.classList.add('past');\r\n          } else if (v > indices.v) {\r\n            backgroundv.classList.add('future');\r\n          } else {\r\n            backgroundv.classList.add('present');\r\n\r\n            // Only if this is the present horizontal and vertical slide\r\n            if (h === indices.h) currentBackground = backgroundv;\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Stop content inside of previous backgrounds\r\n    if (this.previousBackground) {\r\n      this.Reveal.slideContent.stopEmbeddedContent(this.previousBackground, {\r\n        unloadIframes: !this.Reveal.slideContent.shouldPreload(\r\n          this.previousBackground\r\n        ),\r\n      });\r\n    }\r\n\r\n    // Start content in the current background\r\n    if (currentBackground) {\r\n      this.Reveal.slideContent.startEmbeddedContent(currentBackground);\r\n\r\n      let currentBackgroundContent = currentBackground.querySelector(\r\n        '.slide-background-content'\r\n      );\r\n      if (currentBackgroundContent) {\r\n        let backgroundImageURL =\r\n          currentBackgroundContent.style.backgroundImage || '';\r\n\r\n        // Restart GIFs (doesn't work in Firefox)\r\n        if (/\\.gif/i.test(backgroundImageURL)) {\r\n          currentBackgroundContent.style.backgroundImage = '';\r\n          window.getComputedStyle(currentBackgroundContent).opacity;\r\n          currentBackgroundContent.style.backgroundImage = backgroundImageURL;\r\n        }\r\n      }\r\n\r\n      // Don't transition between identical backgrounds. This\r\n      // prevents unwanted flicker.\r\n      let previousBackgroundHash = this.previousBackground\r\n        ? this.previousBackground.getAttribute('data-background-hash')\r\n        : null;\r\n      let currentBackgroundHash = currentBackground.getAttribute(\r\n        'data-background-hash'\r\n      );\r\n      if (\r\n        currentBackgroundHash &&\r\n        currentBackgroundHash === previousBackgroundHash &&\r\n        currentBackground !== this.previousBackground\r\n      ) {\r\n        this.element.classList.add('no-transition');\r\n      }\r\n\r\n      this.previousBackground = currentBackground;\r\n    }\r\n\r\n    // If there's a background brightness flag for this slide,\r\n    // bubble it to the .reveal container\r\n    if (currentSlide) {\r\n      ['has-light-background', 'has-dark-background'].forEach(\r\n        (classToBubble) => {\r\n          if (currentSlide.classList.contains(classToBubble)) {\r\n            this.Reveal.getRevealElement().classList.add(classToBubble);\r\n          } else {\r\n            this.Reveal.getRevealElement().classList.remove(classToBubble);\r\n          }\r\n        },\r\n        this\r\n      );\r\n    }\r\n\r\n    // Allow the first background to apply without transition\r\n    setTimeout(() => {\r\n      this.element.classList.remove('no-transition');\r\n    }, 1);\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the parallax background based\r\n   * on the current slide index.\r\n   */\r\n  updateParallax() {\r\n    let indices = this.Reveal.getIndices();\r\n\r\n    if (this.Reveal.getConfig().parallaxBackgroundImage) {\r\n      let horizontalSlides = this.Reveal.getHorizontalSlides(),\r\n        verticalSlides = this.Reveal.getVerticalSlides();\r\n\r\n      let backgroundSize = this.element.style.backgroundSize.split(' '),\r\n        backgroundWidth,\r\n        backgroundHeight;\r\n\r\n      if (backgroundSize.length === 1) {\r\n        backgroundWidth = backgroundHeight = parseInt(backgroundSize[0], 10);\r\n      } else {\r\n        backgroundWidth = parseInt(backgroundSize[0], 10);\r\n        backgroundHeight = parseInt(backgroundSize[1], 10);\r\n      }\r\n\r\n      let slideWidth = this.element.offsetWidth,\r\n        horizontalSlideCount = horizontalSlides.length,\r\n        horizontalOffsetMultiplier,\r\n        horizontalOffset;\r\n\r\n      if (\r\n        typeof this.Reveal.getConfig().parallaxBackgroundHorizontal === 'number'\r\n      ) {\r\n        horizontalOffsetMultiplier =\r\n          this.Reveal.getConfig().parallaxBackgroundHorizontal;\r\n      } else {\r\n        horizontalOffsetMultiplier =\r\n          horizontalSlideCount > 1\r\n            ? (backgroundWidth - slideWidth) / (horizontalSlideCount - 1)\r\n            : 0;\r\n      }\r\n\r\n      horizontalOffset = horizontalOffsetMultiplier * indices.h * -1;\r\n\r\n      let slideHeight = this.element.offsetHeight,\r\n        verticalSlideCount = verticalSlides.length,\r\n        verticalOffsetMultiplier,\r\n        verticalOffset;\r\n\r\n      if (\r\n        typeof this.Reveal.getConfig().parallaxBackgroundVertical === 'number'\r\n      ) {\r\n        verticalOffsetMultiplier =\r\n          this.Reveal.getConfig().parallaxBackgroundVertical;\r\n      } else {\r\n        verticalOffsetMultiplier =\r\n          (backgroundHeight - slideHeight) / (verticalSlideCount - 1);\r\n      }\r\n\r\n      verticalOffset =\r\n        verticalSlideCount > 0 ? verticalOffsetMultiplier * indices.v : 0;\r\n\r\n      this.element.style.backgroundPosition =\r\n        horizontalOffset + 'px ' + -verticalOffset + 'px';\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.element.remove();\r\n  }\r\n}\r\n","export const SLIDES_SELECTOR = '.slides section';\r\nexport const HORIZONTAL_SLIDES_SELECTOR = '.slides>section';\r\nexport const VERTICAL_SLIDES_SELECTOR = '.slides>section.present>section';\r\n\r\n// Methods that may not be invoked via the postMessage API\r\nexport const POST_MESSAGE_METHOD_BLACKLIST =\r\n  /registerPlugin|registerKeyboardShortcut|addKeyBinding|addEventListener|showPreview/;\r\n\r\n// Regex for retrieving the fragment style from a class attribute\r\nexport const FRAGMENT_STYLE_REGEX =\r\n  /fade-(down|up|right|left|out|in-then-out|in-then-semi-out)|semi-fade-out|current-visible|shrink|grow/;\r\n","import {\r\n  queryAll,\r\n  extend,\r\n  createStyleSheet,\r\n  matches,\r\n  closest,\r\n} from '../utils/util.js';\r\nimport { FRAGMENT_STYLE_REGEX } from '../utils/constants.js';\r\n\r\n// Counter used to generate unique IDs for auto-animated elements\r\nlet autoAnimateCounter = 0;\r\n\r\n/**\r\n * Automatically animates matching elements across\r\n * slides with the [data-auto-animate] attribute.\r\n */\r\nexport default class AutoAnimate {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n  }\r\n\r\n  /**\r\n   * Runs an auto-animation between the given slides.\r\n   *\r\n   * @param  {HTMLElement} fromSlide\r\n   * @param  {HTMLElement} toSlide\r\n   */\r\n  run(fromSlide, toSlide) {\r\n    // Clean up after prior animations\r\n    this.reset();\r\n\r\n    let allSlides = this.Reveal.getSlides();\r\n    let toSlideIndex = allSlides.indexOf(toSlide);\r\n    let fromSlideIndex = allSlides.indexOf(fromSlide);\r\n\r\n    // Ensure that both slides are auto-animate targets with the same data-auto-animate-id value\r\n    // (including null if absent on both) and that data-auto-animate-restart isn't set on the\r\n    // physically latter slide (independent of slide direction)\r\n    if (\r\n      fromSlide.hasAttribute('data-auto-animate') &&\r\n      toSlide.hasAttribute('data-auto-animate') &&\r\n      fromSlide.getAttribute('data-auto-animate-id') ===\r\n        toSlide.getAttribute('data-auto-animate-id') &&\r\n      !(toSlideIndex > fromSlideIndex ? toSlide : fromSlide).hasAttribute(\r\n        'data-auto-animate-restart'\r\n      )\r\n    ) {\r\n      // Create a new auto-animate sheet\r\n      this.autoAnimateStyleSheet =\r\n        this.autoAnimateStyleSheet || createStyleSheet();\r\n\r\n      let animationOptions = this.getAutoAnimateOptions(toSlide);\r\n\r\n      // Set our starting state\r\n      fromSlide.dataset.autoAnimate = 'pending';\r\n      toSlide.dataset.autoAnimate = 'pending';\r\n\r\n      // Flag the navigation direction, needed for fragment buildup\r\n      animationOptions.slideDirection =\r\n        toSlideIndex > fromSlideIndex ? 'forward' : 'backward';\r\n\r\n      // If the from-slide is hidden because it has moved outside\r\n      // the view distance, we need to temporarily show it while\r\n      // measuring\r\n      let fromSlideIsHidden = fromSlide.style.display === 'none';\r\n      if (fromSlideIsHidden)\r\n        fromSlide.style.display = this.Reveal.getConfig().display;\r\n\r\n      // Inject our auto-animate styles for this transition\r\n      let css = this.getAutoAnimatableElements(fromSlide, toSlide).map(\r\n        (elements) => {\r\n          return this.autoAnimateElements(\r\n            elements.from,\r\n            elements.to,\r\n            elements.options || {},\r\n            animationOptions,\r\n            autoAnimateCounter++\r\n          );\r\n        }\r\n      );\r\n\r\n      if (fromSlideIsHidden) fromSlide.style.display = 'none';\r\n\r\n      // Animate unmatched elements, if enabled\r\n      if (\r\n        toSlide.dataset.autoAnimateUnmatched !== 'false' &&\r\n        this.Reveal.getConfig().autoAnimateUnmatched === true\r\n      ) {\r\n        // Our default timings for unmatched elements\r\n        let defaultUnmatchedDuration = animationOptions.duration * 0.8,\r\n          defaultUnmatchedDelay = animationOptions.duration * 0.2;\r\n\r\n        this.getUnmatchedAutoAnimateElements(toSlide).forEach(\r\n          (unmatchedElement) => {\r\n            let unmatchedOptions = this.getAutoAnimateOptions(\r\n              unmatchedElement,\r\n              animationOptions\r\n            );\r\n            let id = 'unmatched';\r\n\r\n            // If there is a duration or delay set specifically for this\r\n            // element our unmatched elements should adhere to those\r\n            if (\r\n              unmatchedOptions.duration !== animationOptions.duration ||\r\n              unmatchedOptions.delay !== animationOptions.delay\r\n            ) {\r\n              id = 'unmatched-' + autoAnimateCounter++;\r\n              css.push(\r\n                `[data-auto-animate=\"running\"] [data-auto-animate-target=\"${id}\"] { transition: opacity ${unmatchedOptions.duration}s ease ${unmatchedOptions.delay}s; }`\r\n              );\r\n            }\r\n\r\n            unmatchedElement.dataset.autoAnimateTarget = id;\r\n          },\r\n          this\r\n        );\r\n\r\n        // Our default transition for unmatched elements\r\n        css.push(\r\n          `[data-auto-animate=\"running\"] [data-auto-animate-target=\"unmatched\"] { transition: opacity ${defaultUnmatchedDuration}s ease ${defaultUnmatchedDelay}s; }`\r\n        );\r\n      }\r\n\r\n      // Setting the whole chunk of CSS at once is the most\r\n      // efficient way to do this. Using sheet.insertRule\r\n      // is multiple factors slower.\r\n      this.autoAnimateStyleSheet.innerHTML = css.join('');\r\n\r\n      // Start the animation next cycle\r\n      requestAnimationFrame(() => {\r\n        if (this.autoAnimateStyleSheet) {\r\n          // This forces our newly injected styles to be applied in Firefox\r\n          getComputedStyle(this.autoAnimateStyleSheet).fontWeight;\r\n\r\n          toSlide.dataset.autoAnimate = 'running';\r\n        }\r\n      });\r\n\r\n      this.Reveal.dispatchEvent({\r\n        type: 'autoanimate',\r\n        data: {\r\n          fromSlide,\r\n          toSlide,\r\n          sheet: this.autoAnimateStyleSheet,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rolls back all changes that we've made to the DOM so\r\n   * that as part of animating.\r\n   */\r\n  reset() {\r\n    // Reset slides\r\n    queryAll(\r\n      this.Reveal.getRevealElement(),\r\n      '[data-auto-animate]:not([data-auto-animate=\"\"])'\r\n    ).forEach((element) => {\r\n      element.dataset.autoAnimate = '';\r\n    });\r\n\r\n    // Reset elements\r\n    queryAll(\r\n      this.Reveal.getRevealElement(),\r\n      '[data-auto-animate-target]'\r\n    ).forEach((element) => {\r\n      delete element.dataset.autoAnimateTarget;\r\n    });\r\n\r\n    // Remove the animation sheet\r\n    if (this.autoAnimateStyleSheet && this.autoAnimateStyleSheet.parentNode) {\r\n      this.autoAnimateStyleSheet.parentNode.removeChild(\r\n        this.autoAnimateStyleSheet\r\n      );\r\n      this.autoAnimateStyleSheet = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a FLIP animation where the `to` element starts out\r\n   * in the `from` element position and animates to its original\r\n   * state.\r\n   *\r\n   * @param {HTMLElement} from\r\n   * @param {HTMLElement} to\r\n   * @param {Object} elementOptions Options for this element pair\r\n   * @param {Object} animationOptions Options set at the slide level\r\n   * @param {String} id Unique ID that we can use to identify this\r\n   * auto-animate element in the DOM\r\n   */\r\n  autoAnimateElements(from, to, elementOptions, animationOptions, id) {\r\n    // 'from' elements are given a data-auto-animate-target with no value,\r\n    // 'to' elements are are given a data-auto-animate-target with an ID\r\n    from.dataset.autoAnimateTarget = '';\r\n    to.dataset.autoAnimateTarget = id;\r\n\r\n    // Each element may override any of the auto-animate options\r\n    // like transition easing, duration and delay via data-attributes\r\n    let options = this.getAutoAnimateOptions(to, animationOptions);\r\n\r\n    // If we're using a custom element matcher the element options\r\n    // may contain additional transition overrides\r\n    if (typeof elementOptions.delay !== 'undefined')\r\n      options.delay = elementOptions.delay;\r\n    if (typeof elementOptions.duration !== 'undefined')\r\n      options.duration = elementOptions.duration;\r\n    if (typeof elementOptions.easing !== 'undefined')\r\n      options.easing = elementOptions.easing;\r\n\r\n    let fromProps = this.getAutoAnimatableProperties(\r\n        'from',\r\n        from,\r\n        elementOptions\r\n      ),\r\n      toProps = this.getAutoAnimatableProperties('to', to, elementOptions);\r\n\r\n    // Maintain fragment visibility for matching elements when\r\n    // we're navigating forwards, this way the viewer won't need\r\n    // to step through the same fragments twice\r\n    if (to.classList.contains('fragment')) {\r\n      // Don't auto-animate the opacity of fragments to avoid\r\n      // conflicts with fragment animations\r\n      delete toProps.styles['opacity'];\r\n\r\n      if (from.classList.contains('fragment')) {\r\n        let fromFragmentStyle = (from.className.match(FRAGMENT_STYLE_REGEX) || [\r\n          '',\r\n        ])[0];\r\n        let toFragmentStyle = (to.className.match(FRAGMENT_STYLE_REGEX) || [\r\n          '',\r\n        ])[0];\r\n\r\n        // Only skip the fragment if the fragment animation style\r\n        // remains unchanged\r\n        if (\r\n          fromFragmentStyle === toFragmentStyle &&\r\n          animationOptions.slideDirection === 'forward'\r\n        ) {\r\n          to.classList.add('visible', 'disabled');\r\n        }\r\n      }\r\n    }\r\n\r\n    // If translation and/or scaling are enabled, css transform\r\n    // the 'to' element so that it matches the position and size\r\n    // of the 'from' element\r\n    if (elementOptions.translate !== false || elementOptions.scale !== false) {\r\n      let presentationScale = this.Reveal.getScale();\r\n\r\n      let delta = {\r\n        x: (fromProps.x - toProps.x) / presentationScale,\r\n        y: (fromProps.y - toProps.y) / presentationScale,\r\n        scaleX: fromProps.width / toProps.width,\r\n        scaleY: fromProps.height / toProps.height,\r\n      };\r\n\r\n      // Limit decimal points to avoid 0.0001px blur and stutter\r\n      delta.x = Math.round(delta.x * 1000) / 1000;\r\n      delta.y = Math.round(delta.y * 1000) / 1000;\r\n      delta.scaleX = Math.round(delta.scaleX * 1000) / 1000;\r\n      delta.scaleX = Math.round(delta.scaleX * 1000) / 1000;\r\n\r\n      let translate =\r\n          elementOptions.translate !== false &&\r\n          (delta.x !== 0 || delta.y !== 0),\r\n        scale =\r\n          elementOptions.scale !== false &&\r\n          (delta.scaleX !== 0 || delta.scaleY !== 0);\r\n\r\n      // No need to transform if nothing's changed\r\n      if (translate || scale) {\r\n        let transform = [];\r\n\r\n        if (translate) transform.push(`translate(${delta.x}px, ${delta.y}px)`);\r\n        if (scale) transform.push(`scale(${delta.scaleX}, ${delta.scaleY})`);\r\n\r\n        fromProps.styles['transform'] = transform.join(' ');\r\n        fromProps.styles['transform-origin'] = 'top left';\r\n\r\n        toProps.styles['transform'] = 'none';\r\n      }\r\n    }\r\n\r\n    // Delete all unchanged 'to' styles\r\n    for (let propertyName in toProps.styles) {\r\n      const toValue = toProps.styles[propertyName];\r\n      const fromValue = fromProps.styles[propertyName];\r\n\r\n      if (toValue === fromValue) {\r\n        delete toProps.styles[propertyName];\r\n      } else {\r\n        // If these property values were set via a custom matcher providing\r\n        // an explicit 'from' and/or 'to' value, we always inject those values.\r\n        if (toValue.explicitValue === true) {\r\n          toProps.styles[propertyName] = toValue.value;\r\n        }\r\n\r\n        if (fromValue.explicitValue === true) {\r\n          fromProps.styles[propertyName] = fromValue.value;\r\n        }\r\n      }\r\n    }\r\n\r\n    let css = '';\r\n\r\n    let toStyleProperties = Object.keys(toProps.styles);\r\n\r\n    // Only create animate this element IF at least one style\r\n    // property has changed\r\n    if (toStyleProperties.length > 0) {\r\n      // Instantly move to the 'from' state\r\n      fromProps.styles['transition'] = 'none';\r\n\r\n      // Animate towards the 'to' state\r\n      toProps.styles[\r\n        'transition'\r\n      ] = `all ${options.duration}s ${options.easing} ${options.delay}s`;\r\n      toProps.styles['transition-property'] = toStyleProperties.join(', ');\r\n      toProps.styles['will-change'] = toStyleProperties.join(', ');\r\n\r\n      // Build up our custom CSS. We need to override inline styles\r\n      // so we need to make our styles vErY IMPORTANT!1!!\r\n      let fromCSS = Object.keys(fromProps.styles)\r\n        .map((propertyName) => {\r\n          return (\r\n            propertyName +\r\n            ': ' +\r\n            fromProps.styles[propertyName] +\r\n            ' !important;'\r\n          );\r\n        })\r\n        .join('');\r\n\r\n      let toCSS = Object.keys(toProps.styles)\r\n        .map((propertyName) => {\r\n          return (\r\n            propertyName + ': ' + toProps.styles[propertyName] + ' !important;'\r\n          );\r\n        })\r\n        .join('');\r\n\r\n      css =\r\n        '[data-auto-animate-target=\"' +\r\n        id +\r\n        '\"] {' +\r\n        fromCSS +\r\n        '}' +\r\n        '[data-auto-animate=\"running\"] [data-auto-animate-target=\"' +\r\n        id +\r\n        '\"] {' +\r\n        toCSS +\r\n        '}';\r\n    }\r\n\r\n    return css;\r\n  }\r\n\r\n  /**\r\n   * Returns the auto-animate options for the given element.\r\n   *\r\n   * @param {HTMLElement} element Element to pick up options\r\n   * from, either a slide or an animation target\r\n   * @param {Object} [inheritedOptions] Optional set of existing\r\n   * options\r\n   */\r\n  getAutoAnimateOptions(element, inheritedOptions) {\r\n    let options = {\r\n      easing: this.Reveal.getConfig().autoAnimateEasing,\r\n      duration: this.Reveal.getConfig().autoAnimateDuration,\r\n      delay: 0,\r\n    };\r\n\r\n    options = extend(options, inheritedOptions);\r\n\r\n    // Inherit options from parent elements\r\n    if (element.parentNode) {\r\n      let autoAnimatedParent = closest(\r\n        element.parentNode,\r\n        '[data-auto-animate-target]'\r\n      );\r\n      if (autoAnimatedParent) {\r\n        options = this.getAutoAnimateOptions(autoAnimatedParent, options);\r\n      }\r\n    }\r\n\r\n    if (element.dataset.autoAnimateEasing) {\r\n      options.easing = element.dataset.autoAnimateEasing;\r\n    }\r\n\r\n    if (element.dataset.autoAnimateDuration) {\r\n      options.duration = parseFloat(element.dataset.autoAnimateDuration);\r\n    }\r\n\r\n    if (element.dataset.autoAnimateDelay) {\r\n      options.delay = parseFloat(element.dataset.autoAnimateDelay);\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Returns an object containing all of the properties\r\n   * that can be auto-animated for the given element and\r\n   * their current computed values.\r\n   *\r\n   * @param {String} direction 'from' or 'to'\r\n   */\r\n  getAutoAnimatableProperties(direction, element, elementOptions) {\r\n    let config = this.Reveal.getConfig();\r\n\r\n    let properties = { styles: [] };\r\n\r\n    // Position and size\r\n    if (elementOptions.translate !== false || elementOptions.scale !== false) {\r\n      let bounds;\r\n\r\n      // Custom auto-animate may optionally return a custom tailored\r\n      // measurement function\r\n      if (typeof elementOptions.measure === 'function') {\r\n        bounds = elementOptions.measure(element);\r\n      } else {\r\n        if (config.center) {\r\n          // More precise, but breaks when used in combination\r\n          // with zoom for scaling the deck ¯\\_(ツ)_/¯\r\n          bounds = element.getBoundingClientRect();\r\n        } else {\r\n          let scale = this.Reveal.getScale();\r\n          bounds = {\r\n            x: element.offsetLeft * scale,\r\n            y: element.offsetTop * scale,\r\n            width: element.offsetWidth * scale,\r\n            height: element.offsetHeight * scale,\r\n          };\r\n        }\r\n      }\r\n\r\n      properties.x = bounds.x;\r\n      properties.y = bounds.y;\r\n      properties.width = bounds.width;\r\n      properties.height = bounds.height;\r\n    }\r\n\r\n    const computedStyles = getComputedStyle(element);\r\n\r\n    // CSS styles\r\n    (elementOptions.styles || config.autoAnimateStyles).forEach((style) => {\r\n      let value;\r\n\r\n      // `style` is either the property name directly, or an object\r\n      // definition of a style property\r\n      if (typeof style === 'string') style = { property: style };\r\n\r\n      if (typeof style.from !== 'undefined' && direction === 'from') {\r\n        value = { value: style.from, explicitValue: true };\r\n      } else if (typeof style.to !== 'undefined' && direction === 'to') {\r\n        value = { value: style.to, explicitValue: true };\r\n      } else {\r\n        // Use a unitless value for line-height so that it inherits properly\r\n        if (style.property === 'line-height') {\r\n          value =\r\n            parseFloat(computedStyles['line-height']) /\r\n            parseFloat(computedStyles['font-size']);\r\n        }\r\n\r\n        if (isNaN(value)) {\r\n          value = computedStyles[style.property];\r\n        }\r\n      }\r\n\r\n      if (value !== '') {\r\n        properties.styles[style.property] = value;\r\n      }\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  /**\r\n   * Get a list of all element pairs that we can animate\r\n   * between the given slides.\r\n   *\r\n   * @param {HTMLElement} fromSlide\r\n   * @param {HTMLElement} toSlide\r\n   *\r\n   * @return {Array} Each value is an array where [0] is\r\n   * the element we're animating from and [1] is the\r\n   * element we're animating to\r\n   */\r\n  getAutoAnimatableElements(fromSlide, toSlide) {\r\n    let matcher =\r\n      typeof this.Reveal.getConfig().autoAnimateMatcher === 'function'\r\n        ? this.Reveal.getConfig().autoAnimateMatcher\r\n        : this.getAutoAnimatePairs;\r\n\r\n    let pairs = matcher.call(this, fromSlide, toSlide);\r\n\r\n    let reserved = [];\r\n\r\n    // Remove duplicate pairs\r\n    return pairs.filter((pair, index) => {\r\n      if (reserved.indexOf(pair.to) === -1) {\r\n        reserved.push(pair.to);\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Identifies matching elements between slides.\r\n   *\r\n   * You can specify a custom matcher function by using\r\n   * the `autoAnimateMatcher` config option.\r\n   */\r\n  getAutoAnimatePairs(fromSlide, toSlide) {\r\n    let pairs = [];\r\n\r\n    const codeNodes = 'pre';\r\n    const textNodes = 'h1, h2, h3, h4, h5, h6, p, li';\r\n    const mediaNodes = 'img, video, iframe';\r\n\r\n    // Eplicit matches via data-id\r\n    this.findAutoAnimateMatches(\r\n      pairs,\r\n      fromSlide,\r\n      toSlide,\r\n      '[data-id]',\r\n      (node) => {\r\n        return node.nodeName + ':::' + node.getAttribute('data-id');\r\n      }\r\n    );\r\n\r\n    // Text\r\n    this.findAutoAnimateMatches(\r\n      pairs,\r\n      fromSlide,\r\n      toSlide,\r\n      textNodes,\r\n      (node) => {\r\n        return node.nodeName + ':::' + node.innerText;\r\n      }\r\n    );\r\n\r\n    // Media\r\n    this.findAutoAnimateMatches(\r\n      pairs,\r\n      fromSlide,\r\n      toSlide,\r\n      mediaNodes,\r\n      (node) => {\r\n        return (\r\n          node.nodeName +\r\n          ':::' +\r\n          (node.getAttribute('src') || node.getAttribute('data-src'))\r\n        );\r\n      }\r\n    );\r\n\r\n    // Code\r\n    this.findAutoAnimateMatches(\r\n      pairs,\r\n      fromSlide,\r\n      toSlide,\r\n      codeNodes,\r\n      (node) => {\r\n        return node.nodeName + ':::' + node.innerText;\r\n      }\r\n    );\r\n\r\n    pairs.forEach((pair) => {\r\n      // Disable scale transformations on text nodes, we transition\r\n      // each individual text property instead\r\n      if (matches(pair.from, textNodes)) {\r\n        pair.options = { scale: false };\r\n      }\r\n      // Animate individual lines of code\r\n      else if (matches(pair.from, codeNodes)) {\r\n        // Transition the code block's width and height instead of scaling\r\n        // to prevent its content from being squished\r\n        pair.options = { scale: false, styles: ['width', 'height'] };\r\n\r\n        // Lines of code\r\n        this.findAutoAnimateMatches(\r\n          pairs,\r\n          pair.from,\r\n          pair.to,\r\n          '.hljs .hljs-ln-code',\r\n          (node) => {\r\n            return node.textContent;\r\n          },\r\n          {\r\n            scale: false,\r\n            styles: [],\r\n            measure: this.getLocalBoundingBox.bind(this),\r\n          }\r\n        );\r\n\r\n        // Line numbers\r\n        this.findAutoAnimateMatches(\r\n          pairs,\r\n          pair.from,\r\n          pair.to,\r\n          '.hljs .hljs-ln-line[data-line-number]',\r\n          (node) => {\r\n            return node.getAttribute('data-line-number');\r\n          },\r\n          {\r\n            scale: false,\r\n            styles: ['width'],\r\n            measure: this.getLocalBoundingBox.bind(this),\r\n          }\r\n        );\r\n      }\r\n    }, this);\r\n\r\n    return pairs;\r\n  }\r\n\r\n  /**\r\n   * Helper method which returns a bounding box based on\r\n   * the given elements offset coordinates.\r\n   *\r\n   * @param {HTMLElement} element\r\n   * @return {Object} x, y, width, height\r\n   */\r\n  getLocalBoundingBox(element) {\r\n    const presentationScale = this.Reveal.getScale();\r\n\r\n    return {\r\n      x: Math.round(element.offsetLeft * presentationScale * 100) / 100,\r\n      y: Math.round(element.offsetTop * presentationScale * 100) / 100,\r\n      width: Math.round(element.offsetWidth * presentationScale * 100) / 100,\r\n      height: Math.round(element.offsetHeight * presentationScale * 100) / 100,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Finds matching elements between two slides.\r\n   *\r\n   * @param {Array} pairs            \tList of pairs to push matches to\r\n   * @param {HTMLElement} fromScope   Scope within the from element exists\r\n   * @param {HTMLElement} toScope     Scope within the to element exists\r\n   * @param {String} selector         CSS selector of the element to match\r\n   * @param {Function} serializer     A function that accepts an element and returns\r\n   *                                  a stringified ID based on its contents\r\n   * @param {Object} animationOptions Optional config options for this pair\r\n   */\r\n  findAutoAnimateMatches(\r\n    pairs,\r\n    fromScope,\r\n    toScope,\r\n    selector,\r\n    serializer,\r\n    animationOptions\r\n  ) {\r\n    let fromMatches = {};\r\n    let toMatches = {};\r\n\r\n    [].slice\r\n      .call(fromScope.querySelectorAll(selector))\r\n      .forEach((element, i) => {\r\n        const key = serializer(element);\r\n        if (typeof key === 'string' && key.length) {\r\n          fromMatches[key] = fromMatches[key] || [];\r\n          fromMatches[key].push(element);\r\n        }\r\n      });\r\n\r\n    [].slice.call(toScope.querySelectorAll(selector)).forEach((element, i) => {\r\n      const key = serializer(element);\r\n      toMatches[key] = toMatches[key] || [];\r\n      toMatches[key].push(element);\r\n\r\n      let fromElement;\r\n\r\n      // Retrieve the 'from' element\r\n      if (fromMatches[key]) {\r\n        const pimaryIndex = toMatches[key].length - 1;\r\n        const secondaryIndex = fromMatches[key].length - 1;\r\n\r\n        // If there are multiple identical from elements, retrieve\r\n        // the one at the same index as our to-element.\r\n        if (fromMatches[key][pimaryIndex]) {\r\n          fromElement = fromMatches[key][pimaryIndex];\r\n          fromMatches[key][pimaryIndex] = null;\r\n        }\r\n        // If there are no matching from-elements at the same index,\r\n        // use the last one.\r\n        else if (fromMatches[key][secondaryIndex]) {\r\n          fromElement = fromMatches[key][secondaryIndex];\r\n          fromMatches[key][secondaryIndex] = null;\r\n        }\r\n      }\r\n\r\n      // If we've got a matching pair, push it to the list of pairs\r\n      if (fromElement) {\r\n        pairs.push({\r\n          from: fromElement,\r\n          to: element,\r\n          options: animationOptions,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a all elements within the given scope that should\r\n   * be considered unmatched in an auto-animate transition. If\r\n   * fading of unmatched elements is turned on, these elements\r\n   * will fade when going between auto-animate slides.\r\n   *\r\n   * Note that parents of auto-animate targets are NOT considerd\r\n   * unmatched since fading them would break the auto-animation.\r\n   *\r\n   * @param {HTMLElement} rootElement\r\n   * @return {Array}\r\n   */\r\n  getUnmatchedAutoAnimateElements(rootElement) {\r\n    return [].slice.call(rootElement.children).reduce((result, element) => {\r\n      const containsAnimatedElements = element.querySelector(\r\n        '[data-auto-animate-target]'\r\n      );\r\n\r\n      // The element is unmatched if\r\n      // - It is not an auto-animate target\r\n      // - It does not contain any auto-animate targets\r\n      if (\r\n        !element.hasAttribute('data-auto-animate-target') &&\r\n        !containsAnimatedElements\r\n      ) {\r\n        result.push(element);\r\n      }\r\n\r\n      if (element.querySelector('[data-auto-animate-target]')) {\r\n        result = result.concat(this.getUnmatchedAutoAnimateElements(element));\r\n      }\r\n\r\n      return result;\r\n    }, []);\r\n  }\r\n}\r\n","import { extend, queryAll } from '../utils/util.js';\r\n\r\n/**\r\n * Handles sorting and navigation of slide fragments.\r\n * Fragments are elements within a slide that are\r\n * revealed/animated incrementally.\r\n */\r\nexport default class Fragments {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n  }\r\n\r\n  /**\r\n   * Called when the reveal.js config is updated.\r\n   */\r\n  configure(config, oldConfig) {\r\n    if (config.fragments === false) {\r\n      this.disable();\r\n    } else if (oldConfig.fragments === false) {\r\n      this.enable();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If fragments are disabled in the deck, they should all be\r\n   * visible rather than stepped through.\r\n   */\r\n  disable() {\r\n    queryAll(this.Reveal.getSlidesElement(), '.fragment').forEach((element) => {\r\n      element.classList.add('visible');\r\n      element.classList.remove('current-fragment');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reverse of #disable(). Only called if fragments have\r\n   * previously been disabled.\r\n   */\r\n  enable() {\r\n    queryAll(this.Reveal.getSlidesElement(), '.fragment').forEach((element) => {\r\n      element.classList.remove('visible');\r\n      element.classList.remove('current-fragment');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns an object describing the available fragment\r\n   * directions.\r\n   *\r\n   * @return {{prev: boolean, next: boolean}}\r\n   */\r\n  availableRoutes() {\r\n    let currentSlide = this.Reveal.getCurrentSlide();\r\n    if (currentSlide && this.Reveal.getConfig().fragments) {\r\n      let fragments = currentSlide.querySelectorAll('.fragment:not(.disabled)');\r\n      let hiddenFragments = currentSlide.querySelectorAll(\r\n        '.fragment:not(.disabled):not(.visible)'\r\n      );\r\n\r\n      return {\r\n        prev: fragments.length - hiddenFragments.length > 0,\r\n        next: !!hiddenFragments.length,\r\n      };\r\n    } else {\r\n      return { prev: false, next: false };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return a sorted fragments list, ordered by an increasing\r\n   * \"data-fragment-index\" attribute.\r\n   *\r\n   * Fragments will be revealed in the order that they are returned by\r\n   * this function, so you can use the index attributes to control the\r\n   * order of fragment appearance.\r\n   *\r\n   * To maintain a sensible default fragment order, fragments are presumed\r\n   * to be passed in document order. This function adds a \"fragment-index\"\r\n   * attribute to each node if such an attribute is not already present,\r\n   * and sets that attribute to an integer value which is the position of\r\n   * the fragment within the fragments list.\r\n   *\r\n   * @param {object[]|*} fragments\r\n   * @param {boolean} grouped If true the returned array will contain\r\n   * nested arrays for all fragments with the same index\r\n   * @return {object[]} sorted Sorted array of fragments\r\n   */\r\n  sort(fragments, grouped = false) {\r\n    fragments = Array.from(fragments);\r\n\r\n    let ordered = [],\r\n      unordered = [],\r\n      sorted = [];\r\n\r\n    // Group ordered and unordered elements\r\n    fragments.forEach((fragment) => {\r\n      if (fragment.hasAttribute('data-fragment-index')) {\r\n        let index = parseInt(fragment.getAttribute('data-fragment-index'), 10);\r\n\r\n        if (!ordered[index]) {\r\n          ordered[index] = [];\r\n        }\r\n\r\n        ordered[index].push(fragment);\r\n      } else {\r\n        unordered.push([fragment]);\r\n      }\r\n    });\r\n\r\n    // Append fragments without explicit indices in their\r\n    // DOM order\r\n    ordered = ordered.concat(unordered);\r\n\r\n    // Manually count the index up per group to ensure there\r\n    // are no gaps\r\n    let index = 0;\r\n\r\n    // Push all fragments in their sorted order to an array,\r\n    // this flattens the groups\r\n    ordered.forEach((group) => {\r\n      group.forEach((fragment) => {\r\n        sorted.push(fragment);\r\n        fragment.setAttribute('data-fragment-index', index);\r\n      });\r\n\r\n      index++;\r\n    });\r\n\r\n    return grouped === true ? ordered : sorted;\r\n  }\r\n\r\n  /**\r\n   * Sorts and formats all of fragments in the\r\n   * presentation.\r\n   */\r\n  sortAll() {\r\n    this.Reveal.getHorizontalSlides().forEach((horizontalSlide) => {\r\n      let verticalSlides = queryAll(horizontalSlide, 'section');\r\n      verticalSlides.forEach((verticalSlide, y) => {\r\n        this.sort(verticalSlide.querySelectorAll('.fragment'));\r\n      }, this);\r\n\r\n      if (verticalSlides.length === 0)\r\n        this.sort(horizontalSlide.querySelectorAll('.fragment'));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refreshes the fragments on the current slide so that they\r\n   * have the appropriate classes (.visible + .current-fragment).\r\n   *\r\n   * @param {number} [index] The index of the current fragment\r\n   * @param {array} [fragments] Array containing all fragments\r\n   * in the current slide\r\n   *\r\n   * @return {{shown: array, hidden: array}}\r\n   */\r\n  update(index, fragments) {\r\n    let changedFragments = {\r\n      shown: [],\r\n      hidden: [],\r\n    };\r\n\r\n    let currentSlide = this.Reveal.getCurrentSlide();\r\n    if (currentSlide && this.Reveal.getConfig().fragments) {\r\n      fragments =\r\n        fragments || this.sort(currentSlide.querySelectorAll('.fragment'));\r\n\r\n      if (fragments.length) {\r\n        let maxIndex = 0;\r\n\r\n        if (typeof index !== 'number') {\r\n          let currentFragment = this.sort(\r\n            currentSlide.querySelectorAll('.fragment.visible')\r\n          ).pop();\r\n          if (currentFragment) {\r\n            index = parseInt(\r\n              currentFragment.getAttribute('data-fragment-index') || 0,\r\n              10\r\n            );\r\n          }\r\n        }\r\n\r\n        Array.from(fragments).forEach((el, i) => {\r\n          if (el.hasAttribute('data-fragment-index')) {\r\n            i = parseInt(el.getAttribute('data-fragment-index'), 10);\r\n          }\r\n\r\n          maxIndex = Math.max(maxIndex, i);\r\n\r\n          // Visible fragments\r\n          if (i <= index) {\r\n            let wasVisible = el.classList.contains('visible');\r\n            el.classList.add('visible');\r\n            el.classList.remove('current-fragment');\r\n\r\n            if (i === index) {\r\n              // Announce the fragments one by one to the Screen Reader\r\n              this.Reveal.announceStatus(this.Reveal.getStatusText(el));\r\n\r\n              el.classList.add('current-fragment');\r\n              this.Reveal.slideContent.startEmbeddedContent(el);\r\n            }\r\n\r\n            if (!wasVisible) {\r\n              changedFragments.shown.push(el);\r\n              this.Reveal.dispatchEvent({\r\n                target: el,\r\n                type: 'visible',\r\n                bubbles: false,\r\n              });\r\n            }\r\n          }\r\n          // Hidden fragments\r\n          else {\r\n            let wasVisible = el.classList.contains('visible');\r\n            el.classList.remove('visible');\r\n            el.classList.remove('current-fragment');\r\n\r\n            if (wasVisible) {\r\n              this.Reveal.slideContent.stopEmbeddedContent(el);\r\n              changedFragments.hidden.push(el);\r\n              this.Reveal.dispatchEvent({\r\n                target: el,\r\n                type: 'hidden',\r\n                bubbles: false,\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        // Write the current fragment index to the slide <section>.\r\n        // This can be used by end users to apply styles based on\r\n        // the current fragment index.\r\n        index = typeof index === 'number' ? index : -1;\r\n        index = Math.max(Math.min(index, maxIndex), -1);\r\n        currentSlide.setAttribute('data-fragment', index);\r\n      }\r\n    }\r\n\r\n    return changedFragments;\r\n  }\r\n\r\n  /**\r\n   * Formats the fragments on the given slide so that they have\r\n   * valid indices. Call this if fragments are changed in the DOM\r\n   * after reveal.js has already initialized.\r\n   *\r\n   * @param {HTMLElement} slide\r\n   * @return {Array} a list of the HTML fragments that were synced\r\n   */\r\n  sync(slide = this.Reveal.getCurrentSlide()) {\r\n    return this.sort(slide.querySelectorAll('.fragment'));\r\n  }\r\n\r\n  /**\r\n   * Navigate to the specified slide fragment.\r\n   *\r\n   * @param {?number} index The index of the fragment that\r\n   * should be shown, -1 means all are invisible\r\n   * @param {number} offset Integer offset to apply to the\r\n   * fragment index\r\n   *\r\n   * @return {boolean} true if a change was made in any\r\n   * fragments visibility as part of this call\r\n   */\r\n  goto(index, offset = 0) {\r\n    let currentSlide = this.Reveal.getCurrentSlide();\r\n    if (currentSlide && this.Reveal.getConfig().fragments) {\r\n      let fragments = this.sort(\r\n        currentSlide.querySelectorAll('.fragment:not(.disabled)')\r\n      );\r\n      if (fragments.length) {\r\n        // If no index is specified, find the current\r\n        if (typeof index !== 'number') {\r\n          let lastVisibleFragment = this.sort(\r\n            currentSlide.querySelectorAll('.fragment:not(.disabled).visible')\r\n          ).pop();\r\n\r\n          if (lastVisibleFragment) {\r\n            index = parseInt(\r\n              lastVisibleFragment.getAttribute('data-fragment-index') || 0,\r\n              10\r\n            );\r\n          } else {\r\n            index = -1;\r\n          }\r\n        }\r\n\r\n        // Apply the offset if there is one\r\n        index += offset;\r\n\r\n        let changedFragments = this.update(index, fragments);\r\n\r\n        if (changedFragments.hidden.length) {\r\n          this.Reveal.dispatchEvent({\r\n            type: 'fragmenthidden',\r\n            data: {\r\n              fragment: changedFragments.hidden[0],\r\n              fragments: changedFragments.hidden,\r\n            },\r\n          });\r\n        }\r\n\r\n        if (changedFragments.shown.length) {\r\n          this.Reveal.dispatchEvent({\r\n            type: 'fragmentshown',\r\n            data: {\r\n              fragment: changedFragments.shown[0],\r\n              fragments: changedFragments.shown,\r\n            },\r\n          });\r\n        }\r\n\r\n        this.Reveal.controls.update();\r\n        this.Reveal.progress.update();\r\n\r\n        if (this.Reveal.getConfig().fragmentInURL) {\r\n          this.Reveal.location.writeURL();\r\n        }\r\n\r\n        return !!(\r\n          changedFragments.shown.length || changedFragments.hidden.length\r\n        );\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Navigate to the next slide fragment.\r\n   *\r\n   * @return {boolean} true if there was a next fragment,\r\n   * false otherwise\r\n   */\r\n  next() {\r\n    return this.goto(null, 1);\r\n  }\r\n\r\n  /**\r\n   * Navigate to the previous slide fragment.\r\n   *\r\n   * @return {boolean} true if there was a previous fragment,\r\n   * false otherwise\r\n   */\r\n  prev() {\r\n    return this.goto(null, -1);\r\n  }\r\n}\r\n","import { SLIDES_SELECTOR } from '../utils/constants.js';\r\nimport { extend, queryAll, transformElement } from '../utils/util.js';\r\n\r\n/**\r\n * Handles all logic related to the overview mode\r\n * (birds-eye view of all slides).\r\n */\r\nexport default class Overview {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n\r\n    this.active = false;\r\n\r\n    this.onSlideClicked = this.onSlideClicked.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Displays the overview of slides (quick nav) by scaling\r\n   * down and arranging all slide elements.\r\n   */\r\n  activate() {\r\n    // Only proceed if enabled in config\r\n    if (this.Reveal.getConfig().overview && !this.isActive()) {\r\n      this.active = true;\r\n\r\n      this.Reveal.getRevealElement().classList.add('overview');\r\n\r\n      // Don't auto-slide while in overview mode\r\n      this.Reveal.cancelAutoSlide();\r\n\r\n      // Move the backgrounds element into the slide container to\r\n      // that the same scaling is applied\r\n      this.Reveal.getSlidesElement().appendChild(\r\n        this.Reveal.getBackgroundsElement()\r\n      );\r\n\r\n      // Clicking on an overview slide navigates to it\r\n      queryAll(this.Reveal.getRevealElement(), SLIDES_SELECTOR).forEach(\r\n        (slide) => {\r\n          if (!slide.classList.contains('stack')) {\r\n            slide.addEventListener('click', this.onSlideClicked, true);\r\n          }\r\n        }\r\n      );\r\n\r\n      // Calculate slide sizes\r\n      const margin = 70;\r\n      const slideSize = this.Reveal.getComputedSlideSize();\r\n      this.overviewSlideWidth = slideSize.width + margin;\r\n      this.overviewSlideHeight = slideSize.height + margin;\r\n\r\n      // Reverse in RTL mode\r\n      if (this.Reveal.getConfig().rtl) {\r\n        this.overviewSlideWidth = -this.overviewSlideWidth;\r\n      }\r\n\r\n      this.Reveal.updateSlidesVisibility();\r\n\r\n      this.layout();\r\n      this.update();\r\n\r\n      this.Reveal.layout();\r\n\r\n      const indices = this.Reveal.getIndices();\r\n\r\n      // Notify observers of the overview showing\r\n      this.Reveal.dispatchEvent({\r\n        type: 'overviewshown',\r\n        data: {\r\n          indexh: indices.h,\r\n          indexv: indices.v,\r\n          currentSlide: this.Reveal.getCurrentSlide(),\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uses CSS transforms to position all slides in a grid for\r\n   * display inside of the overview mode.\r\n   */\r\n  layout() {\r\n    // Layout slides\r\n    this.Reveal.getHorizontalSlides().forEach((hslide, h) => {\r\n      hslide.setAttribute('data-index-h', h);\r\n      transformElement(\r\n        hslide,\r\n        'translate3d(' + h * this.overviewSlideWidth + 'px, 0, 0)'\r\n      );\r\n\r\n      if (hslide.classList.contains('stack')) {\r\n        queryAll(hslide, 'section').forEach((vslide, v) => {\r\n          vslide.setAttribute('data-index-h', h);\r\n          vslide.setAttribute('data-index-v', v);\r\n\r\n          transformElement(\r\n            vslide,\r\n            'translate3d(0, ' + v * this.overviewSlideHeight + 'px, 0)'\r\n          );\r\n        });\r\n      }\r\n    });\r\n\r\n    // Layout slide backgrounds\r\n    Array.from(this.Reveal.getBackgroundsElement().childNodes).forEach(\r\n      (hbackground, h) => {\r\n        transformElement(\r\n          hbackground,\r\n          'translate3d(' + h * this.overviewSlideWidth + 'px, 0, 0)'\r\n        );\r\n\r\n        queryAll(hbackground, '.slide-background').forEach((vbackground, v) => {\r\n          transformElement(\r\n            vbackground,\r\n            'translate3d(0, ' + v * this.overviewSlideHeight + 'px, 0)'\r\n          );\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Moves the overview viewport to the current slides.\r\n   * Called each time the current slide changes.\r\n   */\r\n  update() {\r\n    const vmin = Math.min(window.innerWidth, window.innerHeight);\r\n    const scale = Math.max(vmin / 5, 150) / vmin;\r\n    const indices = this.Reveal.getIndices();\r\n\r\n    this.Reveal.transformSlides({\r\n      overview: [\r\n        'scale(' + scale + ')',\r\n        'translateX(' + -indices.h * this.overviewSlideWidth + 'px)',\r\n        'translateY(' + -indices.v * this.overviewSlideHeight + 'px)',\r\n      ].join(' '),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Exits the slide overview and enters the currently\r\n   * active slide.\r\n   */\r\n  deactivate() {\r\n    // Only proceed if enabled in config\r\n    if (this.Reveal.getConfig().overview) {\r\n      this.active = false;\r\n\r\n      this.Reveal.getRevealElement().classList.remove('overview');\r\n\r\n      // Temporarily add a class so that transitions can do different things\r\n      // depending on whether they are exiting/entering overview, or just\r\n      // moving from slide to slide\r\n      this.Reveal.getRevealElement().classList.add('overview-deactivating');\r\n\r\n      setTimeout(() => {\r\n        this.Reveal.getRevealElement().classList.remove(\r\n          'overview-deactivating'\r\n        );\r\n      }, 1);\r\n\r\n      // Move the background element back out\r\n      this.Reveal.getRevealElement().appendChild(\r\n        this.Reveal.getBackgroundsElement()\r\n      );\r\n\r\n      // Clean up changes made to slides\r\n      queryAll(this.Reveal.getRevealElement(), SLIDES_SELECTOR).forEach(\r\n        (slide) => {\r\n          transformElement(slide, '');\r\n\r\n          slide.removeEventListener('click', this.onSlideClicked, true);\r\n        }\r\n      );\r\n\r\n      // Clean up changes made to backgrounds\r\n      queryAll(\r\n        this.Reveal.getBackgroundsElement(),\r\n        '.slide-background'\r\n      ).forEach((background) => {\r\n        transformElement(background, '');\r\n      });\r\n\r\n      this.Reveal.transformSlides({ overview: '' });\r\n\r\n      const indices = this.Reveal.getIndices();\r\n\r\n      this.Reveal.slide(indices.h, indices.v);\r\n      this.Reveal.layout();\r\n      this.Reveal.cueAutoSlide();\r\n\r\n      // Notify observers of the overview hiding\r\n      this.Reveal.dispatchEvent({\r\n        type: 'overviewhidden',\r\n        data: {\r\n          indexh: indices.h,\r\n          indexv: indices.v,\r\n          currentSlide: this.Reveal.getCurrentSlide(),\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the slide overview mode on and off.\r\n   *\r\n   * @param {Boolean} [override] Flag which overrides the\r\n   * toggle logic and forcibly sets the desired state. True means\r\n   * overview is open, false means it's closed.\r\n   */\r\n  toggle(override) {\r\n    if (typeof override === 'boolean') {\r\n      override ? this.activate() : this.deactivate();\r\n    } else {\r\n      this.isActive() ? this.deactivate() : this.activate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the overview is currently active.\r\n   *\r\n   * @return {Boolean} true if the overview is active,\r\n   * false otherwise\r\n   */\r\n  isActive() {\r\n    return this.active;\r\n  }\r\n\r\n  /**\r\n   * Invoked when a slide is and we're in the overview.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onSlideClicked(event) {\r\n    if (this.isActive()) {\r\n      event.preventDefault();\r\n\r\n      let element = event.target;\r\n\r\n      while (element && !element.nodeName.match(/section/gi)) {\r\n        element = element.parentNode;\r\n      }\r\n\r\n      if (element && !element.classList.contains('disabled')) {\r\n        this.deactivate();\r\n\r\n        if (element.nodeName.match(/section/gi)) {\r\n          let h = parseInt(element.getAttribute('data-index-h'), 10),\r\n            v = parseInt(element.getAttribute('data-index-v'), 10);\r\n\r\n          this.Reveal.slide(h, v);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { enterFullscreen } from '../utils/util.js';\r\n\r\n/**\r\n * Handles all reveal.js keyboard interactions.\r\n */\r\nexport default class Keyboard {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n\r\n    // A key:value map of keyboard keys and descriptions of\r\n    // the actions they trigger\r\n    this.shortcuts = {};\r\n\r\n    // Holds custom key code mappings\r\n    this.bindings = {};\r\n\r\n    this.onDocumentKeyDown = this.onDocumentKeyDown.bind(this);\r\n    this.onDocumentKeyPress = this.onDocumentKeyPress.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Called when the reveal.js config is updated.\r\n   */\r\n  configure(config, oldConfig) {\r\n    if (config.navigationMode === 'linear') {\r\n      this.shortcuts['&#8594;  ,  &#8595;  ,  SPACE  ,  N  ,  L  ,  J'] =\r\n        'Next slide';\r\n      this.shortcuts['&#8592;  ,  &#8593;  ,  P  ,  H  ,  K'] =\r\n        'Previous slide';\r\n    } else {\r\n      this.shortcuts['N  ,  SPACE'] = 'Next slide';\r\n      this.shortcuts['P  ,  Shift SPACE'] = 'Previous slide';\r\n      this.shortcuts['&#8592;  ,  H'] = 'Navigate left';\r\n      this.shortcuts['&#8594;  ,  L'] = 'Navigate right';\r\n      this.shortcuts['&#8593;  ,  K'] = 'Navigate up';\r\n      this.shortcuts['&#8595;  ,  J'] = 'Navigate down';\r\n    }\r\n\r\n    this.shortcuts['Alt + &#8592;/&#8593/&#8594;/&#8595;'] =\r\n      'Navigate without fragments';\r\n    this.shortcuts['Shift + &#8592;/&#8593/&#8594;/&#8595;'] =\r\n      'Jump to first/last slide';\r\n    this.shortcuts['B  ,  .'] = 'Pause';\r\n    this.shortcuts['F'] = 'Fullscreen';\r\n    this.shortcuts['ESC, O'] = 'Slide overview';\r\n  }\r\n\r\n  /**\r\n   * Starts listening for keyboard events.\r\n   */\r\n  bind() {\r\n    document.addEventListener('keydown', this.onDocumentKeyDown, false);\r\n    document.addEventListener('keypress', this.onDocumentKeyPress, false);\r\n  }\r\n\r\n  /**\r\n   * Stops listening for keyboard events.\r\n   */\r\n  unbind() {\r\n    document.removeEventListener('keydown', this.onDocumentKeyDown, false);\r\n    document.removeEventListener('keypress', this.onDocumentKeyPress, false);\r\n  }\r\n\r\n  /**\r\n   * Add a custom key binding with optional description to\r\n   * be added to the help screen.\r\n   */\r\n  addKeyBinding(binding, callback) {\r\n    if (typeof binding === 'object' && binding.keyCode) {\r\n      this.bindings[binding.keyCode] = {\r\n        callback: callback,\r\n        key: binding.key,\r\n        description: binding.description,\r\n      };\r\n    } else {\r\n      this.bindings[binding] = {\r\n        callback: callback,\r\n        key: null,\r\n        description: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the specified custom key binding.\r\n   */\r\n  removeKeyBinding(keyCode) {\r\n    delete this.bindings[keyCode];\r\n  }\r\n\r\n  /**\r\n   * Programmatically triggers a keyboard event\r\n   *\r\n   * @param {int} keyCode\r\n   */\r\n  triggerKey(keyCode) {\r\n    this.onDocumentKeyDown({ keyCode });\r\n  }\r\n\r\n  /**\r\n   * Registers a new shortcut to include in the help overlay\r\n   *\r\n   * @param {String} key\r\n   * @param {String} value\r\n   */\r\n  registerKeyboardShortcut(key, value) {\r\n    this.shortcuts[key] = value;\r\n  }\r\n\r\n  getShortcuts() {\r\n    return this.shortcuts;\r\n  }\r\n\r\n  getBindings() {\r\n    return this.bindings;\r\n  }\r\n\r\n  /**\r\n   * Handler for the document level 'keypress' event.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onDocumentKeyPress(event) {\r\n    // Check if the pressed key is question mark\r\n    if (event.shiftKey && event.charCode === 63) {\r\n      this.Reveal.toggleHelp();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler for the document level 'keydown' event.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onDocumentKeyDown(event) {\r\n    let config = this.Reveal.getConfig();\r\n\r\n    // If there's a condition specified and it returns false,\r\n    // ignore this event\r\n    if (\r\n      typeof config.keyboardCondition === 'function' &&\r\n      config.keyboardCondition(event) === false\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    // If keyboardCondition is set, only capture keyboard events\r\n    // for embedded decks when they are focused\r\n    if (config.keyboardCondition === 'focused' && !this.Reveal.isFocused()) {\r\n      return true;\r\n    }\r\n\r\n    // Shorthand\r\n    let keyCode = event.keyCode;\r\n\r\n    // Remember if auto-sliding was paused so we can toggle it\r\n    let autoSlideWasPaused = !this.Reveal.isAutoSliding();\r\n\r\n    this.Reveal.onUserInput(event);\r\n\r\n    // Is there a focused element that could be using the keyboard?\r\n    let activeElementIsCE =\r\n      document.activeElement &&\r\n      document.activeElement.isContentEditable === true;\r\n    let activeElementIsInput =\r\n      document.activeElement &&\r\n      document.activeElement.tagName &&\r\n      /input|textarea/i.test(document.activeElement.tagName);\r\n    let activeElementIsNotes =\r\n      document.activeElement &&\r\n      document.activeElement.className &&\r\n      /speaker-notes/i.test(document.activeElement.className);\r\n\r\n    // Whitelist certain modifiers for slide navigation shortcuts\r\n    let isNavigationKey =\r\n      [32, 37, 38, 39, 40, 78, 80].indexOf(event.keyCode) !== -1;\r\n\r\n    // Prevent all other events when a modifier is pressed\r\n    let unusedModifier =\r\n      !((isNavigationKey && event.shiftKey) || event.altKey) &&\r\n      (event.shiftKey || event.altKey || event.ctrlKey || event.metaKey);\r\n\r\n    // Disregard the event if there's a focused element or a\r\n    // keyboard modifier key is present\r\n    if (\r\n      activeElementIsCE ||\r\n      activeElementIsInput ||\r\n      activeElementIsNotes ||\r\n      unusedModifier\r\n    )\r\n      return;\r\n\r\n    // While paused only allow resume keyboard events; 'b', 'v', '.'\r\n    let resumeKeyCodes = [66, 86, 190, 191];\r\n    let key;\r\n\r\n    // Custom key bindings for togglePause should be able to resume\r\n    if (typeof config.keyboard === 'object') {\r\n      for (key in config.keyboard) {\r\n        if (config.keyboard[key] === 'togglePause') {\r\n          resumeKeyCodes.push(parseInt(key, 10));\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.Reveal.isPaused() && resumeKeyCodes.indexOf(keyCode) === -1) {\r\n      return false;\r\n    }\r\n\r\n    // Use linear navigation if we're configured to OR if\r\n    // the presentation is one-dimensional\r\n    let useLinearMode =\r\n      config.navigationMode === 'linear' ||\r\n      !this.Reveal.hasHorizontalSlides() ||\r\n      !this.Reveal.hasVerticalSlides();\r\n\r\n    let triggered = false;\r\n\r\n    // 1. User defined key bindings\r\n    if (typeof config.keyboard === 'object') {\r\n      for (key in config.keyboard) {\r\n        // Check if this binding matches the pressed key\r\n        if (parseInt(key, 10) === keyCode) {\r\n          let value = config.keyboard[key];\r\n\r\n          // Callback function\r\n          if (typeof value === 'function') {\r\n            value.apply(null, [event]);\r\n          }\r\n          // String shortcuts to reveal.js API\r\n          else if (\r\n            typeof value === 'string' &&\r\n            typeof this.Reveal[value] === 'function'\r\n          ) {\r\n            this.Reveal[value].call();\r\n          }\r\n\r\n          triggered = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // 2. Registered custom key bindings\r\n    if (triggered === false) {\r\n      for (key in this.bindings) {\r\n        // Check if this binding matches the pressed key\r\n        if (parseInt(key, 10) === keyCode) {\r\n          let action = this.bindings[key].callback;\r\n\r\n          // Callback function\r\n          if (typeof action === 'function') {\r\n            action.apply(null, [event]);\r\n          }\r\n          // String shortcuts to reveal.js API\r\n          else if (\r\n            typeof action === 'string' &&\r\n            typeof this.Reveal[action] === 'function'\r\n          ) {\r\n            this.Reveal[action].call();\r\n          }\r\n\r\n          triggered = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // 3. System defined key bindings\r\n    if (triggered === false) {\r\n      // Assume true and try to prove false\r\n      triggered = true;\r\n\r\n      // P, PAGE UP\r\n      if (keyCode === 80 || keyCode === 33) {\r\n        this.Reveal.prev({ skipFragments: event.altKey });\r\n      }\r\n      // N, PAGE DOWN\r\n      else if (keyCode === 78 || keyCode === 34) {\r\n        this.Reveal.next({ skipFragments: event.altKey });\r\n      }\r\n      // H, LEFT\r\n      else if (keyCode === 72 || keyCode === 37) {\r\n        if (event.shiftKey) {\r\n          this.Reveal.slide(0);\r\n        } else if (!this.Reveal.overview.isActive() && useLinearMode) {\r\n          this.Reveal.prev({ skipFragments: event.altKey });\r\n        } else {\r\n          this.Reveal.left({ skipFragments: event.altKey });\r\n        }\r\n      }\r\n      // L, RIGHT\r\n      else if (keyCode === 76 || keyCode === 39) {\r\n        if (event.shiftKey) {\r\n          this.Reveal.slide(this.Reveal.getHorizontalSlides().length - 1);\r\n        } else if (!this.Reveal.overview.isActive() && useLinearMode) {\r\n          this.Reveal.next({ skipFragments: event.altKey });\r\n        } else {\r\n          this.Reveal.right({ skipFragments: event.altKey });\r\n        }\r\n      }\r\n      // K, UP\r\n      else if (keyCode === 75 || keyCode === 38) {\r\n        if (event.shiftKey) {\r\n          this.Reveal.slide(undefined, 0);\r\n        } else if (!this.Reveal.overview.isActive() && useLinearMode) {\r\n          this.Reveal.prev({ skipFragments: event.altKey });\r\n        } else {\r\n          this.Reveal.up({ skipFragments: event.altKey });\r\n        }\r\n      }\r\n      // J, DOWN\r\n      else if (keyCode === 74 || keyCode === 40) {\r\n        if (event.shiftKey) {\r\n          this.Reveal.slide(undefined, Number.MAX_VALUE);\r\n        } else if (!this.Reveal.overview.isActive() && useLinearMode) {\r\n          this.Reveal.next({ skipFragments: event.altKey });\r\n        } else {\r\n          this.Reveal.down({ skipFragments: event.altKey });\r\n        }\r\n      }\r\n      // HOME\r\n      else if (keyCode === 36) {\r\n        this.Reveal.slide(0);\r\n      }\r\n      // END\r\n      else if (keyCode === 35) {\r\n        this.Reveal.slide(this.Reveal.getHorizontalSlides().length - 1);\r\n      }\r\n      // SPACE\r\n      else if (keyCode === 32) {\r\n        if (this.Reveal.overview.isActive()) {\r\n          this.Reveal.overview.deactivate();\r\n        }\r\n        if (event.shiftKey) {\r\n          this.Reveal.prev({ skipFragments: event.altKey });\r\n        } else {\r\n          this.Reveal.next({ skipFragments: event.altKey });\r\n        }\r\n      }\r\n      // TWO-SPOT, SEMICOLON, B, V, PERIOD, LOGITECH PRESENTER TOOLS \"BLACK SCREEN\" BUTTON\r\n      else if (\r\n        keyCode === 58 ||\r\n        keyCode === 59 ||\r\n        keyCode === 66 ||\r\n        keyCode === 86 ||\r\n        keyCode === 190 ||\r\n        keyCode === 191\r\n      ) {\r\n        this.Reveal.togglePause();\r\n      }\r\n      // F\r\n      else if (keyCode === 70) {\r\n        enterFullscreen(\r\n          config.embedded\r\n            ? this.Reveal.getViewportElement()\r\n            : document.documentElement\r\n        );\r\n      }\r\n      // A\r\n      else if (keyCode === 65) {\r\n        if (config.autoSlideStoppable) {\r\n          this.Reveal.toggleAutoSlide(autoSlideWasPaused);\r\n        }\r\n      } else {\r\n        triggered = false;\r\n      }\r\n    }\r\n\r\n    // If the input resulted in a triggered action we should prevent\r\n    // the browsers default behavior\r\n    if (triggered) {\r\n      event.preventDefault && event.preventDefault();\r\n    }\r\n    // ESC or O key\r\n    else if (keyCode === 27 || keyCode === 79) {\r\n      if (this.Reveal.closeOverlay() === false) {\r\n        this.Reveal.overview.toggle();\r\n      }\r\n\r\n      event.preventDefault && event.preventDefault();\r\n    }\r\n\r\n    // If auto-sliding is enabled we need to cue up\r\n    // another timeout\r\n    this.Reveal.cueAutoSlide();\r\n  }\r\n}\r\n","/**\r\n * Reads and writes the URL based on reveal.js' current state.\r\n */\r\nexport default class Location {\r\n  // The minimum number of milliseconds that must pass between\r\n  // calls to history.replaceState\r\n  MAX_REPLACE_STATE_FREQUENCY = 1000;\r\n\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n\r\n    // Delays updates to the URL due to a Chrome thumbnailer bug\r\n    this.writeURLTimeout = 0;\r\n\r\n    this.replaceStateTimestamp = 0;\r\n\r\n    this.onWindowHashChange = this.onWindowHashChange.bind(this);\r\n  }\r\n\r\n  bind() {\r\n    window.addEventListener('hashchange', this.onWindowHashChange, false);\r\n  }\r\n\r\n  unbind() {\r\n    window.removeEventListener('hashchange', this.onWindowHashChange, false);\r\n  }\r\n\r\n  /**\r\n   * Returns the slide indices for the given hash link.\r\n   *\r\n   * @param {string} [hash] the hash string that we want to\r\n   * find the indices for\r\n   *\r\n   * @returns slide indices or null\r\n   */\r\n  getIndicesFromHash(hash = window.location.hash) {\r\n    // Attempt to parse the hash as either an index or name\r\n    let name = hash.replace(/^#\\/?/, '');\r\n    let bits = name.split('/');\r\n\r\n    // If the first bit is not fully numeric and there is a name we\r\n    // can assume that this is a named link\r\n    if (!/^[0-9]*$/.test(bits[0]) && name.length) {\r\n      let element;\r\n\r\n      let f;\r\n\r\n      // Parse named links with fragments (#/named-link/2)\r\n      if (/\\/[-\\d]+$/g.test(name)) {\r\n        f = parseInt(name.split('/').pop(), 10);\r\n        f = isNaN(f) ? undefined : f;\r\n        name = name.split('/').shift();\r\n      }\r\n\r\n      // Ensure the named link is a valid HTML ID attribute\r\n      try {\r\n        element = document.getElementById(decodeURIComponent(name));\r\n      } catch (error) {}\r\n\r\n      if (element) {\r\n        return { ...this.Reveal.getIndices(element), f };\r\n      }\r\n    } else {\r\n      const config = this.Reveal.getConfig();\r\n      let hashIndexBase = config.hashOneBasedIndex ? 1 : 0;\r\n\r\n      // Read the index components of the hash\r\n      let h = parseInt(bits[0], 10) - hashIndexBase || 0,\r\n        v = parseInt(bits[1], 10) - hashIndexBase || 0,\r\n        f;\r\n\r\n      if (config.fragmentInURL) {\r\n        f = parseInt(bits[2], 10);\r\n        if (isNaN(f)) {\r\n          f = undefined;\r\n        }\r\n      }\r\n\r\n      return { h, v, f };\r\n    }\r\n\r\n    // The hash couldn't be parsed or no matching named link was found\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Reads the current URL (hash) and navigates accordingly.\r\n   */\r\n  readURL() {\r\n    const currentIndices = this.Reveal.getIndices();\r\n    const newIndices = this.getIndicesFromHash();\r\n\r\n    if (newIndices) {\r\n      if (\r\n        newIndices.h !== currentIndices.h ||\r\n        newIndices.v !== currentIndices.v ||\r\n        newIndices.f !== undefined\r\n      ) {\r\n        this.Reveal.slide(newIndices.h, newIndices.v, newIndices.f);\r\n      }\r\n    }\r\n    // If no new indices are available, we're trying to navigate to\r\n    // a slide hash that does not exist\r\n    else {\r\n      this.Reveal.slide(currentIndices.h || 0, currentIndices.v || 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the page URL (hash) to reflect the current\r\n   * state.\r\n   *\r\n   * @param {number} delay The time in ms to wait before\r\n   * writing the hash\r\n   */\r\n  writeURL(delay) {\r\n    let config = this.Reveal.getConfig();\r\n    let currentSlide = this.Reveal.getCurrentSlide();\r\n\r\n    // Make sure there's never more than one timeout running\r\n    clearTimeout(this.writeURLTimeout);\r\n\r\n    // If a delay is specified, timeout this call\r\n    if (typeof delay === 'number') {\r\n      this.writeURLTimeout = setTimeout(this.writeURL, delay);\r\n    } else if (currentSlide) {\r\n      let hash = this.getHash();\r\n\r\n      // If we're configured to push to history OR the history\r\n      // API is not avaialble.\r\n      if (config.history) {\r\n        window.location.hash = hash;\r\n      }\r\n      // If we're configured to reflect the current slide in the\r\n      // URL without pushing to history.\r\n      else if (config.hash) {\r\n        // If the hash is empty, don't add it to the URL\r\n        if (hash === '/') {\r\n          this.debouncedReplaceState(\r\n            window.location.pathname + window.location.search\r\n          );\r\n        } else {\r\n          this.debouncedReplaceState('#' + hash);\r\n        }\r\n      }\r\n      // UPDATE: The below nuking of all hash changes breaks\r\n      // anchors on pages where reveal.js is running. Removed\r\n      // in 4.0. Why was it here in the first place? ¯\\_(ツ)_/¯\r\n      //\r\n      // If history and hash are both disabled, a hash may still\r\n      // be added to the URL by clicking on a href with a hash\r\n      // target. Counter this by always removing the hash.\r\n      // else {\r\n      // \twindow.history.replaceState( null, null, window.location.pathname + window.location.search );\r\n      // }\r\n    }\r\n  }\r\n\r\n  replaceState(url) {\r\n    window.history.replaceState(null, null, url);\r\n    this.replaceStateTimestamp = Date.now();\r\n  }\r\n\r\n  debouncedReplaceState(url) {\r\n    clearTimeout(this.replaceStateTimeout);\r\n\r\n    if (\r\n      Date.now() - this.replaceStateTimestamp >\r\n      this.MAX_REPLACE_STATE_FREQUENCY\r\n    ) {\r\n      this.replaceState(url);\r\n    } else {\r\n      this.replaceStateTimeout = setTimeout(\r\n        () => this.replaceState(url),\r\n        this.MAX_REPLACE_STATE_FREQUENCY\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return a hash URL that will resolve to the given slide location.\r\n   *\r\n   * @param {HTMLElement} [slide=currentSlide] The slide to link to\r\n   */\r\n  getHash(slide) {\r\n    let url = '/';\r\n\r\n    // Attempt to create a named link based on the slide's ID\r\n    let s = slide || this.Reveal.getCurrentSlide();\r\n    let id = s ? s.getAttribute('id') : null;\r\n    if (id) {\r\n      id = encodeURIComponent(id);\r\n    }\r\n\r\n    let index = this.Reveal.getIndices(slide);\r\n    if (!this.Reveal.getConfig().fragmentInURL) {\r\n      index.f = undefined;\r\n    }\r\n\r\n    // If the current slide has an ID, use that as a named link,\r\n    // but we don't support named links with a fragment index\r\n    if (typeof id === 'string' && id.length) {\r\n      url = '/' + id;\r\n\r\n      // If there is also a fragment, append that at the end\r\n      // of the named link, like: #/named-link/2\r\n      if (index.f >= 0) url += '/' + index.f;\r\n    }\r\n    // Otherwise use the /h/v index\r\n    else {\r\n      let hashIndexBase = this.Reveal.getConfig().hashOneBasedIndex ? 1 : 0;\r\n      if (index.h > 0 || index.v > 0 || index.f >= 0)\r\n        url += index.h + hashIndexBase;\r\n      if (index.v > 0 || index.f >= 0) url += '/' + (index.v + hashIndexBase);\r\n      if (index.f >= 0) url += '/' + index.f;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  /**\r\n   * Handler for the window level 'hashchange' event.\r\n   *\r\n   * @param {object} [event]\r\n   */\r\n  onWindowHashChange(event) {\r\n    this.readURL();\r\n  }\r\n}\r\n","import { queryAll } from '../utils/util.js';\r\nimport { isAndroid } from '../utils/device.js';\r\n\r\n/**\r\n * Manages our presentation controls. This includes both\r\n * the built-in control arrows as well as event monitoring\r\n * of any elements within the presentation with either of the\r\n * following helper classes:\r\n * - .navigate-up\r\n * - .navigate-right\r\n * - .navigate-down\r\n * - .navigate-left\r\n * - .navigate-next\r\n * - .navigate-prev\r\n */\r\nexport default class Controls {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n\r\n    this.onNavigateLeftClicked = this.onNavigateLeftClicked.bind(this);\r\n    this.onNavigateRightClicked = this.onNavigateRightClicked.bind(this);\r\n    this.onNavigateUpClicked = this.onNavigateUpClicked.bind(this);\r\n    this.onNavigateDownClicked = this.onNavigateDownClicked.bind(this);\r\n    this.onNavigatePrevClicked = this.onNavigatePrevClicked.bind(this);\r\n    this.onNavigateNextClicked = this.onNavigateNextClicked.bind(this);\r\n  }\r\n\r\n  render() {\r\n    const rtl = this.Reveal.getConfig().rtl;\r\n    const revealElement = this.Reveal.getRevealElement();\r\n\r\n    this.element = document.createElement('aside');\r\n    this.element.className = 'controls';\r\n    this.element.innerHTML = `<button class=\"navigate-left\" aria-label=\"${\r\n      rtl ? 'next slide' : 'previous slide'\r\n    }\"><div class=\"controls-arrow\"></div></button>\r\n\t\t\t<button class=\"navigate-right\" aria-label=\"${\r\n        rtl ? 'previous slide' : 'next slide'\r\n      }\"><div class=\"controls-arrow\"></div></button>\r\n\t\t\t<button class=\"navigate-up\" aria-label=\"above slide\"><div class=\"controls-arrow\"></div></button>\r\n\t\t\t<button class=\"navigate-down\" aria-label=\"below slide\"><div class=\"controls-arrow\"></div></button>`;\r\n\r\n    this.Reveal.getRevealElement().appendChild(this.element);\r\n\r\n    // There can be multiple instances of controls throughout the page\r\n    this.controlsLeft = queryAll(revealElement, '.navigate-left');\r\n    this.controlsRight = queryAll(revealElement, '.navigate-right');\r\n    this.controlsUp = queryAll(revealElement, '.navigate-up');\r\n    this.controlsDown = queryAll(revealElement, '.navigate-down');\r\n    this.controlsPrev = queryAll(revealElement, '.navigate-prev');\r\n    this.controlsNext = queryAll(revealElement, '.navigate-next');\r\n\r\n    // The left, right and down arrows in the standard reveal.js controls\r\n    this.controlsRightArrow = this.element.querySelector('.navigate-right');\r\n    this.controlsLeftArrow = this.element.querySelector('.navigate-left');\r\n    this.controlsDownArrow = this.element.querySelector('.navigate-down');\r\n  }\r\n\r\n  /**\r\n   * Called when the reveal.js config is updated.\r\n   */\r\n  configure(config, oldConfig) {\r\n    this.element.style.display = config.controls ? 'block' : 'none';\r\n\r\n    this.element.setAttribute('data-controls-layout', config.controlsLayout);\r\n    this.element.setAttribute(\r\n      'data-controls-back-arrows',\r\n      config.controlsBackArrows\r\n    );\r\n  }\r\n\r\n  bind() {\r\n    // Listen to both touch and click events, in case the device\r\n    // supports both\r\n    let pointerEvents = ['touchstart', 'click'];\r\n\r\n    // Only support touch for Android, fixes double navigations in\r\n    // stock browser\r\n    if (isAndroid) {\r\n      pointerEvents = ['touchstart'];\r\n    }\r\n\r\n    pointerEvents.forEach((eventName) => {\r\n      this.controlsLeft.forEach((el) =>\r\n        el.addEventListener(eventName, this.onNavigateLeftClicked, false)\r\n      );\r\n      this.controlsRight.forEach((el) =>\r\n        el.addEventListener(eventName, this.onNavigateRightClicked, false)\r\n      );\r\n      this.controlsUp.forEach((el) =>\r\n        el.addEventListener(eventName, this.onNavigateUpClicked, false)\r\n      );\r\n      this.controlsDown.forEach((el) =>\r\n        el.addEventListener(eventName, this.onNavigateDownClicked, false)\r\n      );\r\n      this.controlsPrev.forEach((el) =>\r\n        el.addEventListener(eventName, this.onNavigatePrevClicked, false)\r\n      );\r\n      this.controlsNext.forEach((el) =>\r\n        el.addEventListener(eventName, this.onNavigateNextClicked, false)\r\n      );\r\n    });\r\n  }\r\n\r\n  unbind() {\r\n    ['touchstart', 'click'].forEach((eventName) => {\r\n      this.controlsLeft.forEach((el) =>\r\n        el.removeEventListener(eventName, this.onNavigateLeftClicked, false)\r\n      );\r\n      this.controlsRight.forEach((el) =>\r\n        el.removeEventListener(eventName, this.onNavigateRightClicked, false)\r\n      );\r\n      this.controlsUp.forEach((el) =>\r\n        el.removeEventListener(eventName, this.onNavigateUpClicked, false)\r\n      );\r\n      this.controlsDown.forEach((el) =>\r\n        el.removeEventListener(eventName, this.onNavigateDownClicked, false)\r\n      );\r\n      this.controlsPrev.forEach((el) =>\r\n        el.removeEventListener(eventName, this.onNavigatePrevClicked, false)\r\n      );\r\n      this.controlsNext.forEach((el) =>\r\n        el.removeEventListener(eventName, this.onNavigateNextClicked, false)\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the state of all control/navigation arrows.\r\n   */\r\n  update() {\r\n    let routes = this.Reveal.availableRoutes();\r\n\r\n    // Remove the 'enabled' class from all directions\r\n    [\r\n      ...this.controlsLeft,\r\n      ...this.controlsRight,\r\n      ...this.controlsUp,\r\n      ...this.controlsDown,\r\n      ...this.controlsPrev,\r\n      ...this.controlsNext,\r\n    ].forEach((node) => {\r\n      node.classList.remove('enabled', 'fragmented');\r\n\r\n      // Set 'disabled' attribute on all directions\r\n      node.setAttribute('disabled', 'disabled');\r\n    });\r\n\r\n    // Add the 'enabled' class to the available routes; remove 'disabled' attribute to enable buttons\r\n    if (routes.left)\r\n      this.controlsLeft.forEach((el) => {\r\n        el.classList.add('enabled');\r\n        el.removeAttribute('disabled');\r\n      });\r\n    if (routes.right)\r\n      this.controlsRight.forEach((el) => {\r\n        el.classList.add('enabled');\r\n        el.removeAttribute('disabled');\r\n      });\r\n    if (routes.up)\r\n      this.controlsUp.forEach((el) => {\r\n        el.classList.add('enabled');\r\n        el.removeAttribute('disabled');\r\n      });\r\n    if (routes.down)\r\n      this.controlsDown.forEach((el) => {\r\n        el.classList.add('enabled');\r\n        el.removeAttribute('disabled');\r\n      });\r\n\r\n    // Prev/next buttons\r\n    if (routes.left || routes.up)\r\n      this.controlsPrev.forEach((el) => {\r\n        el.classList.add('enabled');\r\n        el.removeAttribute('disabled');\r\n      });\r\n    if (routes.right || routes.down)\r\n      this.controlsNext.forEach((el) => {\r\n        el.classList.add('enabled');\r\n        el.removeAttribute('disabled');\r\n      });\r\n\r\n    // Highlight fragment directions\r\n    let currentSlide = this.Reveal.getCurrentSlide();\r\n    if (currentSlide) {\r\n      let fragmentsRoutes = this.Reveal.fragments.availableRoutes();\r\n\r\n      // Always apply fragment decorator to prev/next buttons\r\n      if (fragmentsRoutes.prev)\r\n        this.controlsPrev.forEach((el) => {\r\n          el.classList.add('fragmented', 'enabled');\r\n          el.removeAttribute('disabled');\r\n        });\r\n      if (fragmentsRoutes.next)\r\n        this.controlsNext.forEach((el) => {\r\n          el.classList.add('fragmented', 'enabled');\r\n          el.removeAttribute('disabled');\r\n        });\r\n\r\n      // Apply fragment decorators to directional buttons based on\r\n      // what slide axis they are in\r\n      if (this.Reveal.isVerticalSlide(currentSlide)) {\r\n        if (fragmentsRoutes.prev)\r\n          this.controlsUp.forEach((el) => {\r\n            el.classList.add('fragmented', 'enabled');\r\n            el.removeAttribute('disabled');\r\n          });\r\n        if (fragmentsRoutes.next)\r\n          this.controlsDown.forEach((el) => {\r\n            el.classList.add('fragmented', 'enabled');\r\n            el.removeAttribute('disabled');\r\n          });\r\n      } else {\r\n        if (fragmentsRoutes.prev)\r\n          this.controlsLeft.forEach((el) => {\r\n            el.classList.add('fragmented', 'enabled');\r\n            el.removeAttribute('disabled');\r\n          });\r\n        if (fragmentsRoutes.next)\r\n          this.controlsRight.forEach((el) => {\r\n            el.classList.add('fragmented', 'enabled');\r\n            el.removeAttribute('disabled');\r\n          });\r\n      }\r\n    }\r\n\r\n    if (this.Reveal.getConfig().controlsTutorial) {\r\n      let indices = this.Reveal.getIndices();\r\n\r\n      // Highlight control arrows with an animation to ensure\r\n      // that the viewer knows how to navigate\r\n      if (!this.Reveal.hasNavigatedVertically() && routes.down) {\r\n        this.controlsDownArrow.classList.add('highlight');\r\n      } else {\r\n        this.controlsDownArrow.classList.remove('highlight');\r\n\r\n        if (this.Reveal.getConfig().rtl) {\r\n          if (\r\n            !this.Reveal.hasNavigatedHorizontally() &&\r\n            routes.left &&\r\n            indices.v === 0\r\n          ) {\r\n            this.controlsLeftArrow.classList.add('highlight');\r\n          } else {\r\n            this.controlsLeftArrow.classList.remove('highlight');\r\n          }\r\n        } else {\r\n          if (\r\n            !this.Reveal.hasNavigatedHorizontally() &&\r\n            routes.right &&\r\n            indices.v === 0\r\n          ) {\r\n            this.controlsRightArrow.classList.add('highlight');\r\n          } else {\r\n            this.controlsRightArrow.classList.remove('highlight');\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.unbind();\r\n    this.element.remove();\r\n  }\r\n\r\n  /**\r\n   * Event handlers for navigation control buttons.\r\n   */\r\n  onNavigateLeftClicked(event) {\r\n    event.preventDefault();\r\n    this.Reveal.onUserInput();\r\n\r\n    if (this.Reveal.getConfig().navigationMode === 'linear') {\r\n      this.Reveal.prev();\r\n    } else {\r\n      this.Reveal.left();\r\n    }\r\n  }\r\n\r\n  onNavigateRightClicked(event) {\r\n    event.preventDefault();\r\n    this.Reveal.onUserInput();\r\n\r\n    if (this.Reveal.getConfig().navigationMode === 'linear') {\r\n      this.Reveal.next();\r\n    } else {\r\n      this.Reveal.right();\r\n    }\r\n  }\r\n\r\n  onNavigateUpClicked(event) {\r\n    event.preventDefault();\r\n    this.Reveal.onUserInput();\r\n\r\n    this.Reveal.up();\r\n  }\r\n\r\n  onNavigateDownClicked(event) {\r\n    event.preventDefault();\r\n    this.Reveal.onUserInput();\r\n\r\n    this.Reveal.down();\r\n  }\r\n\r\n  onNavigatePrevClicked(event) {\r\n    event.preventDefault();\r\n    this.Reveal.onUserInput();\r\n\r\n    this.Reveal.prev();\r\n  }\r\n\r\n  onNavigateNextClicked(event) {\r\n    event.preventDefault();\r\n    this.Reveal.onUserInput();\r\n\r\n    this.Reveal.next();\r\n  }\r\n}\r\n","/**\r\n * Creates a visual progress bar for the presentation.\r\n */\r\nexport default class Progress {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n\r\n    this.onProgressClicked = this.onProgressClicked.bind(this);\r\n  }\r\n\r\n  render() {\r\n    this.element = document.createElement('div');\r\n    this.element.className = 'progress';\r\n    this.Reveal.getRevealElement().appendChild(this.element);\r\n\r\n    this.bar = document.createElement('span');\r\n    this.element.appendChild(this.bar);\r\n  }\r\n\r\n  /**\r\n   * Called when the reveal.js config is updated.\r\n   */\r\n  configure(config, oldConfig) {\r\n    this.element.style.display = config.progress ? 'block' : 'none';\r\n  }\r\n\r\n  bind() {\r\n    if (this.Reveal.getConfig().progress && this.element) {\r\n      this.element.addEventListener('click', this.onProgressClicked, false);\r\n    }\r\n  }\r\n\r\n  unbind() {\r\n    if (this.Reveal.getConfig().progress && this.element) {\r\n      this.element.removeEventListener('click', this.onProgressClicked, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the progress bar to reflect the current slide.\r\n   */\r\n  update() {\r\n    // Update progress if enabled\r\n    if (this.Reveal.getConfig().progress && this.bar) {\r\n      let scale = this.Reveal.getProgress();\r\n\r\n      // Don't fill the progress bar if there's only one slide\r\n      if (this.Reveal.getTotalSlides() < 2) {\r\n        scale = 0;\r\n      }\r\n\r\n      this.bar.style.transform = 'scaleX(' + scale + ')';\r\n    }\r\n  }\r\n\r\n  getMaxWidth() {\r\n    return this.Reveal.getRevealElement().offsetWidth;\r\n  }\r\n\r\n  /**\r\n   * Clicking on the progress bar results in a navigation to the\r\n   * closest approximate horizontal slide using this equation:\r\n   *\r\n   * ( clickX / presentationWidth ) * numberOfSlides\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onProgressClicked(event) {\r\n    this.Reveal.onUserInput(event);\r\n\r\n    event.preventDefault();\r\n\r\n    let slides = this.Reveal.getSlides();\r\n    let slidesTotal = slides.length;\r\n    let slideIndex = Math.floor(\r\n      (event.clientX / this.getMaxWidth()) * slidesTotal\r\n    );\r\n\r\n    if (this.Reveal.getConfig().rtl) {\r\n      slideIndex = slidesTotal - slideIndex;\r\n    }\r\n\r\n    let targetIndices = this.Reveal.getIndices(slides[slideIndex]);\r\n    this.Reveal.slide(targetIndices.h, targetIndices.v);\r\n  }\r\n\r\n  destroy() {\r\n    this.element.remove();\r\n  }\r\n}\r\n","/**\r\n * Handles hiding of the pointer/cursor when inactive.\r\n */\r\nexport default class Pointer {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n\r\n    // Throttles mouse wheel navigation\r\n    this.lastMouseWheelStep = 0;\r\n\r\n    // Is the mouse pointer currently hidden from view\r\n    this.cursorHidden = false;\r\n\r\n    // Timeout used to determine when the cursor is inactive\r\n    this.cursorInactiveTimeout = 0;\r\n\r\n    this.onDocumentCursorActive = this.onDocumentCursorActive.bind(this);\r\n    this.onDocumentMouseScroll = this.onDocumentMouseScroll.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Called when the reveal.js config is updated.\r\n   */\r\n  configure(config, oldConfig) {\r\n    if (config.mouseWheel) {\r\n      document.addEventListener(\r\n        'DOMMouseScroll',\r\n        this.onDocumentMouseScroll,\r\n        false\r\n      ); // FF\r\n      document.addEventListener(\r\n        'mousewheel',\r\n        this.onDocumentMouseScroll,\r\n        false\r\n      );\r\n    } else {\r\n      document.removeEventListener(\r\n        'DOMMouseScroll',\r\n        this.onDocumentMouseScroll,\r\n        false\r\n      ); // FF\r\n      document.removeEventListener(\r\n        'mousewheel',\r\n        this.onDocumentMouseScroll,\r\n        false\r\n      );\r\n    }\r\n\r\n    // Auto-hide the mouse pointer when its inactive\r\n    if (config.hideInactiveCursor) {\r\n      document.addEventListener(\r\n        'mousemove',\r\n        this.onDocumentCursorActive,\r\n        false\r\n      );\r\n      document.addEventListener(\r\n        'mousedown',\r\n        this.onDocumentCursorActive,\r\n        false\r\n      );\r\n    } else {\r\n      this.showCursor();\r\n\r\n      document.removeEventListener(\r\n        'mousemove',\r\n        this.onDocumentCursorActive,\r\n        false\r\n      );\r\n      document.removeEventListener(\r\n        'mousedown',\r\n        this.onDocumentCursorActive,\r\n        false\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the mouse pointer after it has been hidden with\r\n   * #hideCursor.\r\n   */\r\n  showCursor() {\r\n    if (this.cursorHidden) {\r\n      this.cursorHidden = false;\r\n      this.Reveal.getRevealElement().style.cursor = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hides the mouse pointer when it's on top of the .reveal\r\n   * container.\r\n   */\r\n  hideCursor() {\r\n    if (this.cursorHidden === false) {\r\n      this.cursorHidden = true;\r\n      this.Reveal.getRevealElement().style.cursor = 'none';\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    this.showCursor();\r\n\r\n    document.removeEventListener(\r\n      'DOMMouseScroll',\r\n      this.onDocumentMouseScroll,\r\n      false\r\n    );\r\n    document.removeEventListener(\r\n      'mousewheel',\r\n      this.onDocumentMouseScroll,\r\n      false\r\n    );\r\n    document.removeEventListener(\r\n      'mousemove',\r\n      this.onDocumentCursorActive,\r\n      false\r\n    );\r\n    document.removeEventListener(\r\n      'mousedown',\r\n      this.onDocumentCursorActive,\r\n      false\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called whenever there is mouse input at the document level\r\n   * to determine if the cursor is active or not.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onDocumentCursorActive(event) {\r\n    this.showCursor();\r\n\r\n    clearTimeout(this.cursorInactiveTimeout);\r\n\r\n    this.cursorInactiveTimeout = setTimeout(\r\n      this.hideCursor.bind(this),\r\n      this.Reveal.getConfig().hideCursorTime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handles mouse wheel scrolling, throttled to avoid skipping\r\n   * multiple slides.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onDocumentMouseScroll(event) {\r\n    if (Date.now() - this.lastMouseWheelStep > 1000) {\r\n      this.lastMouseWheelStep = Date.now();\r\n\r\n      let delta = event.detail || -event.wheelDelta;\r\n      if (delta > 0) {\r\n        this.Reveal.next();\r\n      } else if (delta < 0) {\r\n        this.Reveal.prev();\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Loads a JavaScript file from the given URL and executes it.\r\n *\r\n * @param {string} url Address of the .js file to load\r\n * @param {function} callback Method to invoke when the script\r\n * has loaded and executed\r\n */\r\nexport const loadScript = (url, callback) => {\r\n  const script = document.createElement('script');\r\n  script.type = 'text/javascript';\r\n  script.async = false;\r\n  script.defer = false;\r\n  script.src = url;\r\n\r\n  if (typeof callback === 'function') {\r\n    // Success callback\r\n    script.onload = script.onreadystatechange = (event) => {\r\n      if (event.type === 'load' || /loaded|complete/.test(script.readyState)) {\r\n        // Kill event listeners\r\n        script.onload = script.onreadystatechange = script.onerror = null;\r\n\r\n        callback();\r\n      }\r\n    };\r\n\r\n    // Error callback\r\n    script.onerror = (err) => {\r\n      // Kill event listeners\r\n      script.onload = script.onreadystatechange = script.onerror = null;\r\n\r\n      callback(new Error('Failed loading script: ' + script.src + '\\n' + err));\r\n    };\r\n  }\r\n\r\n  // Append the script at the end of <head>\r\n  const head = document.querySelector('head');\r\n  head.insertBefore(script, head.lastChild);\r\n};\r\n","import { loadScript } from '../utils/loader.js';\r\n\r\n/**\r\n * Manages loading and registering of reveal.js plugins.\r\n */\r\nexport default class Plugins {\r\n  constructor(reveal) {\r\n    this.Reveal = reveal;\r\n\r\n    // Flags our current state (idle -> loading -> loaded)\r\n    this.state = 'idle';\r\n\r\n    // An id:instance map of currently registed plugins\r\n    this.registeredPlugins = {};\r\n\r\n    this.asyncDependencies = [];\r\n  }\r\n\r\n  /**\r\n   * Loads reveal.js dependencies, registers and\r\n   * initializes plugins.\r\n   *\r\n   * Plugins are direct references to a reveal.js plugin\r\n   * object that we register and initialize after any\r\n   * synchronous dependencies have loaded.\r\n   *\r\n   * Dependencies are defined via the 'dependencies' config\r\n   * option and will be loaded prior to starting reveal.js.\r\n   * Some dependencies may have an 'async' flag, if so they\r\n   * will load after reveal.js has been started up.\r\n   */\r\n  load(plugins, dependencies) {\r\n    this.state = 'loading';\r\n\r\n    plugins.forEach(this.registerPlugin.bind(this));\r\n\r\n    return new Promise((resolve) => {\r\n      let scripts = [],\r\n        scriptsToLoad = 0;\r\n\r\n      dependencies.forEach((s) => {\r\n        // Load if there's no condition or the condition is truthy\r\n        if (!s.condition || s.condition()) {\r\n          if (s.async) {\r\n            this.asyncDependencies.push(s);\r\n          } else {\r\n            scripts.push(s);\r\n          }\r\n        }\r\n      });\r\n\r\n      if (scripts.length) {\r\n        scriptsToLoad = scripts.length;\r\n\r\n        const scriptLoadedCallback = (s) => {\r\n          if (s && typeof s.callback === 'function') s.callback();\r\n\r\n          if (--scriptsToLoad === 0) {\r\n            this.initPlugins().then(resolve);\r\n          }\r\n        };\r\n\r\n        // Load synchronous scripts\r\n        scripts.forEach((s) => {\r\n          if (typeof s.id === 'string') {\r\n            this.registerPlugin(s);\r\n            scriptLoadedCallback(s);\r\n          } else if (typeof s.src === 'string') {\r\n            loadScript(s.src, () => scriptLoadedCallback(s));\r\n          } else {\r\n            console.warn('Unrecognized plugin format', s);\r\n            scriptLoadedCallback();\r\n          }\r\n        });\r\n      } else {\r\n        this.initPlugins().then(resolve);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes our plugins and waits for them to be ready\r\n   * before proceeding.\r\n   */\r\n  initPlugins() {\r\n    return new Promise((resolve) => {\r\n      let pluginValues = Object.values(this.registeredPlugins);\r\n      let pluginsToInitialize = pluginValues.length;\r\n\r\n      // If there are no plugins, skip this step\r\n      if (pluginsToInitialize === 0) {\r\n        this.loadAsync().then(resolve);\r\n      }\r\n      // ... otherwise initialize plugins\r\n      else {\r\n        let initNextPlugin;\r\n\r\n        let afterPlugInitialized = () => {\r\n          if (--pluginsToInitialize === 0) {\r\n            this.loadAsync().then(resolve);\r\n          } else {\r\n            initNextPlugin();\r\n          }\r\n        };\r\n\r\n        let i = 0;\r\n\r\n        // Initialize plugins serially\r\n        initNextPlugin = () => {\r\n          let plugin = pluginValues[i++];\r\n\r\n          // If the plugin has an 'init' method, invoke it\r\n          if (typeof plugin.init === 'function') {\r\n            let promise = plugin.init(this.Reveal);\r\n\r\n            // If the plugin returned a Promise, wait for it\r\n            if (promise && typeof promise.then === 'function') {\r\n              promise.then(afterPlugInitialized);\r\n            } else {\r\n              afterPlugInitialized();\r\n            }\r\n          } else {\r\n            afterPlugInitialized();\r\n          }\r\n        };\r\n\r\n        initNextPlugin();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Loads all async reveal.js dependencies.\r\n   */\r\n  loadAsync() {\r\n    this.state = 'loaded';\r\n\r\n    if (this.asyncDependencies.length) {\r\n      this.asyncDependencies.forEach((s) => {\r\n        loadScript(s.src, s.callback);\r\n      });\r\n    }\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Registers a new plugin with this reveal.js instance.\r\n   *\r\n   * reveal.js waits for all regisered plugins to initialize\r\n   * before considering itself ready, as long as the plugin\r\n   * is registered before calling `Reveal.initialize()`.\r\n   */\r\n  registerPlugin(plugin) {\r\n    // Backwards compatibility to make reveal.js ~3.9.0\r\n    // plugins work with reveal.js 4.0.0\r\n    if (arguments.length === 2 && typeof arguments[0] === 'string') {\r\n      plugin = arguments[1];\r\n      plugin.id = arguments[0];\r\n    }\r\n    // Plugin can optionally be a function which we call\r\n    // to create an instance of the plugin\r\n    else if (typeof plugin === 'function') {\r\n      plugin = plugin();\r\n    }\r\n\r\n    let id = plugin.id;\r\n\r\n    if (typeof id !== 'string') {\r\n      console.warn(\"Unrecognized plugin format; can't find plugin.id\", plugin);\r\n    } else if (this.registeredPlugins[id] === undefined) {\r\n      this.registeredPlugins[id] = plugin;\r\n\r\n      // If a plugin is registered after reveal.js is loaded,\r\n      // initialize it right away\r\n      if (this.state === 'loaded' && typeof plugin.init === 'function') {\r\n        plugin.init(this.Reveal);\r\n      }\r\n    } else {\r\n      console.warn(\r\n        'reveal.js: \"' + id + '\" plugin has already been registered'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if a specific plugin has been registered.\r\n   *\r\n   * @param {String} id Unique plugin identifier\r\n   */\r\n  hasPlugin(id) {\r\n    return !!this.registeredPlugins[id];\r\n  }\r\n\r\n  /**\r\n   * Returns the specific plugin instance, if a plugin\r\n   * with the given ID has been registered.\r\n   *\r\n   * @param {String} id Unique plugin identifier\r\n   */\r\n  getPlugin(id) {\r\n    return this.registeredPlugins[id];\r\n  }\r\n\r\n  getRegisteredPlugins() {\r\n    return this.registeredPlugins;\r\n  }\r\n\r\n  destroy() {\r\n    Object.values(this.registeredPlugins).forEach((plugin) => {\r\n      if (typeof plugin.destroy === 'function') {\r\n        plugin.destroy();\r\n      }\r\n    });\r\n\r\n    this.registeredPlugins = {};\r\n    this.asyncDependencies = [];\r\n  }\r\n}\r\n","import { SLIDES_SELECTOR } from '../utils/constants.js';\r\nimport { queryAll, createStyleSheet } from '../utils/util.js';\r\n\r\n/**\r\n * Setups up our presentation for printing/exporting to PDF.\r\n */\r\nexport default class Print {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n  }\r\n\r\n  /**\r\n   * Configures the presentation for printing to a static\r\n   * PDF.\r\n   */\r\n  async setupPDF() {\r\n    const config = this.Reveal.getConfig();\r\n    const slides = queryAll(this.Reveal.getRevealElement(), SLIDES_SELECTOR);\r\n\r\n    // Compute slide numbers now, before we start duplicating slides\r\n    const injectPageNumbers =\r\n      config.slideNumber && /all|print/i.test(config.showSlideNumber);\r\n\r\n    const slideSize = this.Reveal.getComputedSlideSize(\r\n      window.innerWidth,\r\n      window.innerHeight\r\n    );\r\n\r\n    // Dimensions of the PDF pages\r\n    const pageWidth = Math.floor(slideSize.width * (1 + config.margin)),\r\n      pageHeight = Math.floor(slideSize.height * (1 + config.margin));\r\n\r\n    // Dimensions of slides within the pages\r\n    const slideWidth = slideSize.width,\r\n      slideHeight = slideSize.height;\r\n\r\n    await new Promise(requestAnimationFrame);\r\n\r\n    // Let the browser know what page size we want to print\r\n    createStyleSheet(\r\n      '@page{size:' + pageWidth + 'px ' + pageHeight + 'px; margin: 0px;}'\r\n    );\r\n\r\n    // Limit the size of certain elements to the dimensions of the slide\r\n    createStyleSheet(\r\n      '.reveal section>img, .reveal section>video, .reveal section>iframe{max-width: ' +\r\n        slideWidth +\r\n        'px; max-height:' +\r\n        slideHeight +\r\n        'px}'\r\n    );\r\n\r\n    document.documentElement.classList.add('print-pdf');\r\n    document.body.style.width = pageWidth + 'px';\r\n    document.body.style.height = pageHeight + 'px';\r\n\r\n    const viewportElement = document.querySelector('.reveal-viewport');\r\n    let presentationBackground;\r\n    if (viewportElement) {\r\n      const viewportStyles = window.getComputedStyle(viewportElement);\r\n      if (viewportStyles && viewportStyles.background) {\r\n        presentationBackground = viewportStyles.background;\r\n      }\r\n    }\r\n\r\n    // Make sure stretch elements fit on slide\r\n    await new Promise(requestAnimationFrame);\r\n    this.Reveal.layoutSlideContents(slideWidth, slideHeight);\r\n\r\n    // Batch scrollHeight access to prevent layout thrashing\r\n    await new Promise(requestAnimationFrame);\r\n\r\n    const slideScrollHeights = slides.map((slide) => slide.scrollHeight);\r\n\r\n    const pages = [];\r\n    const pageContainer = slides[0].parentNode;\r\n    let slideNumber = 1;\r\n\r\n    // Slide and slide background layout\r\n    slides.forEach(function (slide, index) {\r\n      // Vertical stacks are not centred since their section\r\n      // children will be\r\n      if (slide.classList.contains('stack') === false) {\r\n        // Center the slide inside of the page, giving the slide some margin\r\n        let left = (pageWidth - slideWidth) / 2;\r\n        let top = (pageHeight - slideHeight) / 2;\r\n\r\n        const contentHeight = slideScrollHeights[index];\r\n        let numberOfPages = Math.max(Math.ceil(contentHeight / pageHeight), 1);\r\n\r\n        // Adhere to configured pages per slide limit\r\n        numberOfPages = Math.min(numberOfPages, config.pdfMaxPagesPerSlide);\r\n\r\n        // Center slides vertically\r\n        if (\r\n          (numberOfPages === 1 && config.center) ||\r\n          slide.classList.contains('center')\r\n        ) {\r\n          top = Math.max((pageHeight - contentHeight) / 2, 0);\r\n        }\r\n\r\n        // Wrap the slide in a page element and hide its overflow\r\n        // so that no page ever flows onto another\r\n        const page = document.createElement('div');\r\n        pages.push(page);\r\n\r\n        page.className = 'pdf-page';\r\n        page.style.height =\r\n          (pageHeight + config.pdfPageHeightOffset) * numberOfPages + 'px';\r\n\r\n        // Copy the presentation-wide background to each individual\r\n        // page when printing\r\n        if (presentationBackground) {\r\n          page.style.background = presentationBackground;\r\n        }\r\n\r\n        page.appendChild(slide);\r\n\r\n        // Position the slide inside of the page\r\n        slide.style.left = left + 'px';\r\n        slide.style.top = top + 'px';\r\n        slide.style.width = slideWidth + 'px';\r\n\r\n        this.Reveal.slideContent.layout(slide);\r\n\r\n        if (slide.slideBackgroundElement) {\r\n          page.insertBefore(slide.slideBackgroundElement, slide);\r\n        }\r\n\r\n        // Inject notes if `showNotes` is enabled\r\n        if (config.showNotes) {\r\n          // Are there notes for this slide?\r\n          const notes = this.Reveal.getSlideNotes(slide);\r\n          if (notes) {\r\n            const notesSpacing = 8;\r\n            const notesLayout =\r\n              typeof config.showNotes === 'string'\r\n                ? config.showNotes\r\n                : 'inline';\r\n            const notesElement = document.createElement('div');\r\n            notesElement.classList.add('speaker-notes');\r\n            notesElement.classList.add('speaker-notes-pdf');\r\n            notesElement.setAttribute('data-layout', notesLayout);\r\n            notesElement.innerHTML = notes;\r\n\r\n            if (notesLayout === 'separate-page') {\r\n              pages.push(notesElement);\r\n            } else {\r\n              notesElement.style.left = notesSpacing + 'px';\r\n              notesElement.style.bottom = notesSpacing + 'px';\r\n              notesElement.style.width = pageWidth - notesSpacing * 2 + 'px';\r\n              page.appendChild(notesElement);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Inject page numbers if `slideNumbers` are enabled\r\n        if (injectPageNumbers) {\r\n          const numberElement = document.createElement('div');\r\n          numberElement.classList.add('slide-number');\r\n          numberElement.classList.add('slide-number-pdf');\r\n          numberElement.innerHTML = slideNumber++;\r\n          page.appendChild(numberElement);\r\n        }\r\n\r\n        // Copy page and show fragments one after another\r\n        if (config.pdfSeparateFragments) {\r\n          // Each fragment 'group' is an array containing one or more\r\n          // fragments. Multiple fragments that appear at the same time\r\n          // are part of the same group.\r\n          const fragmentGroups = this.Reveal.fragments.sort(\r\n            page.querySelectorAll('.fragment'),\r\n            true\r\n          );\r\n\r\n          let previousFragmentStep;\r\n\r\n          fragmentGroups.forEach(function (fragments, index) {\r\n            // Remove 'current-fragment' from the previous group\r\n            if (previousFragmentStep) {\r\n              previousFragmentStep.forEach(function (fragment) {\r\n                fragment.classList.remove('current-fragment');\r\n              });\r\n            }\r\n\r\n            // Show the fragments for the current index\r\n            fragments.forEach(function (fragment) {\r\n              fragment.classList.add('visible', 'current-fragment');\r\n            }, this);\r\n\r\n            // Create a separate page for the current fragment state\r\n            const clonedPage = page.cloneNode(true);\r\n\r\n            // Inject unique page numbers for fragments\r\n            if (injectPageNumbers) {\r\n              const numberElement =\r\n                clonedPage.querySelector('.slide-number-pdf');\r\n              const fragmentNumber = index + 1;\r\n              numberElement.innerHTML += '.' + fragmentNumber;\r\n            }\r\n\r\n            pages.push(clonedPage);\r\n\r\n            previousFragmentStep = fragments;\r\n          }, this);\r\n\r\n          // Reset the first/original page so that all fragments are hidden\r\n          fragmentGroups.forEach(function (fragments) {\r\n            fragments.forEach(function (fragment) {\r\n              fragment.classList.remove('visible', 'current-fragment');\r\n            });\r\n          });\r\n        }\r\n        // Show all fragments\r\n        else {\r\n          queryAll(page, '.fragment:not(.fade-out)').forEach(function (\r\n            fragment\r\n          ) {\r\n            fragment.classList.add('visible');\r\n          });\r\n        }\r\n      }\r\n    }, this);\r\n\r\n    await new Promise(requestAnimationFrame);\r\n\r\n    pages.forEach((page) => pageContainer.appendChild(page));\r\n\r\n    // Re-run JS-based content layout after the slide is added to page DOM\r\n    this.Reveal.slideContent.layout(this.Reveal.getSlidesElement());\r\n\r\n    // Notify subscribers that the PDF layout is good to go\r\n    this.Reveal.dispatchEvent({ type: 'pdf-ready' });\r\n  }\r\n\r\n  /**\r\n   * Checks if this instance is being used to print a PDF.\r\n   */\r\n  isPrintingPDF() {\r\n    return /print-pdf/gi.test(window.location.search);\r\n  }\r\n}\r\n","import { isAndroid } from '../utils/device.js';\r\nimport { matches } from '../utils/util.js';\r\n\r\nconst SWIPE_THRESHOLD = 40;\r\n\r\n/**\r\n * Controls all touch interactions and navigations for\r\n * a presentation.\r\n */\r\nexport default class Touch {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n\r\n    // Holds information about the currently ongoing touch interaction\r\n    this.touchStartX = 0;\r\n    this.touchStartY = 0;\r\n    this.touchStartCount = 0;\r\n    this.touchCaptured = false;\r\n\r\n    this.onPointerDown = this.onPointerDown.bind(this);\r\n    this.onPointerMove = this.onPointerMove.bind(this);\r\n    this.onPointerUp = this.onPointerUp.bind(this);\r\n    this.onTouchStart = this.onTouchStart.bind(this);\r\n    this.onTouchMove = this.onTouchMove.bind(this);\r\n    this.onTouchEnd = this.onTouchEnd.bind(this);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  bind() {\r\n    let revealElement = this.Reveal.getRevealElement();\r\n\r\n    if ('onpointerdown' in window) {\r\n      // Use W3C pointer events\r\n      revealElement.addEventListener('pointerdown', this.onPointerDown, false);\r\n      revealElement.addEventListener('pointermove', this.onPointerMove, false);\r\n      revealElement.addEventListener('pointerup', this.onPointerUp, false);\r\n    } else if (window.navigator.msPointerEnabled) {\r\n      // IE 10 uses prefixed version of pointer events\r\n      revealElement.addEventListener(\r\n        'MSPointerDown',\r\n        this.onPointerDown,\r\n        false\r\n      );\r\n      revealElement.addEventListener(\r\n        'MSPointerMove',\r\n        this.onPointerMove,\r\n        false\r\n      );\r\n      revealElement.addEventListener('MSPointerUp', this.onPointerUp, false);\r\n    } else {\r\n      // Fall back to touch events\r\n      revealElement.addEventListener('touchstart', this.onTouchStart, false);\r\n      revealElement.addEventListener('touchmove', this.onTouchMove, false);\r\n      revealElement.addEventListener('touchend', this.onTouchEnd, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  unbind() {\r\n    let revealElement = this.Reveal.getRevealElement();\r\n\r\n    revealElement.removeEventListener('pointerdown', this.onPointerDown, false);\r\n    revealElement.removeEventListener('pointermove', this.onPointerMove, false);\r\n    revealElement.removeEventListener('pointerup', this.onPointerUp, false);\r\n\r\n    revealElement.removeEventListener(\r\n      'MSPointerDown',\r\n      this.onPointerDown,\r\n      false\r\n    );\r\n    revealElement.removeEventListener(\r\n      'MSPointerMove',\r\n      this.onPointerMove,\r\n      false\r\n    );\r\n    revealElement.removeEventListener('MSPointerUp', this.onPointerUp, false);\r\n\r\n    revealElement.removeEventListener('touchstart', this.onTouchStart, false);\r\n    revealElement.removeEventListener('touchmove', this.onTouchMove, false);\r\n    revealElement.removeEventListener('touchend', this.onTouchEnd, false);\r\n  }\r\n\r\n  /**\r\n   * Checks if the target element prevents the triggering of\r\n   * swipe navigation.\r\n   */\r\n  isSwipePrevented(target) {\r\n    // Prevent accidental swipes when scrubbing timelines\r\n    if (matches(target, 'video, audio')) return true;\r\n\r\n    while (target && typeof target.hasAttribute === 'function') {\r\n      if (target.hasAttribute('data-prevent-swipe')) return true;\r\n      target = target.parentNode;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Handler for the 'touchstart' event, enables support for\r\n   * swipe and pinch gestures.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onTouchStart(event) {\r\n    if (this.isSwipePrevented(event.target)) return true;\r\n\r\n    this.touchStartX = event.touches[0].clientX;\r\n    this.touchStartY = event.touches[0].clientY;\r\n    this.touchStartCount = event.touches.length;\r\n  }\r\n\r\n  /**\r\n   * Handler for the 'touchmove' event.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onTouchMove(event) {\r\n    if (this.isSwipePrevented(event.target)) return true;\r\n\r\n    let config = this.Reveal.getConfig();\r\n\r\n    // Each touch should only trigger one action\r\n    if (!this.touchCaptured) {\r\n      this.Reveal.onUserInput(event);\r\n\r\n      let currentX = event.touches[0].clientX;\r\n      let currentY = event.touches[0].clientY;\r\n\r\n      // There was only one touch point, look for a swipe\r\n      if (event.touches.length === 1 && this.touchStartCount !== 2) {\r\n        let availableRoutes = this.Reveal.availableRoutes({\r\n          includeFragments: true,\r\n        });\r\n\r\n        let deltaX = currentX - this.touchStartX,\r\n          deltaY = currentY - this.touchStartY;\r\n\r\n        if (deltaX > SWIPE_THRESHOLD && Math.abs(deltaX) > Math.abs(deltaY)) {\r\n          this.touchCaptured = true;\r\n          if (config.navigationMode === 'linear') {\r\n            if (config.rtl) {\r\n              this.Reveal.next();\r\n            } else {\r\n              this.Reveal.prev();\r\n            }\r\n          } else {\r\n            this.Reveal.left();\r\n          }\r\n        } else if (\r\n          deltaX < -SWIPE_THRESHOLD &&\r\n          Math.abs(deltaX) > Math.abs(deltaY)\r\n        ) {\r\n          this.touchCaptured = true;\r\n          if (config.navigationMode === 'linear') {\r\n            if (config.rtl) {\r\n              this.Reveal.prev();\r\n            } else {\r\n              this.Reveal.next();\r\n            }\r\n          } else {\r\n            this.Reveal.right();\r\n          }\r\n        } else if (deltaY > SWIPE_THRESHOLD && availableRoutes.up) {\r\n          this.touchCaptured = true;\r\n          if (config.navigationMode === 'linear') {\r\n            this.Reveal.prev();\r\n          } else {\r\n            this.Reveal.up();\r\n          }\r\n        } else if (deltaY < -SWIPE_THRESHOLD && availableRoutes.down) {\r\n          this.touchCaptured = true;\r\n          if (config.navigationMode === 'linear') {\r\n            this.Reveal.next();\r\n          } else {\r\n            this.Reveal.down();\r\n          }\r\n        }\r\n\r\n        // If we're embedded, only block touch events if they have\r\n        // triggered an action\r\n        if (config.embedded) {\r\n          if (this.touchCaptured || this.Reveal.isVerticalSlide()) {\r\n            event.preventDefault();\r\n          }\r\n        }\r\n        // Not embedded? Block them all to avoid needless tossing\r\n        // around of the viewport in iOS\r\n        else {\r\n          event.preventDefault();\r\n        }\r\n      }\r\n    }\r\n    // There's a bug with swiping on some Android devices unless\r\n    // the default action is always prevented\r\n    else if (isAndroid) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler for the 'touchend' event.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onTouchEnd(event) {\r\n    this.touchCaptured = false;\r\n  }\r\n\r\n  /**\r\n   * Convert pointer down to touch start.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onPointerDown(event) {\r\n    if (\r\n      event.pointerType === event.MSPOINTER_TYPE_TOUCH ||\r\n      event.pointerType === 'touch'\r\n    ) {\r\n      event.touches = [{ clientX: event.clientX, clientY: event.clientY }];\r\n      this.onTouchStart(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert pointer move to touch move.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onPointerMove(event) {\r\n    if (\r\n      event.pointerType === event.MSPOINTER_TYPE_TOUCH ||\r\n      event.pointerType === 'touch'\r\n    ) {\r\n      event.touches = [{ clientX: event.clientX, clientY: event.clientY }];\r\n      this.onTouchMove(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert pointer up to touch end.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  onPointerUp(event) {\r\n    if (\r\n      event.pointerType === event.MSPOINTER_TYPE_TOUCH ||\r\n      event.pointerType === 'touch'\r\n    ) {\r\n      event.touches = [{ clientX: event.clientX, clientY: event.clientY }];\r\n      this.onTouchEnd(event);\r\n    }\r\n  }\r\n}\r\n","import { closest } from '../utils/util.js';\r\n\r\n/**\r\n * Manages focus when a presentation is embedded. This\r\n * helps us only capture keyboard from the presentation\r\n * a user is currently interacting with in a page where\r\n * multiple presentations are embedded.\r\n */\r\n\r\nconst STATE_FOCUS = 'focus';\r\nconst STATE_BLUR = 'blur';\r\n\r\nexport default class Focus {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n\r\n    this.onRevealPointerDown = this.onRevealPointerDown.bind(this);\r\n    this.onDocumentPointerDown = this.onDocumentPointerDown.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Called when the reveal.js config is updated.\r\n   */\r\n  configure(config, oldConfig) {\r\n    if (config.embedded) {\r\n      this.blur();\r\n    } else {\r\n      this.focus();\r\n      this.unbind();\r\n    }\r\n  }\r\n\r\n  bind() {\r\n    if (this.Reveal.getConfig().embedded) {\r\n      this.Reveal.getRevealElement().addEventListener(\r\n        'pointerdown',\r\n        this.onRevealPointerDown,\r\n        false\r\n      );\r\n    }\r\n  }\r\n\r\n  unbind() {\r\n    this.Reveal.getRevealElement().removeEventListener(\r\n      'pointerdown',\r\n      this.onRevealPointerDown,\r\n      false\r\n    );\r\n    document.removeEventListener(\r\n      'pointerdown',\r\n      this.onDocumentPointerDown,\r\n      false\r\n    );\r\n  }\r\n\r\n  focus() {\r\n    if (this.state !== STATE_FOCUS) {\r\n      this.Reveal.getRevealElement().classList.add('focused');\r\n      document.addEventListener(\r\n        'pointerdown',\r\n        this.onDocumentPointerDown,\r\n        false\r\n      );\r\n    }\r\n\r\n    this.state = STATE_FOCUS;\r\n  }\r\n\r\n  blur() {\r\n    if (this.state !== STATE_BLUR) {\r\n      this.Reveal.getRevealElement().classList.remove('focused');\r\n      document.removeEventListener(\r\n        'pointerdown',\r\n        this.onDocumentPointerDown,\r\n        false\r\n      );\r\n    }\r\n\r\n    this.state = STATE_BLUR;\r\n  }\r\n\r\n  isFocused() {\r\n    return this.state === STATE_FOCUS;\r\n  }\r\n\r\n  destroy() {\r\n    this.Reveal.getRevealElement().classList.remove('focused');\r\n  }\r\n\r\n  onRevealPointerDown(event) {\r\n    this.focus();\r\n  }\r\n\r\n  onDocumentPointerDown(event) {\r\n    let revealElement = closest(event.target, '.reveal');\r\n    if (!revealElement || revealElement !== this.Reveal.getRevealElement()) {\r\n      this.blur();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Handles the showing of speaker notes\r\n */\r\nexport default class Notes {\r\n  constructor(Reveal) {\r\n    this.Reveal = Reveal;\r\n  }\r\n\r\n  render() {\r\n    this.element = document.createElement('div');\r\n    this.element.className = 'speaker-notes';\r\n    this.element.setAttribute('data-prevent-swipe', '');\r\n    this.element.setAttribute('tabindex', '0');\r\n    this.Reveal.getRevealElement().appendChild(this.element);\r\n  }\r\n\r\n  /**\r\n   * Called when the reveal.js config is updated.\r\n   */\r\n  configure(config, oldConfig) {\r\n    if (config.showNotes) {\r\n      this.element.setAttribute(\r\n        'data-layout',\r\n        typeof config.showNotes === 'string' ? config.showNotes : 'inline'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pick up notes from the current slide and display them\r\n   * to the viewer.\r\n   *\r\n   * @see {@link config.showNotes}\r\n   */\r\n  update() {\r\n    if (\r\n      this.Reveal.getConfig().showNotes &&\r\n      this.element &&\r\n      this.Reveal.getCurrentSlide() &&\r\n      !this.Reveal.print.isPrintingPDF()\r\n    ) {\r\n      this.element.innerHTML =\r\n        this.getSlideNotes() ||\r\n        '<span class=\"notes-placeholder\">No notes on this slide.</span>';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the visibility of the speaker notes sidebar that\r\n   * is used to share annotated slides. The notes sidebar is\r\n   * only visible if showNotes is true and there are notes on\r\n   * one or more slides in the deck.\r\n   */\r\n  updateVisibility() {\r\n    if (\r\n      this.Reveal.getConfig().showNotes &&\r\n      this.hasNotes() &&\r\n      !this.Reveal.print.isPrintingPDF()\r\n    ) {\r\n      this.Reveal.getRevealElement().classList.add('show-notes');\r\n    } else {\r\n      this.Reveal.getRevealElement().classList.remove('show-notes');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if there are speaker notes for ANY slide in the\r\n   * presentation.\r\n   */\r\n  hasNotes() {\r\n    return (\r\n      this.Reveal.getSlidesElement().querySelectorAll(\r\n        '[data-notes], aside.notes'\r\n      ).length > 0\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if this presentation is running inside of the\r\n   * speaker notes window.\r\n   *\r\n   * @return {boolean}\r\n   */\r\n  isSpeakerNotesWindow() {\r\n    return !!window.location.search.match(/receiver/gi);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the speaker notes from a slide. Notes can be\r\n   * defined in two ways:\r\n   * 1. As a data-notes attribute on the slide <section>\r\n   * 2. With <aside class=\"notes\"> elements inside the slide\r\n   *\r\n   * @param {HTMLElement} [slide=currentSlide]\r\n   * @return {(string|null)}\r\n   */\r\n  getSlideNotes(slide = this.Reveal.getCurrentSlide()) {\r\n    // Notes can be specified via the data-notes attribute...\r\n    if (slide.hasAttribute('data-notes')) {\r\n      return slide.getAttribute('data-notes');\r\n    }\r\n\r\n    // ... or using <aside class=\"notes\"> elements\r\n    let notesElements = slide.querySelectorAll('aside.notes');\r\n    if (notesElements) {\r\n      return Array.from(notesElements)\r\n        .map((notesElement) => notesElement.innerHTML)\r\n        .join('\\n');\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  destroy() {\r\n    this.element.remove();\r\n  }\r\n}\r\n","/**\r\n * UI component that lets the use control auto-slide\r\n * playback via play/pause.\r\n */\r\nexport default class Playback {\r\n  /**\r\n   * @param {HTMLElement} container The component will append\r\n   * itself to this\r\n   * @param {function} progressCheck A method which will be\r\n   * called frequently to get the current playback progress on\r\n   * a range of 0-1\r\n   */\r\n  constructor(container, progressCheck) {\r\n    // Cosmetics\r\n    this.diameter = 100;\r\n    this.diameter2 = this.diameter / 2;\r\n    this.thickness = 6;\r\n\r\n    // Flags if we are currently playing\r\n    this.playing = false;\r\n\r\n    // Current progress on a 0-1 range\r\n    this.progress = 0;\r\n\r\n    // Used to loop the animation smoothly\r\n    this.progressOffset = 1;\r\n\r\n    this.container = container;\r\n    this.progressCheck = progressCheck;\r\n\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.className = 'playback';\r\n    this.canvas.width = this.diameter;\r\n    this.canvas.height = this.diameter;\r\n    this.canvas.style.width = this.diameter2 + 'px';\r\n    this.canvas.style.height = this.diameter2 + 'px';\r\n    this.context = this.canvas.getContext('2d');\r\n\r\n    this.container.appendChild(this.canvas);\r\n\r\n    this.render();\r\n  }\r\n\r\n  setPlaying(value) {\r\n    const wasPlaying = this.playing;\r\n\r\n    this.playing = value;\r\n\r\n    // Start repainting if we weren't already\r\n    if (!wasPlaying && this.playing) {\r\n      this.animate();\r\n    } else {\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  animate() {\r\n    const progressBefore = this.progress;\r\n\r\n    this.progress = this.progressCheck();\r\n\r\n    // When we loop, offset the progress so that it eases\r\n    // smoothly rather than immediately resetting\r\n    if (progressBefore > 0.8 && this.progress < 0.2) {\r\n      this.progressOffset = this.progress;\r\n    }\r\n\r\n    this.render();\r\n\r\n    if (this.playing) {\r\n      requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the current progress and playback state.\r\n   */\r\n  render() {\r\n    let progress = this.playing ? this.progress : 0,\r\n      radius = this.diameter2 - this.thickness,\r\n      x = this.diameter2,\r\n      y = this.diameter2,\r\n      iconSize = 28;\r\n\r\n    // Ease towards 1\r\n    this.progressOffset += (1 - this.progressOffset) * 0.1;\r\n\r\n    const endAngle = -Math.PI / 2 + progress * (Math.PI * 2);\r\n    const startAngle = -Math.PI / 2 + this.progressOffset * (Math.PI * 2);\r\n\r\n    this.context.save();\r\n    this.context.clearRect(0, 0, this.diameter, this.diameter);\r\n\r\n    // Solid background color\r\n    this.context.beginPath();\r\n    this.context.arc(x, y, radius + 4, 0, Math.PI * 2, false);\r\n    this.context.fillStyle = 'rgba( 0, 0, 0, 0.4 )';\r\n    this.context.fill();\r\n\r\n    // Draw progress track\r\n    this.context.beginPath();\r\n    this.context.arc(x, y, radius, 0, Math.PI * 2, false);\r\n    this.context.lineWidth = this.thickness;\r\n    this.context.strokeStyle = 'rgba( 255, 255, 255, 0.2 )';\r\n    this.context.stroke();\r\n\r\n    if (this.playing) {\r\n      // Draw progress on top of track\r\n      this.context.beginPath();\r\n      this.context.arc(x, y, radius, startAngle, endAngle, false);\r\n      this.context.lineWidth = this.thickness;\r\n      this.context.strokeStyle = '#fff';\r\n      this.context.stroke();\r\n    }\r\n\r\n    this.context.translate(x - iconSize / 2, y - iconSize / 2);\r\n\r\n    // Draw play/pause icons\r\n    if (this.playing) {\r\n      this.context.fillStyle = '#fff';\r\n      this.context.fillRect(0, 0, iconSize / 2 - 4, iconSize);\r\n      this.context.fillRect(iconSize / 2 + 4, 0, iconSize / 2 - 4, iconSize);\r\n    } else {\r\n      this.context.beginPath();\r\n      this.context.translate(4, 0);\r\n      this.context.moveTo(0, 0);\r\n      this.context.lineTo(iconSize - 4, iconSize / 2);\r\n      this.context.lineTo(0, iconSize);\r\n      this.context.fillStyle = '#fff';\r\n      this.context.fill();\r\n    }\r\n\r\n    this.context.restore();\r\n  }\r\n\r\n  on(type, listener) {\r\n    this.canvas.addEventListener(type, listener, false);\r\n  }\r\n\r\n  off(type, listener) {\r\n    this.canvas.removeEventListener(type, listener, false);\r\n  }\r\n\r\n  destroy() {\r\n    this.playing = false;\r\n\r\n    if (this.canvas.parentNode) {\r\n      this.container.removeChild(this.canvas);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * The default reveal.js config object.\r\n */\r\nexport default {\r\n  // The \"normal\" size of the presentation, aspect ratio will be preserved\r\n  // when the presentation is scaled to fit different resolutions\r\n  width: 960,\r\n  height: 700,\r\n\r\n  // Factor of the display size that should remain empty around the content\r\n  margin: 0.04,\r\n\r\n  // Bounds for smallest/largest possible scale to apply to content\r\n  minScale: 0.2,\r\n  maxScale: 2.0,\r\n\r\n  // Display presentation control arrows\r\n  controls: true,\r\n\r\n  // Help the user learn the controls by providing hints, for example by\r\n  // bouncing the down arrow when they first encounter a vertical slide\r\n  controlsTutorial: true,\r\n\r\n  // Determines where controls appear, \"edges\" or \"bottom-right\"\r\n  controlsLayout: 'bottom-right',\r\n\r\n  // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\"\r\n  // or \"visible\"\r\n  controlsBackArrows: 'faded',\r\n\r\n  // Display a presentation progress bar\r\n  progress: true,\r\n\r\n  // Display the page number of the current slide\r\n  // - true:    Show slide number\r\n  // - false:   Hide slide number\r\n  //\r\n  // Can optionally be set as a string that specifies the number formatting:\r\n  // - \"h.v\":\t  Horizontal . vertical slide number (default)\r\n  // - \"h/v\":\t  Horizontal / vertical slide number\r\n  // - \"c\":\t  Flattened slide number\r\n  // - \"c/t\":\t  Flattened slide number / total slides\r\n  //\r\n  // Alternatively, you can provide a function that returns the slide\r\n  // number for the current slide. The function should take in a slide\r\n  // object and return an array with one string [slideNumber] or\r\n  // three strings [n1,delimiter,n2]. See #formatSlideNumber().\r\n  slideNumber: false,\r\n\r\n  // Can be used to limit the contexts in which the slide number appears\r\n  // - \"all\":      Always show the slide number\r\n  // - \"print\":    Only when printing to PDF\r\n  // - \"speaker\":  Only in the speaker view\r\n  showSlideNumber: 'all',\r\n\r\n  // Use 1 based indexing for # links to match slide number (default is zero\r\n  // based)\r\n  hashOneBasedIndex: false,\r\n\r\n  // Add the current slide number to the URL hash so that reloading the\r\n  // page/copying the URL will return you to the same slide\r\n  hash: false,\r\n\r\n  // Flags if we should monitor the hash and change slides accordingly\r\n  respondToHashChanges: true,\r\n\r\n  // Push each slide change to the browser history.  Implies `hash: true`\r\n  history: false,\r\n\r\n  // Enable keyboard shortcuts for navigation\r\n  keyboard: true,\r\n\r\n  // Optional function that blocks keyboard events when retuning false\r\n  //\r\n  // If you set this to 'focused', we will only capture keyboard events\r\n  // for embedded decks when they are in focus\r\n  keyboardCondition: null,\r\n\r\n  // Disables the default reveal.js slide layout (scaling and centering)\r\n  // so that you can use custom CSS layout\r\n  disableLayout: false,\r\n\r\n  // Enable the slide overview mode\r\n  overview: true,\r\n\r\n  // Vertical centering of slides\r\n  center: true,\r\n\r\n  // Enables touch navigation on devices with touch input\r\n  touch: true,\r\n\r\n  // Loop the presentation\r\n  loop: false,\r\n\r\n  // Change the presentation direction to be RTL\r\n  rtl: false,\r\n\r\n  // Changes the behavior of our navigation directions.\r\n  //\r\n  // \"default\"\r\n  // Left/right arrow keys step between horizontal slides, up/down\r\n  // arrow keys step between vertical slides. Space key steps through\r\n  // all slides (both horizontal and vertical).\r\n  //\r\n  // \"linear\"\r\n  // Removes the up/down arrows. Left/right arrows step through all\r\n  // slides (both horizontal and vertical).\r\n  //\r\n  // \"grid\"\r\n  // When this is enabled, stepping left/right from a vertical stack\r\n  // to an adjacent vertical stack will land you at the same vertical\r\n  // index.\r\n  //\r\n  // Consider a deck with six slides ordered in two vertical stacks:\r\n  // 1.1    2.1\r\n  // 1.2    2.2\r\n  // 1.3    2.3\r\n  //\r\n  // If you're on slide 1.3 and navigate right, you will normally move\r\n  // from 1.3 -> 2.1. If \"grid\" is used, the same navigation takes you\r\n  // from 1.3 -> 2.3.\r\n  navigationMode: 'default',\r\n\r\n  // Randomizes the order of slides each time the presentation loads\r\n  shuffle: false,\r\n\r\n  // Turns fragments on and off globally\r\n  fragments: true,\r\n\r\n  // Flags whether to include the current fragment in the URL,\r\n  // so that reloading brings you to the same fragment position\r\n  fragmentInURL: true,\r\n\r\n  // Flags if the presentation is running in an embedded mode,\r\n  // i.e. contained within a limited portion of the screen\r\n  embedded: false,\r\n\r\n  // Flags if we should show a help overlay when the question-mark\r\n  // key is pressed\r\n  help: true,\r\n\r\n  // Flags if it should be possible to pause the presentation (blackout)\r\n  pause: true,\r\n\r\n  // Flags if speaker notes should be visible to all viewers\r\n  showNotes: false,\r\n\r\n  // Flags if slides with data-visibility=\"hidden\" should be kep visible\r\n  showHiddenSlides: false,\r\n\r\n  // Global override for autoplaying embedded media (video/audio/iframe)\r\n  // - null:   Media will only autoplay if data-autoplay is present\r\n  // - true:   All media will autoplay, regardless of individual setting\r\n  // - false:  No media will autoplay, regardless of individual setting\r\n  autoPlayMedia: null,\r\n\r\n  // Global override for preloading lazy-loaded iframes\r\n  // - null:   Iframes with data-src AND data-preload will be loaded when within\r\n  //           the viewDistance, iframes with only data-src will be loaded when visible\r\n  // - true:   All iframes with data-src will be loaded when within the viewDistance\r\n  // - false:  All iframes with data-src will be loaded only when visible\r\n  preloadIframes: null,\r\n\r\n  // Can be used to globally disable auto-animation\r\n  autoAnimate: true,\r\n\r\n  // Optionally provide a custom element matcher that will be\r\n  // used to dictate which elements we can animate between.\r\n  autoAnimateMatcher: null,\r\n\r\n  // Default settings for our auto-animate transitions, can be\r\n  // overridden per-slide or per-element via data arguments\r\n  autoAnimateEasing: 'ease',\r\n  autoAnimateDuration: 1.0,\r\n  autoAnimateUnmatched: true,\r\n\r\n  // CSS properties that can be auto-animated. Position & scale\r\n  // is matched separately so there's no need to include styles\r\n  // like top/right/bottom/left, width/height or margin.\r\n  autoAnimateStyles: [\r\n    'opacity',\r\n    'color',\r\n    'background-color',\r\n    'padding',\r\n    'font-size',\r\n    'line-height',\r\n    'letter-spacing',\r\n    'border-width',\r\n    'border-color',\r\n    'border-radius',\r\n    'outline',\r\n    'outline-offset',\r\n  ],\r\n\r\n  // Controls automatic progression to the next slide\r\n  // - 0:      Auto-sliding only happens if the data-autoslide HTML attribute\r\n  //           is present on the current slide or fragment\r\n  // - 1+:     All slides will progress automatically at the given interval\r\n  // - false:  No auto-sliding, even if data-autoslide is present\r\n  autoSlide: 0,\r\n\r\n  // Stop auto-sliding after user input\r\n  autoSlideStoppable: true,\r\n\r\n  // Use this method for navigation when auto-sliding (defaults to navigateNext)\r\n  autoSlideMethod: null,\r\n\r\n  // Specify the average time in seconds that you think you will spend\r\n  // presenting each slide. This is used to show a pacing timer in the\r\n  // speaker view\r\n  defaultTiming: null,\r\n\r\n  // Enable slide navigation via mouse wheel\r\n  mouseWheel: false,\r\n\r\n  // Opens links in an iframe preview overlay\r\n  // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link\r\n  // individually\r\n  previewLinks: false,\r\n\r\n  // Exposes the reveal.js API through window.postMessage\r\n  postMessage: true,\r\n\r\n  // Dispatches all reveal.js events to the parent window through postMessage\r\n  postMessageEvents: false,\r\n\r\n  // Focuses body when page changes visibility to ensure keyboard shortcuts work\r\n  focusBodyOnPageVisibilityChange: true,\r\n\r\n  // Transition style\r\n  transition: 'slide', // none/fade/slide/convex/concave/zoom\r\n\r\n  // Transition speed\r\n  transitionSpeed: 'default', // default/fast/slow\r\n\r\n  // Transition style for full page slide backgrounds\r\n  backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom\r\n\r\n  // Parallax background image\r\n  parallaxBackgroundImage: '', // CSS syntax, e.g. \"a.jpg\"\r\n\r\n  // Parallax background size\r\n  parallaxBackgroundSize: '', // CSS syntax, e.g. \"3000px 2000px\"\r\n\r\n  // Parallax background repeat\r\n  parallaxBackgroundRepeat: '', // repeat/repeat-x/repeat-y/no-repeat/initial/inherit\r\n\r\n  // Parallax background position\r\n  parallaxBackgroundPosition: '', // CSS syntax, e.g. \"top left\"\r\n\r\n  // Amount of pixels to move the parallax background per slide step\r\n  parallaxBackgroundHorizontal: null,\r\n  parallaxBackgroundVertical: null,\r\n\r\n  // The maximum number of pages a single slide can expand onto when printing\r\n  // to PDF, unlimited by default\r\n  pdfMaxPagesPerSlide: Number.POSITIVE_INFINITY,\r\n\r\n  // Prints each fragment on a separate slide\r\n  pdfSeparateFragments: true,\r\n\r\n  // Offset used to reduce the height of content within exported PDF pages.\r\n  // This exists to account for environment differences based on how you\r\n  // print to PDF. CLI printing options, like phantomjs and wkpdf, can end\r\n  // on precisely the total height of the document whereas in-browser\r\n  // printing has to end one pixel before.\r\n  pdfPageHeightOffset: -1,\r\n\r\n  // Number of slides away from the current that are visible\r\n  viewDistance: 3,\r\n\r\n  // Number of slides away from the current that are visible on mobile\r\n  // devices. It is advisable to set this to a lower number than\r\n  // viewDistance in order to save resources.\r\n  mobileViewDistance: 2,\r\n\r\n  // The display mode that will be used to show slides\r\n  display: 'block',\r\n\r\n  // Hide cursor if inactive\r\n  hideInactiveCursor: true,\r\n\r\n  // Time before the cursor is hidden (in ms)\r\n  hideCursorTime: 5000,\r\n\r\n  // Script dependencies to load\r\n  dependencies: [],\r\n\r\n  // Plugin objects to register and use for this presentation\r\n  plugins: [],\r\n};\r\n","import SlideContent from './controllers/slidecontent.js';\r\nimport SlideNumber from './controllers/slidenumber.js';\r\nimport Backgrounds from './controllers/backgrounds.js';\r\nimport AutoAnimate from './controllers/autoanimate.js';\r\nimport Fragments from './controllers/fragments.js';\r\nimport Overview from './controllers/overview.js';\r\nimport Keyboard from './controllers/keyboard.js';\r\nimport Location from './controllers/location.js';\r\nimport Controls from './controllers/controls.js';\r\nimport Progress from './controllers/progress.js';\r\nimport Pointer from './controllers/pointer.js';\r\nimport Plugins from './controllers/plugins.js';\r\nimport Print from './controllers/print.js';\r\nimport Touch from './controllers/touch.js';\r\nimport Focus from './controllers/focus.js';\r\nimport Notes from './controllers/notes.js';\r\nimport Playback from './components/playback.js';\r\nimport defaultConfig from './config.js';\r\nimport * as Util from './utils/util.js';\r\nimport * as Device from './utils/device.js';\r\nimport {\r\n  SLIDES_SELECTOR,\r\n  HORIZONTAL_SLIDES_SELECTOR,\r\n  VERTICAL_SLIDES_SELECTOR,\r\n  POST_MESSAGE_METHOD_BLACKLIST,\r\n} from './utils/constants.js';\r\n\r\n// The reveal.js version\r\nexport const VERSION = '4.4.0';\r\n\r\n/**\r\n * reveal.js\r\n * https://revealjs.com\r\n * MIT licensed\r\n *\r\n * Copyright (C) 2011-2022 Hakim El Hattab, https://hakim.se\r\n */\r\nexport default function (revealElement, options) {\r\n  // Support initialization with no args, one arg\r\n  // [options] or two args [revealElement, options]\r\n  if (arguments.length < 2) {\r\n    options = arguments[0];\r\n    revealElement = document.querySelector('.reveal');\r\n  }\r\n\r\n  const Reveal = {};\r\n\r\n  // Configuration defaults, can be overridden at initialization time\r\n  let config = {},\r\n    // Flags if reveal.js is loaded (has dispatched the 'ready' event)\r\n    ready = false,\r\n    // The horizontal and vertical index of the currently active slide\r\n    indexh,\r\n    indexv,\r\n    // The previous and current slide HTML elements\r\n    previousSlide,\r\n    currentSlide,\r\n    // Remember which directions that the user has navigated towards\r\n    navigationHistory = {\r\n      hasNavigatedHorizontally: false,\r\n      hasNavigatedVertically: false,\r\n    },\r\n    // Slides may have a data-state attribute which we pick up and apply\r\n    // as a class to the body. This list contains the combined state of\r\n    // all current slides.\r\n    state = [],\r\n    // The current scale of the presentation (see width/height config)\r\n    scale = 1,\r\n    // CSS transform that is currently applied to the slides container,\r\n    // split into two groups\r\n    slidesTransform = { layout: '', overview: '' },\r\n    // Cached references to DOM elements\r\n    dom = {},\r\n    // Flags if the interaction event listeners are bound\r\n    eventsAreBound = false,\r\n    // The current slide transition state; idle or running\r\n    transition = 'idle',\r\n    // The current auto-slide duration\r\n    autoSlide = 0,\r\n    // Auto slide properties\r\n    autoSlidePlayer,\r\n    autoSlideTimeout = 0,\r\n    autoSlideStartTime = -1,\r\n    autoSlidePaused = false,\r\n    // Controllers for different aspects of our presentation. They're\r\n    // all given direct references to this Reveal instance since there\r\n    // may be multiple presentations running in parallel.\r\n    slideContent = new SlideContent(Reveal),\r\n    slideNumber = new SlideNumber(Reveal),\r\n    autoAnimate = new AutoAnimate(Reveal),\r\n    backgrounds = new Backgrounds(Reveal),\r\n    fragments = new Fragments(Reveal),\r\n    overview = new Overview(Reveal),\r\n    keyboard = new Keyboard(Reveal),\r\n    location = new Location(Reveal),\r\n    controls = new Controls(Reveal),\r\n    progress = new Progress(Reveal),\r\n    pointer = new Pointer(Reveal),\r\n    plugins = new Plugins(Reveal),\r\n    print = new Print(Reveal),\r\n    focus = new Focus(Reveal),\r\n    touch = new Touch(Reveal),\r\n    notes = new Notes(Reveal);\r\n\r\n  /**\r\n   * Starts up the presentation.\r\n   */\r\n  function initialize(initOptions) {\r\n    if (!revealElement)\r\n      throw 'Unable to find presentation root (<div class=\"reveal\">).';\r\n\r\n    // Cache references to key DOM elements\r\n    dom.wrapper = revealElement;\r\n    dom.slides = revealElement.querySelector('.slides');\r\n\r\n    if (!dom.slides)\r\n      throw 'Unable to find slides container (<div class=\"slides\">).';\r\n\r\n    // Compose our config object in order of increasing precedence:\r\n    // 1. Default reveal.js options\r\n    // 2. Options provided via Reveal.configure() prior to\r\n    //    initialization\r\n    // 3. Options passed to the Reveal constructor\r\n    // 4. Options passed to Reveal.initialize\r\n    // 5. Query params\r\n    config = {\r\n      ...defaultConfig,\r\n      ...config,\r\n      ...options,\r\n      ...initOptions,\r\n      ...Util.getQueryHash(),\r\n    };\r\n\r\n    setViewport();\r\n\r\n    // Force a layout when the whole page, incl fonts, has loaded\r\n    window.addEventListener('load', layout, false);\r\n\r\n    // Register plugins and load dependencies, then move on to #start()\r\n    plugins.load(config.plugins, config.dependencies).then(start);\r\n\r\n    return new Promise((resolve) => Reveal.on('ready', resolve));\r\n  }\r\n\r\n  /**\r\n   * Encase the presentation in a reveal.js viewport. The\r\n   * extent of the viewport differs based on configuration.\r\n   */\r\n  function setViewport() {\r\n    // Embedded decks use the reveal element as their viewport\r\n    if (config.embedded === true) {\r\n      dom.viewport =\r\n        Util.closest(revealElement, '.reveal-viewport') || revealElement;\r\n    }\r\n    // Full-page decks use the body as their viewport\r\n    else {\r\n      dom.viewport = document.body;\r\n      document.documentElement.classList.add('reveal-full-page');\r\n    }\r\n\r\n    dom.viewport.classList.add('reveal-viewport');\r\n  }\r\n\r\n  /**\r\n   * Starts up reveal.js by binding input events and navigating\r\n   * to the current URL deeplink if there is one.\r\n   */\r\n  function start() {\r\n    ready = true;\r\n\r\n    // Remove slides hidden with data-visibility\r\n    removeHiddenSlides();\r\n\r\n    // Make sure we've got all the DOM elements we need\r\n    setupDOM();\r\n\r\n    // Listen to messages posted to this window\r\n    setupPostMessage();\r\n\r\n    // Prevent the slides from being scrolled out of view\r\n    setupScrollPrevention();\r\n\r\n    // Adds bindings for fullscreen mode\r\n    setupFullscreen();\r\n\r\n    // Resets all vertical slides so that only the first is visible\r\n    resetVerticalSlides();\r\n\r\n    // Updates the presentation to match the current configuration values\r\n    configure();\r\n\r\n    // Read the initial hash\r\n    location.readURL();\r\n\r\n    // Create slide backgrounds\r\n    backgrounds.update(true);\r\n\r\n    // Notify listeners that the presentation is ready but use a 1ms\r\n    // timeout to ensure it's not fired synchronously after #initialize()\r\n    setTimeout(() => {\r\n      // Enable transitions now that we're loaded\r\n      dom.slides.classList.remove('no-transition');\r\n\r\n      dom.wrapper.classList.add('ready');\r\n\r\n      dispatchEvent({\r\n        type: 'ready',\r\n        data: {\r\n          indexh,\r\n          indexv,\r\n          currentSlide,\r\n        },\r\n      });\r\n    }, 1);\r\n\r\n    // Special setup and config is required when printing to PDF\r\n    if (print.isPrintingPDF()) {\r\n      removeEventListeners();\r\n\r\n      // The document needs to have loaded for the PDF layout\r\n      // measurements to be accurate\r\n      if (document.readyState === 'complete') {\r\n        print.setupPDF();\r\n      } else {\r\n        window.addEventListener('load', () => {\r\n          print.setupPDF();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all slides with data-visibility=\"hidden\". This\r\n   * is done right before the rest of the presentation is\r\n   * initialized.\r\n   *\r\n   * If you want to show all hidden slides, initialize\r\n   * reveal.js with showHiddenSlides set to true.\r\n   */\r\n  function removeHiddenSlides() {\r\n    if (!config.showHiddenSlides) {\r\n      Util.queryAll(dom.wrapper, 'section[data-visibility=\"hidden\"]').forEach(\r\n        (slide) => {\r\n          slide.parentNode.removeChild(slide);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and stores references to DOM elements which are\r\n   * required by the presentation. If a required element is\r\n   * not found, it is created.\r\n   */\r\n  function setupDOM() {\r\n    // Prevent transitions while we're loading\r\n    dom.slides.classList.add('no-transition');\r\n\r\n    if (Device.isMobile) {\r\n      dom.wrapper.classList.add('no-hover');\r\n    } else {\r\n      dom.wrapper.classList.remove('no-hover');\r\n    }\r\n\r\n    backgrounds.render();\r\n    slideNumber.render();\r\n    controls.render();\r\n    progress.render();\r\n    notes.render();\r\n\r\n    // Overlay graphic which is displayed during the paused mode\r\n    dom.pauseOverlay = Util.createSingletonNode(\r\n      dom.wrapper,\r\n      'div',\r\n      'pause-overlay',\r\n      config.controls\r\n        ? '<button class=\"resume-button\">Resume presentation</button>'\r\n        : null\r\n    );\r\n\r\n    dom.statusElement = createStatusElement();\r\n\r\n    dom.wrapper.setAttribute('role', 'application');\r\n  }\r\n\r\n  /**\r\n   * Creates a hidden div with role aria-live to announce the\r\n   * current slide content. Hide the div off-screen to make it\r\n   * available only to Assistive Technologies.\r\n   *\r\n   * @return {HTMLElement}\r\n   */\r\n  function createStatusElement() {\r\n    let statusElement = dom.wrapper.querySelector('.aria-status');\r\n    if (!statusElement) {\r\n      statusElement = document.createElement('div');\r\n      statusElement.style.position = 'absolute';\r\n      statusElement.style.height = '1px';\r\n      statusElement.style.width = '1px';\r\n      statusElement.style.overflow = 'hidden';\r\n      statusElement.style.clip = 'rect( 1px, 1px, 1px, 1px )';\r\n      statusElement.classList.add('aria-status');\r\n      statusElement.setAttribute('aria-live', 'polite');\r\n      statusElement.setAttribute('aria-atomic', 'true');\r\n      dom.wrapper.appendChild(statusElement);\r\n    }\r\n    return statusElement;\r\n  }\r\n\r\n  /**\r\n   * Announces the given text to screen readers.\r\n   */\r\n  function announceStatus(value) {\r\n    dom.statusElement.textContent = value;\r\n  }\r\n\r\n  /**\r\n   * Converts the given HTML element into a string of text\r\n   * that can be announced to a screen reader. Hidden\r\n   * elements are excluded.\r\n   */\r\n  function getStatusText(node) {\r\n    let text = '';\r\n\r\n    // Text node\r\n    if (node.nodeType === 3) {\r\n      text += node.textContent;\r\n    }\r\n    // Element node\r\n    else if (node.nodeType === 1) {\r\n      let isAriaHidden = node.getAttribute('aria-hidden');\r\n      let isDisplayHidden = window.getComputedStyle(node)['display'] === 'none';\r\n      if (isAriaHidden !== 'true' && !isDisplayHidden) {\r\n        Array.from(node.childNodes).forEach((child) => {\r\n          text += getStatusText(child);\r\n        });\r\n      }\r\n    }\r\n\r\n    text = text.trim();\r\n\r\n    return text === '' ? '' : text + ' ';\r\n  }\r\n\r\n  /**\r\n   * This is an unfortunate necessity. Some actions – such as\r\n   * an input field being focused in an iframe or using the\r\n   * keyboard to expand text selection beyond the bounds of\r\n   * a slide – can trigger our content to be pushed out of view.\r\n   * This scrolling can not be prevented by hiding overflow in\r\n   * CSS (we already do) so we have to resort to repeatedly\r\n   * checking if the slides have been offset :(\r\n   */\r\n  function setupScrollPrevention() {\r\n    setInterval(() => {\r\n      if (dom.wrapper.scrollTop !== 0 || dom.wrapper.scrollLeft !== 0) {\r\n        dom.wrapper.scrollTop = 0;\r\n        dom.wrapper.scrollLeft = 0;\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  /**\r\n   * After entering fullscreen we need to force a layout to\r\n   * get our presentations to scale correctly. This behavior\r\n   * is inconsistent across browsers but a force layout seems\r\n   * to normalize it.\r\n   */\r\n  function setupFullscreen() {\r\n    document.addEventListener('fullscreenchange', onFullscreenChange);\r\n    document.addEventListener('webkitfullscreenchange', onFullscreenChange);\r\n  }\r\n\r\n  /**\r\n   * Registers a listener to postMessage events, this makes it\r\n   * possible to call all reveal.js API methods from another\r\n   * window. For example:\r\n   *\r\n   * revealWindow.postMessage( JSON.stringify({\r\n   *   method: 'slide',\r\n   *   args: [ 2 ]\r\n   * }), '*' );\r\n   */\r\n  function setupPostMessage() {\r\n    if (config.postMessage) {\r\n      window.addEventListener('message', onPostMessage, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies the configuration settings from the config\r\n   * object. May be called multiple times.\r\n   *\r\n   * @param {object} options\r\n   */\r\n  function configure(options) {\r\n    const oldConfig = { ...config };\r\n\r\n    // New config options may be passed when this method\r\n    // is invoked through the API after initialization\r\n    if (typeof options === 'object') Util.extend(config, options);\r\n\r\n    // Abort if reveal.js hasn't finished loading, config\r\n    // changes will be applied automatically once ready\r\n    if (Reveal.isReady() === false) return;\r\n\r\n    const numberOfSlides = dom.wrapper.querySelectorAll(SLIDES_SELECTOR).length;\r\n\r\n    // The transition is added as a class on the .reveal element\r\n    dom.wrapper.classList.remove(oldConfig.transition);\r\n    dom.wrapper.classList.add(config.transition);\r\n\r\n    dom.wrapper.setAttribute('data-transition-speed', config.transitionSpeed);\r\n    dom.wrapper.setAttribute(\r\n      'data-background-transition',\r\n      config.backgroundTransition\r\n    );\r\n\r\n    // Expose our configured slide dimensions as custom props\r\n    dom.viewport.style.setProperty('--slide-width', config.width + 'px');\r\n    dom.viewport.style.setProperty('--slide-height', config.height + 'px');\r\n\r\n    if (config.shuffle) {\r\n      shuffle();\r\n    }\r\n\r\n    Util.toggleClass(dom.wrapper, 'embedded', config.embedded);\r\n    Util.toggleClass(dom.wrapper, 'rtl', config.rtl);\r\n    Util.toggleClass(dom.wrapper, 'center', config.center);\r\n\r\n    // Exit the paused mode if it was configured off\r\n    if (config.pause === false) {\r\n      resume();\r\n    }\r\n\r\n    // Iframe link previews\r\n    if (config.previewLinks) {\r\n      enablePreviewLinks();\r\n      disablePreviewLinks('[data-preview-link=false]');\r\n    } else {\r\n      disablePreviewLinks();\r\n      enablePreviewLinks('[data-preview-link]:not([data-preview-link=false])');\r\n    }\r\n\r\n    // Reset all changes made by auto-animations\r\n    autoAnimate.reset();\r\n\r\n    // Remove existing auto-slide controls\r\n    if (autoSlidePlayer) {\r\n      autoSlidePlayer.destroy();\r\n      autoSlidePlayer = null;\r\n    }\r\n\r\n    // Generate auto-slide controls if needed\r\n    if (numberOfSlides > 1 && config.autoSlide && config.autoSlideStoppable) {\r\n      autoSlidePlayer = new Playback(dom.wrapper, () => {\r\n        return Math.min(\r\n          Math.max((Date.now() - autoSlideStartTime) / autoSlide, 0),\r\n          1\r\n        );\r\n      });\r\n\r\n      autoSlidePlayer.on('click', onAutoSlidePlayerClick);\r\n      autoSlidePaused = false;\r\n    }\r\n\r\n    // Add the navigation mode to the DOM so we can adjust styling\r\n    if (config.navigationMode !== 'default') {\r\n      dom.wrapper.setAttribute('data-navigation-mode', config.navigationMode);\r\n    } else {\r\n      dom.wrapper.removeAttribute('data-navigation-mode');\r\n    }\r\n\r\n    notes.configure(config, oldConfig);\r\n    focus.configure(config, oldConfig);\r\n    pointer.configure(config, oldConfig);\r\n    controls.configure(config, oldConfig);\r\n    progress.configure(config, oldConfig);\r\n    keyboard.configure(config, oldConfig);\r\n    fragments.configure(config, oldConfig);\r\n    slideNumber.configure(config, oldConfig);\r\n\r\n    sync();\r\n  }\r\n\r\n  /**\r\n   * Binds all event listeners.\r\n   */\r\n  function addEventListeners() {\r\n    eventsAreBound = true;\r\n\r\n    window.addEventListener('resize', onWindowResize, false);\r\n\r\n    if (config.touch) touch.bind();\r\n    if (config.keyboard) keyboard.bind();\r\n    if (config.progress) progress.bind();\r\n    if (config.respondToHashChanges) location.bind();\r\n    controls.bind();\r\n    focus.bind();\r\n\r\n    dom.slides.addEventListener('click', onSlidesClicked, false);\r\n    dom.slides.addEventListener('transitionend', onTransitionEnd, false);\r\n    dom.pauseOverlay.addEventListener('click', resume, false);\r\n\r\n    if (config.focusBodyOnPageVisibilityChange) {\r\n      document.addEventListener(\r\n        'visibilitychange',\r\n        onPageVisibilityChange,\r\n        false\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unbinds all event listeners.\r\n   */\r\n  function removeEventListeners() {\r\n    eventsAreBound = false;\r\n\r\n    touch.unbind();\r\n    focus.unbind();\r\n    keyboard.unbind();\r\n    controls.unbind();\r\n    progress.unbind();\r\n    location.unbind();\r\n\r\n    window.removeEventListener('resize', onWindowResize, false);\r\n\r\n    dom.slides.removeEventListener('click', onSlidesClicked, false);\r\n    dom.slides.removeEventListener('transitionend', onTransitionEnd, false);\r\n    dom.pauseOverlay.removeEventListener('click', resume, false);\r\n  }\r\n\r\n  /**\r\n   * Uninitializes reveal.js by undoing changes made to the\r\n   * DOM and removing all event listeners.\r\n   */\r\n  function destroy() {\r\n    removeEventListeners();\r\n    cancelAutoSlide();\r\n    disablePreviewLinks();\r\n\r\n    // Destroy controllers\r\n    notes.destroy();\r\n    focus.destroy();\r\n    plugins.destroy();\r\n    pointer.destroy();\r\n    controls.destroy();\r\n    progress.destroy();\r\n    backgrounds.destroy();\r\n    slideNumber.destroy();\r\n\r\n    // Remove event listeners\r\n    document.removeEventListener('fullscreenchange', onFullscreenChange);\r\n    document.removeEventListener('webkitfullscreenchange', onFullscreenChange);\r\n    document.removeEventListener(\r\n      'visibilitychange',\r\n      onPageVisibilityChange,\r\n      false\r\n    );\r\n    window.removeEventListener('message', onPostMessage, false);\r\n    window.removeEventListener('load', layout, false);\r\n\r\n    // Undo DOM changes\r\n    if (dom.pauseOverlay) dom.pauseOverlay.remove();\r\n    if (dom.statusElement) dom.statusElement.remove();\r\n\r\n    document.documentElement.classList.remove('reveal-full-page');\r\n\r\n    dom.wrapper.classList.remove(\r\n      'ready',\r\n      'center',\r\n      'has-horizontal-slides',\r\n      'has-vertical-slides'\r\n    );\r\n    dom.wrapper.removeAttribute('data-transition-speed');\r\n    dom.wrapper.removeAttribute('data-background-transition');\r\n\r\n    dom.viewport.classList.remove('reveal-viewport');\r\n    dom.viewport.style.removeProperty('--slide-width');\r\n    dom.viewport.style.removeProperty('--slide-height');\r\n\r\n    dom.slides.style.removeProperty('width');\r\n    dom.slides.style.removeProperty('height');\r\n    dom.slides.style.removeProperty('zoom');\r\n    dom.slides.style.removeProperty('left');\r\n    dom.slides.style.removeProperty('top');\r\n    dom.slides.style.removeProperty('bottom');\r\n    dom.slides.style.removeProperty('right');\r\n    dom.slides.style.removeProperty('transform');\r\n\r\n    Array.from(dom.wrapper.querySelectorAll(SLIDES_SELECTOR)).forEach(\r\n      (slide) => {\r\n        slide.style.removeProperty('display');\r\n        slide.style.removeProperty('top');\r\n        slide.removeAttribute('hidden');\r\n        slide.removeAttribute('aria-hidden');\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds a listener to one of our custom reveal.js events,\r\n   * like slidechanged.\r\n   */\r\n  function on(type, listener, useCapture) {\r\n    revealElement.addEventListener(type, listener, useCapture);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes from a reveal.js event.\r\n   */\r\n  function off(type, listener, useCapture) {\r\n    revealElement.removeEventListener(type, listener, useCapture);\r\n  }\r\n\r\n  /**\r\n   * Applies CSS transforms to the slides container. The container\r\n   * is transformed from two separate sources: layout and the overview\r\n   * mode.\r\n   *\r\n   * @param {object} transforms\r\n   */\r\n  function transformSlides(transforms) {\r\n    // Pick up new transforms from arguments\r\n    if (typeof transforms.layout === 'string')\r\n      slidesTransform.layout = transforms.layout;\r\n    if (typeof transforms.overview === 'string')\r\n      slidesTransform.overview = transforms.overview;\r\n\r\n    // Apply the transforms to the slides container\r\n    if (slidesTransform.layout) {\r\n      Util.transformElement(\r\n        dom.slides,\r\n        slidesTransform.layout + ' ' + slidesTransform.overview\r\n      );\r\n    } else {\r\n      Util.transformElement(dom.slides, slidesTransform.overview);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispatches an event of the specified type from the\r\n   * reveal DOM element.\r\n   */\r\n  function dispatchEvent({ target = dom.wrapper, type, data, bubbles = true }) {\r\n    let event = document.createEvent('HTMLEvents', 1, 2);\r\n    event.initEvent(type, bubbles, true);\r\n    Util.extend(event, data);\r\n    target.dispatchEvent(event);\r\n\r\n    if (target === dom.wrapper) {\r\n      // If we're in an iframe, post each reveal.js event to the\r\n      // parent window. Used by the notes plugin\r\n      dispatchPostMessage(type);\r\n    }\r\n\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * Dispatched a postMessage of the given type from our window.\r\n   */\r\n  function dispatchPostMessage(type, data) {\r\n    if (config.postMessageEvents && window.parent !== window.self) {\r\n      let message = {\r\n        namespace: 'reveal',\r\n        eventName: type,\r\n        state: getState(),\r\n      };\r\n\r\n      Util.extend(message, data);\r\n\r\n      window.parent.postMessage(JSON.stringify(message), '*');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bind preview frame links.\r\n   *\r\n   * @param {string} [selector=a] - selector for anchors\r\n   */\r\n  function enablePreviewLinks(selector = 'a') {\r\n    Array.from(dom.wrapper.querySelectorAll(selector)).forEach((element) => {\r\n      if (/^(http|www)/gi.test(element.getAttribute('href'))) {\r\n        element.addEventListener('click', onPreviewLinkClicked, false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unbind preview frame links.\r\n   */\r\n  function disablePreviewLinks(selector = 'a') {\r\n    Array.from(dom.wrapper.querySelectorAll(selector)).forEach((element) => {\r\n      if (/^(http|www)/gi.test(element.getAttribute('href'))) {\r\n        element.removeEventListener('click', onPreviewLinkClicked, false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Opens a preview window for the target URL.\r\n   *\r\n   * @param {string} url - url for preview iframe src\r\n   */\r\n  function showPreview(url) {\r\n    closeOverlay();\r\n\r\n    dom.overlay = document.createElement('div');\r\n    dom.overlay.classList.add('overlay');\r\n    dom.overlay.classList.add('overlay-preview');\r\n    dom.wrapper.appendChild(dom.overlay);\r\n\r\n    dom.overlay.innerHTML = `<header>\r\n\t\t\t\t<a class=\"close\" href=\"#\"><span class=\"icon\"></span></a>\r\n\t\t\t\t<a class=\"external\" href=\"${url}\" target=\"_blank\"><span class=\"icon\"></span></a>\r\n\t\t\t</header>\r\n\t\t\t<div class=\"spinner\"></div>\r\n\t\t\t<div class=\"viewport\">\r\n\t\t\t\t<iframe src=\"${url}\"></iframe>\r\n\t\t\t\t<small class=\"viewport-inner\">\r\n\t\t\t\t\t<span class=\"x-frame-error\">Unable to load iframe. This is likely due to the site's policy (x-frame-options).</span>\r\n\t\t\t\t</small>\r\n\t\t\t</div>`;\r\n\r\n    dom.overlay.querySelector('iframe').addEventListener(\r\n      'load',\r\n      (event) => {\r\n        dom.overlay.classList.add('loaded');\r\n      },\r\n      false\r\n    );\r\n\r\n    dom.overlay.querySelector('.close').addEventListener(\r\n      'click',\r\n      (event) => {\r\n        closeOverlay();\r\n        event.preventDefault();\r\n      },\r\n      false\r\n    );\r\n\r\n    dom.overlay.querySelector('.external').addEventListener(\r\n      'click',\r\n      (event) => {\r\n        closeOverlay();\r\n      },\r\n      false\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Open or close help overlay window.\r\n   *\r\n   * @param {Boolean} [override] Flag which overrides the\r\n   * toggle logic and forcibly sets the desired state. True means\r\n   * help is open, false means it's closed.\r\n   */\r\n  function toggleHelp(override) {\r\n    if (typeof override === 'boolean') {\r\n      override ? showHelp() : closeOverlay();\r\n    } else {\r\n      if (dom.overlay) {\r\n        closeOverlay();\r\n      } else {\r\n        showHelp();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens an overlay window with help material.\r\n   */\r\n  function showHelp() {\r\n    if (config.help) {\r\n      closeOverlay();\r\n\r\n      dom.overlay = document.createElement('div');\r\n      dom.overlay.classList.add('overlay');\r\n      dom.overlay.classList.add('overlay-help');\r\n      dom.wrapper.appendChild(dom.overlay);\r\n\r\n      let html = '<p class=\"title\">Keyboard Shortcuts</p><br/>';\r\n\r\n      let shortcuts = keyboard.getShortcuts(),\r\n        bindings = keyboard.getBindings();\r\n\r\n      html += '<table><th>KEY</th><th>ACTION</th>';\r\n      for (let key in shortcuts) {\r\n        html += `<tr><td>${key}</td><td>${shortcuts[key]}</td></tr>`;\r\n      }\r\n\r\n      // Add custom key bindings that have associated descriptions\r\n      for (let binding in bindings) {\r\n        if (bindings[binding].key && bindings[binding].description) {\r\n          html += `<tr><td>${bindings[binding].key}</td><td>${bindings[binding].description}</td></tr>`;\r\n        }\r\n      }\r\n\r\n      html += '</table>';\r\n\r\n      dom.overlay.innerHTML = `\r\n\t\t\t\t<header>\r\n\t\t\t\t\t<a class=\"close\" href=\"#\"><span class=\"icon\"></span></a>\r\n\t\t\t\t</header>\r\n\t\t\t\t<div class=\"viewport\">\r\n\t\t\t\t\t<div class=\"viewport-inner\">${html}</div>\r\n\t\t\t\t</div>\r\n\t\t\t`;\r\n\r\n      dom.overlay.querySelector('.close').addEventListener(\r\n        'click',\r\n        (event) => {\r\n          closeOverlay();\r\n          event.preventDefault();\r\n        },\r\n        false\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes any currently open overlay.\r\n   */\r\n  function closeOverlay() {\r\n    if (dom.overlay) {\r\n      dom.overlay.parentNode.removeChild(dom.overlay);\r\n      dom.overlay = null;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Applies JavaScript-controlled layout rules to the\r\n   * presentation.\r\n   */\r\n  function layout() {\r\n    if (dom.wrapper && !print.isPrintingPDF()) {\r\n      if (!config.disableLayout) {\r\n        // On some mobile devices '100vh' is taller than the visible\r\n        // viewport which leads to part of the presentation being\r\n        // cut off. To work around this we define our own '--vh' custom\r\n        // property where 100x adds up to the correct height.\r\n        //\r\n        // https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\r\n        if (Device.isMobile && !config.embedded) {\r\n          document.documentElement.style.setProperty(\r\n            '--vh',\r\n            window.innerHeight * 0.01 + 'px'\r\n          );\r\n        }\r\n\r\n        const size = getComputedSlideSize();\r\n\r\n        const oldScale = scale;\r\n\r\n        // Layout the contents of the slides\r\n        layoutSlideContents(config.width, config.height);\r\n\r\n        dom.slides.style.width = size.width + 'px';\r\n        dom.slides.style.height = size.height + 'px';\r\n\r\n        // Determine scale of content to fit within available space\r\n        scale = Math.min(\r\n          size.presentationWidth / size.width,\r\n          size.presentationHeight / size.height\r\n        );\r\n\r\n        // Respect max/min scale settings\r\n        scale = Math.max(scale, config.minScale);\r\n        scale = Math.min(scale, config.maxScale);\r\n\r\n        // Don't apply any scaling styles if scale is 1\r\n        if (scale === 1) {\r\n          dom.slides.style.zoom = '';\r\n          dom.slides.style.left = '';\r\n          dom.slides.style.top = '';\r\n          dom.slides.style.bottom = '';\r\n          dom.slides.style.right = '';\r\n          transformSlides({ layout: '' });\r\n        } else {\r\n          dom.slides.style.zoom = '';\r\n          dom.slides.style.left = '50%';\r\n          dom.slides.style.top = '50%';\r\n          dom.slides.style.bottom = 'auto';\r\n          dom.slides.style.right = 'auto';\r\n          transformSlides({\r\n            layout: 'translate(-50%, -50%) scale(' + scale + ')',\r\n          });\r\n        }\r\n\r\n        // Select all slides, vertical and horizontal\r\n        const slides = Array.from(\r\n          dom.wrapper.querySelectorAll(SLIDES_SELECTOR)\r\n        );\r\n\r\n        for (let i = 0, len = slides.length; i < len; i++) {\r\n          const slide = slides[i];\r\n\r\n          // Don't bother updating invisible slides\r\n          if (slide.style.display === 'none') {\r\n            continue;\r\n          }\r\n\r\n          if (config.center || slide.classList.contains('center')) {\r\n            // Vertical stacks are not centred since their section\r\n            // children will be\r\n            if (slide.classList.contains('stack')) {\r\n              slide.style.top = 0;\r\n            } else {\r\n              slide.style.top =\r\n                Math.max((size.height - slide.scrollHeight) / 2, 0) + 'px';\r\n            }\r\n          } else {\r\n            slide.style.top = '';\r\n          }\r\n        }\r\n\r\n        if (oldScale !== scale) {\r\n          dispatchEvent({\r\n            type: 'resize',\r\n            data: {\r\n              oldScale,\r\n              scale,\r\n              size,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      dom.viewport.style.setProperty('--slide-scale', scale);\r\n\r\n      progress.update();\r\n      backgrounds.updateParallax();\r\n\r\n      if (overview.isActive()) {\r\n        overview.update();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies layout logic to the contents of all slides in\r\n   * the presentation.\r\n   *\r\n   * @param {string|number} width\r\n   * @param {string|number} height\r\n   */\r\n  function layoutSlideContents(width, height) {\r\n    // Handle sizing of elements with the 'r-stretch' class\r\n    Util.queryAll(\r\n      dom.slides,\r\n      'section > .stretch, section > .r-stretch'\r\n    ).forEach((element) => {\r\n      // Determine how much vertical space we can use\r\n      let remainingHeight = Util.getRemainingHeight(element, height);\r\n\r\n      // Consider the aspect ratio of media elements\r\n      if (/(img|video)/gi.test(element.nodeName)) {\r\n        const nw = element.naturalWidth || element.videoWidth,\r\n          nh = element.naturalHeight || element.videoHeight;\r\n\r\n        const es = Math.min(width / nw, remainingHeight / nh);\r\n\r\n        element.style.width = nw * es + 'px';\r\n        element.style.height = nh * es + 'px';\r\n      } else {\r\n        element.style.width = width + 'px';\r\n        element.style.height = remainingHeight + 'px';\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculates the computed pixel size of our slides. These\r\n   * values are based on the width and height configuration\r\n   * options.\r\n   *\r\n   * @param {number} [presentationWidth=dom.wrapper.offsetWidth]\r\n   * @param {number} [presentationHeight=dom.wrapper.offsetHeight]\r\n   */\r\n  function getComputedSlideSize(presentationWidth, presentationHeight) {\r\n    const size = {\r\n      // Slide size\r\n      width: config.width,\r\n      height: config.height,\r\n\r\n      // Presentation size\r\n      presentationWidth: presentationWidth || dom.wrapper.offsetWidth,\r\n      presentationHeight: presentationHeight || dom.wrapper.offsetHeight,\r\n    };\r\n\r\n    // Reduce available space by margin\r\n    size.presentationWidth -= size.presentationWidth * config.margin;\r\n    size.presentationHeight -= size.presentationHeight * config.margin;\r\n\r\n    // Slide width may be a percentage of available width\r\n    if (typeof size.width === 'string' && /%$/.test(size.width)) {\r\n      size.width = (parseInt(size.width, 10) / 100) * size.presentationWidth;\r\n    }\r\n\r\n    // Slide height may be a percentage of available height\r\n    if (typeof size.height === 'string' && /%$/.test(size.height)) {\r\n      size.height = (parseInt(size.height, 10) / 100) * size.presentationHeight;\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Stores the vertical index of a stack so that the same\r\n   * vertical slide can be selected when navigating to and\r\n   * from the stack.\r\n   *\r\n   * @param {HTMLElement} stack The vertical stack element\r\n   * @param {string|number} [v=0] Index to memorize\r\n   */\r\n  function setPreviousVerticalIndex(stack, v) {\r\n    if (typeof stack === 'object' && typeof stack.setAttribute === 'function') {\r\n      stack.setAttribute('data-previous-indexv', v || 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the vertical index which was stored using\r\n   * #setPreviousVerticalIndex() or 0 if no previous index\r\n   * exists.\r\n   *\r\n   * @param {HTMLElement} stack The vertical stack element\r\n   */\r\n  function getPreviousVerticalIndex(stack) {\r\n    if (\r\n      typeof stack === 'object' &&\r\n      typeof stack.setAttribute === 'function' &&\r\n      stack.classList.contains('stack')\r\n    ) {\r\n      // Prefer manually defined start-indexv\r\n      const attributeName = stack.hasAttribute('data-start-indexv')\r\n        ? 'data-start-indexv'\r\n        : 'data-previous-indexv';\r\n\r\n      return parseInt(stack.getAttribute(attributeName) || 0, 10);\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if the current or specified slide is vertical\r\n   * (nested within another slide).\r\n   *\r\n   * @param {HTMLElement} [slide=currentSlide] The slide to check\r\n   * orientation of\r\n   * @return {Boolean}\r\n   */\r\n  function isVerticalSlide(slide = currentSlide) {\r\n    return (\r\n      slide && slide.parentNode && !!slide.parentNode.nodeName.match(/section/i)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns true if we're on the last slide in the current\r\n   * vertical stack.\r\n   */\r\n  function isLastVerticalSlide() {\r\n    if (currentSlide && isVerticalSlide(currentSlide)) {\r\n      // Does this slide have a next sibling?\r\n      if (currentSlide.nextElementSibling) return false;\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns true if we're currently on the first slide in\r\n   * the presentation.\r\n   */\r\n  function isFirstSlide() {\r\n    return indexh === 0 && indexv === 0;\r\n  }\r\n\r\n  /**\r\n   * Returns true if we're currently on the last slide in\r\n   * the presenation. If the last slide is a stack, we only\r\n   * consider this the last slide if it's at the end of the\r\n   * stack.\r\n   */\r\n  function isLastSlide() {\r\n    if (currentSlide) {\r\n      // Does this slide have a next sibling?\r\n      if (currentSlide.nextElementSibling) return false;\r\n\r\n      // If it's vertical, does its parent have a next sibling?\r\n      if (\r\n        isVerticalSlide(currentSlide) &&\r\n        currentSlide.parentNode.nextElementSibling\r\n      )\r\n        return false;\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Enters the paused mode which fades everything on screen to\r\n   * black.\r\n   */\r\n  function pause() {\r\n    if (config.pause) {\r\n      const wasPaused = dom.wrapper.classList.contains('paused');\r\n\r\n      cancelAutoSlide();\r\n      dom.wrapper.classList.add('paused');\r\n\r\n      if (wasPaused === false) {\r\n        dispatchEvent({ type: 'paused' });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Exits from the paused mode.\r\n   */\r\n  function resume() {\r\n    const wasPaused = dom.wrapper.classList.contains('paused');\r\n    dom.wrapper.classList.remove('paused');\r\n\r\n    cueAutoSlide();\r\n\r\n    if (wasPaused) {\r\n      dispatchEvent({ type: 'resumed' });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the paused mode on and off.\r\n   */\r\n  function togglePause(override) {\r\n    if (typeof override === 'boolean') {\r\n      override ? pause() : resume();\r\n    } else {\r\n      isPaused() ? resume() : pause();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if we are currently in the paused mode.\r\n   *\r\n   * @return {Boolean}\r\n   */\r\n  function isPaused() {\r\n    return dom.wrapper.classList.contains('paused');\r\n  }\r\n\r\n  /**\r\n   * Toggles the auto slide mode on and off.\r\n   *\r\n   * @param {Boolean} [override] Flag which sets the desired state.\r\n   * True means autoplay starts, false means it stops.\r\n   */\r\n\r\n  function toggleAutoSlide(override) {\r\n    if (typeof override === 'boolean') {\r\n      override ? resumeAutoSlide() : pauseAutoSlide();\r\n    } else {\r\n      autoSlidePaused ? resumeAutoSlide() : pauseAutoSlide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the auto slide mode is currently on.\r\n   *\r\n   * @return {Boolean}\r\n   */\r\n  function isAutoSliding() {\r\n    return !!(autoSlide && !autoSlidePaused);\r\n  }\r\n\r\n  /**\r\n   * Steps from the current point in the presentation to the\r\n   * slide which matches the specified horizontal and vertical\r\n   * indices.\r\n   *\r\n   * @param {number} [h=indexh] Horizontal index of the target slide\r\n   * @param {number} [v=indexv] Vertical index of the target slide\r\n   * @param {number} [f] Index of a fragment within the\r\n   * target slide to activate\r\n   * @param {number} [origin] Origin for use in multimaster environments\r\n   */\r\n  function slide(h, v, f, origin) {\r\n    // Dispatch an event before hte slide\r\n    const slidechange = dispatchEvent({\r\n      type: 'beforeslidechange',\r\n      data: {\r\n        indexh: h === undefined ? indexh : h,\r\n        indexv: v === undefined ? indexv : v,\r\n        origin,\r\n      },\r\n    });\r\n\r\n    // Abort if this slide change was prevented by an event listener\r\n    if (slidechange.defaultPrevented) return;\r\n\r\n    // Remember where we were at before\r\n    previousSlide = currentSlide;\r\n\r\n    // Query all horizontal slides in the deck\r\n    const horizontalSlides = dom.wrapper.querySelectorAll(\r\n      HORIZONTAL_SLIDES_SELECTOR\r\n    );\r\n\r\n    // Abort if there are no slides\r\n    if (horizontalSlides.length === 0) return;\r\n\r\n    // If no vertical index is specified and the upcoming slide is a\r\n    // stack, resume at its previous vertical index\r\n    if (v === undefined && !overview.isActive()) {\r\n      v = getPreviousVerticalIndex(horizontalSlides[h]);\r\n    }\r\n\r\n    // If we were on a vertical stack, remember what vertical index\r\n    // it was on so we can resume at the same position when returning\r\n    if (\r\n      previousSlide &&\r\n      previousSlide.parentNode &&\r\n      previousSlide.parentNode.classList.contains('stack')\r\n    ) {\r\n      setPreviousVerticalIndex(previousSlide.parentNode, indexv);\r\n    }\r\n\r\n    // Remember the state before this slide\r\n    const stateBefore = state.concat();\r\n\r\n    // Reset the state array\r\n    state.length = 0;\r\n\r\n    let indexhBefore = indexh || 0,\r\n      indexvBefore = indexv || 0;\r\n\r\n    // Activate and transition to the new slide\r\n    indexh = updateSlides(\r\n      HORIZONTAL_SLIDES_SELECTOR,\r\n      h === undefined ? indexh : h\r\n    );\r\n    indexv = updateSlides(\r\n      VERTICAL_SLIDES_SELECTOR,\r\n      v === undefined ? indexv : v\r\n    );\r\n\r\n    // Dispatch an event if the slide changed\r\n    let slideChanged = indexh !== indexhBefore || indexv !== indexvBefore;\r\n\r\n    // Ensure that the previous slide is never the same as the current\r\n    if (!slideChanged) previousSlide = null;\r\n\r\n    // Find the current horizontal slide and any possible vertical slides\r\n    // within it\r\n    let currentHorizontalSlide = horizontalSlides[indexh],\r\n      currentVerticalSlides =\r\n        currentHorizontalSlide.querySelectorAll('section');\r\n\r\n    // Store references to the previous and current slides\r\n    currentSlide = currentVerticalSlides[indexv] || currentHorizontalSlide;\r\n\r\n    let autoAnimateTransition = false;\r\n\r\n    // Detect if we're moving between two auto-animated slides\r\n    if (slideChanged && previousSlide && currentSlide && !overview.isActive()) {\r\n      // If this is an auto-animated transition, we disable the\r\n      // regular slide transition\r\n      //\r\n      // Note 20-03-2020:\r\n      // This needs to happen before we update slide visibility,\r\n      // otherwise transitions will still run in Safari.\r\n      if (\r\n        previousSlide.hasAttribute('data-auto-animate') &&\r\n        currentSlide.hasAttribute('data-auto-animate') &&\r\n        previousSlide.getAttribute('data-auto-animate-id') ===\r\n          currentSlide.getAttribute('data-auto-animate-id') &&\r\n        !(\r\n          indexh > indexhBefore || indexv > indexvBefore\r\n            ? currentSlide\r\n            : previousSlide\r\n        ).hasAttribute('data-auto-animate-restart')\r\n      ) {\r\n        autoAnimateTransition = true;\r\n        dom.slides.classList.add('disable-slide-transitions');\r\n      }\r\n\r\n      transition = 'running';\r\n    }\r\n\r\n    // Update the visibility of slides now that the indices have changed\r\n    updateSlidesVisibility();\r\n\r\n    layout();\r\n\r\n    // Update the overview if it's currently active\r\n    if (overview.isActive()) {\r\n      overview.update();\r\n    }\r\n\r\n    // Show fragment, if specified\r\n    if (typeof f !== 'undefined') {\r\n      fragments.goto(f);\r\n    }\r\n\r\n    // Solves an edge case where the previous slide maintains the\r\n    // 'present' class when navigating between adjacent vertical\r\n    // stacks\r\n    if (previousSlide && previousSlide !== currentSlide) {\r\n      previousSlide.classList.remove('present');\r\n      previousSlide.setAttribute('aria-hidden', 'true');\r\n\r\n      // Reset all slides upon navigate to home\r\n      if (isFirstSlide()) {\r\n        // Launch async task\r\n        setTimeout(() => {\r\n          getVerticalStacks().forEach((slide) => {\r\n            setPreviousVerticalIndex(slide, 0);\r\n          });\r\n        }, 0);\r\n      }\r\n    }\r\n\r\n    // Apply the new state\r\n    stateLoop: for (let i = 0, len = state.length; i < len; i++) {\r\n      // Check if this state existed on the previous slide. If it\r\n      // did, we will avoid adding it repeatedly\r\n      for (let j = 0; j < stateBefore.length; j++) {\r\n        if (stateBefore[j] === state[i]) {\r\n          stateBefore.splice(j, 1);\r\n          continue stateLoop;\r\n        }\r\n      }\r\n\r\n      dom.viewport.classList.add(state[i]);\r\n\r\n      // Dispatch custom event matching the state's name\r\n      dispatchEvent({ type: state[i] });\r\n    }\r\n\r\n    // Clean up the remains of the previous state\r\n    while (stateBefore.length) {\r\n      dom.viewport.classList.remove(stateBefore.pop());\r\n    }\r\n\r\n    if (slideChanged) {\r\n      dispatchEvent({\r\n        type: 'slidechanged',\r\n        data: {\r\n          indexh,\r\n          indexv,\r\n          previousSlide,\r\n          currentSlide,\r\n          origin,\r\n        },\r\n      });\r\n    }\r\n\r\n    // Handle embedded content\r\n    if (slideChanged || !previousSlide) {\r\n      slideContent.stopEmbeddedContent(previousSlide);\r\n      slideContent.startEmbeddedContent(currentSlide);\r\n    }\r\n\r\n    // Announce the current slide contents to screen readers\r\n    // Use animation frame to prevent getComputedStyle in getStatusText\r\n    // from triggering layout mid-frame\r\n    requestAnimationFrame(() => {\r\n      announceStatus(getStatusText(currentSlide));\r\n    });\r\n\r\n    progress.update();\r\n    controls.update();\r\n    notes.update();\r\n    backgrounds.update();\r\n    backgrounds.updateParallax();\r\n    slideNumber.update();\r\n    fragments.update();\r\n\r\n    // Update the URL hash\r\n    location.writeURL();\r\n\r\n    cueAutoSlide();\r\n\r\n    // Auto-animation\r\n    if (autoAnimateTransition) {\r\n      setTimeout(() => {\r\n        dom.slides.classList.remove('disable-slide-transitions');\r\n      }, 0);\r\n\r\n      if (config.autoAnimate) {\r\n        // Run the auto-animation between our slides\r\n        autoAnimate.run(previousSlide, currentSlide);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Syncs the presentation with the current DOM. Useful\r\n   * when new slides or control elements are added or when\r\n   * the configuration has changed.\r\n   */\r\n  function sync() {\r\n    // Subscribe to input\r\n    removeEventListeners();\r\n    addEventListeners();\r\n\r\n    // Force a layout to make sure the current config is accounted for\r\n    layout();\r\n\r\n    // Reflect the current autoSlide value\r\n    autoSlide = config.autoSlide;\r\n\r\n    // Start auto-sliding if it's enabled\r\n    cueAutoSlide();\r\n\r\n    // Re-create all slide backgrounds\r\n    backgrounds.create();\r\n\r\n    // Write the current hash to the URL\r\n    location.writeURL();\r\n\r\n    fragments.sortAll();\r\n\r\n    controls.update();\r\n    progress.update();\r\n\r\n    updateSlidesVisibility();\r\n\r\n    notes.update();\r\n    notes.updateVisibility();\r\n    backgrounds.update(true);\r\n    slideNumber.update();\r\n    slideContent.formatEmbeddedContent();\r\n\r\n    // Start or stop embedded content depending on global config\r\n    if (config.autoPlayMedia === false) {\r\n      slideContent.stopEmbeddedContent(currentSlide, { unloadIframes: false });\r\n    } else {\r\n      slideContent.startEmbeddedContent(currentSlide);\r\n    }\r\n\r\n    if (overview.isActive()) {\r\n      overview.layout();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates reveal.js to keep in sync with new slide attributes. For\r\n   * example, if you add a new `data-background-image` you can call\r\n   * this to have reveal.js render the new background image.\r\n   *\r\n   * Similar to #sync() but more efficient when you only need to\r\n   * refresh a specific slide.\r\n   *\r\n   * @param {HTMLElement} slide\r\n   */\r\n  function syncSlide(slide = currentSlide) {\r\n    backgrounds.sync(slide);\r\n    fragments.sync(slide);\r\n\r\n    slideContent.load(slide);\r\n\r\n    backgrounds.update();\r\n    notes.update();\r\n  }\r\n\r\n  /**\r\n   * Resets all vertical slides so that only the first\r\n   * is visible.\r\n   */\r\n  function resetVerticalSlides() {\r\n    getHorizontalSlides().forEach((horizontalSlide) => {\r\n      Util.queryAll(horizontalSlide, 'section').forEach((verticalSlide, y) => {\r\n        if (y > 0) {\r\n          verticalSlide.classList.remove('present');\r\n          verticalSlide.classList.remove('past');\r\n          verticalSlide.classList.add('future');\r\n          verticalSlide.setAttribute('aria-hidden', 'true');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Randomly shuffles all slides in the deck.\r\n   */\r\n  function shuffle(slides = getHorizontalSlides()) {\r\n    slides.forEach((slide, i) => {\r\n      // Insert the slide next to a randomly picked sibling slide\r\n      // slide. This may cause the slide to insert before itself,\r\n      // but that's not an issue.\r\n      let beforeSlide = slides[Math.floor(Math.random() * slides.length)];\r\n      if (beforeSlide.parentNode === slide.parentNode) {\r\n        slide.parentNode.insertBefore(slide, beforeSlide);\r\n      }\r\n\r\n      // Randomize the order of vertical slides (if there are any)\r\n      let verticalSlides = slide.querySelectorAll('section');\r\n      if (verticalSlides.length) {\r\n        shuffle(verticalSlides);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates one dimension of slides by showing the slide\r\n   * with the specified index.\r\n   *\r\n   * @param {string} selector A CSS selector that will fetch\r\n   * the group of slides we are working with\r\n   * @param {number} index The index of the slide that should be\r\n   * shown\r\n   *\r\n   * @return {number} The index of the slide that is now shown,\r\n   * might differ from the passed in index if it was out of\r\n   * bounds.\r\n   */\r\n  function updateSlides(selector, index) {\r\n    // Select all slides and convert the NodeList result to\r\n    // an array\r\n    let slides = Util.queryAll(dom.wrapper, selector),\r\n      slidesLength = slides.length;\r\n\r\n    let printMode = print.isPrintingPDF();\r\n    let loopedForwards = false;\r\n    let loopedBackwards = false;\r\n\r\n    if (slidesLength) {\r\n      // Should the index loop?\r\n      if (config.loop) {\r\n        if (index >= slidesLength) loopedForwards = true;\r\n\r\n        index %= slidesLength;\r\n\r\n        if (index < 0) {\r\n          index = slidesLength + index;\r\n          loopedBackwards = true;\r\n        }\r\n      }\r\n\r\n      // Enforce max and minimum index bounds\r\n      index = Math.max(Math.min(index, slidesLength - 1), 0);\r\n\r\n      for (let i = 0; i < slidesLength; i++) {\r\n        let element = slides[i];\r\n\r\n        let reverse = config.rtl && !isVerticalSlide(element);\r\n\r\n        // Avoid .remove() with multiple args for IE11 support\r\n        element.classList.remove('past');\r\n        element.classList.remove('present');\r\n        element.classList.remove('future');\r\n\r\n        // http://www.w3.org/html/wg/drafts/html/master/editing.html#the-hidden-attribute\r\n        element.setAttribute('hidden', '');\r\n        element.setAttribute('aria-hidden', 'true');\r\n\r\n        // If this element contains vertical slides\r\n        if (element.querySelector('section')) {\r\n          element.classList.add('stack');\r\n        }\r\n\r\n        // If we're printing static slides, all slides are \"present\"\r\n        if (printMode) {\r\n          element.classList.add('present');\r\n          continue;\r\n        }\r\n\r\n        if (i < index) {\r\n          // Any element previous to index is given the 'past' class\r\n          element.classList.add(reverse ? 'future' : 'past');\r\n\r\n          if (config.fragments) {\r\n            // Show all fragments in prior slides\r\n            showFragmentsIn(element);\r\n          }\r\n        } else if (i > index) {\r\n          // Any element subsequent to index is given the 'future' class\r\n          element.classList.add(reverse ? 'past' : 'future');\r\n\r\n          if (config.fragments) {\r\n            // Hide all fragments in future slides\r\n            hideFragmentsIn(element);\r\n          }\r\n        }\r\n        // Update the visibility of fragments when a presentation loops\r\n        // in either direction\r\n        else if (i === index && config.fragments) {\r\n          if (loopedForwards) {\r\n            hideFragmentsIn(element);\r\n          } else if (loopedBackwards) {\r\n            showFragmentsIn(element);\r\n          }\r\n        }\r\n      }\r\n\r\n      let slide = slides[index];\r\n      let wasPresent = slide.classList.contains('present');\r\n\r\n      // Mark the current slide as present\r\n      slide.classList.add('present');\r\n      slide.removeAttribute('hidden');\r\n      slide.removeAttribute('aria-hidden');\r\n\r\n      if (!wasPresent) {\r\n        // Dispatch an event indicating the slide is now visible\r\n        dispatchEvent({\r\n          target: slide,\r\n          type: 'visible',\r\n          bubbles: false,\r\n        });\r\n      }\r\n\r\n      // If this slide has a state associated with it, add it\r\n      // onto the current state of the deck\r\n      let slideState = slide.getAttribute('data-state');\r\n      if (slideState) {\r\n        state = state.concat(slideState.split(' '));\r\n      }\r\n    } else {\r\n      // Since there are no slides we can't be anywhere beyond the\r\n      // zeroth index\r\n      index = 0;\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Shows all fragment elements within the given contaienr.\r\n   */\r\n  function showFragmentsIn(container) {\r\n    Util.queryAll(container, '.fragment').forEach((fragment) => {\r\n      fragment.classList.add('visible');\r\n      fragment.classList.remove('current-fragment');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Hides all fragment elements within the given contaienr.\r\n   */\r\n  function hideFragmentsIn(container) {\r\n    Util.queryAll(container, '.fragment.visible').forEach((fragment) => {\r\n      fragment.classList.remove('visible', 'current-fragment');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Optimization method; hide all slides that are far away\r\n   * from the present slide.\r\n   */\r\n  function updateSlidesVisibility() {\r\n    // Select all slides and convert the NodeList result to\r\n    // an array\r\n    let horizontalSlides = getHorizontalSlides(),\r\n      horizontalSlidesLength = horizontalSlides.length,\r\n      distanceX,\r\n      distanceY;\r\n\r\n    if (horizontalSlidesLength && typeof indexh !== 'undefined') {\r\n      // The number of steps away from the present slide that will\r\n      // be visible\r\n      let viewDistance = overview.isActive() ? 10 : config.viewDistance;\r\n\r\n      // Shorten the view distance on devices that typically have\r\n      // less resources\r\n      if (Device.isMobile) {\r\n        viewDistance = overview.isActive() ? 6 : config.mobileViewDistance;\r\n      }\r\n\r\n      // All slides need to be visible when exporting to PDF\r\n      if (print.isPrintingPDF()) {\r\n        viewDistance = Number.MAX_VALUE;\r\n      }\r\n\r\n      for (let x = 0; x < horizontalSlidesLength; x++) {\r\n        let horizontalSlide = horizontalSlides[x];\r\n\r\n        let verticalSlides = Util.queryAll(horizontalSlide, 'section'),\r\n          verticalSlidesLength = verticalSlides.length;\r\n\r\n        // Determine how far away this slide is from the present\r\n        distanceX = Math.abs((indexh || 0) - x) || 0;\r\n\r\n        // If the presentation is looped, distance should measure\r\n        // 1 between the first and last slides\r\n        if (config.loop) {\r\n          distanceX =\r\n            Math.abs(\r\n              ((indexh || 0) - x) % (horizontalSlidesLength - viewDistance)\r\n            ) || 0;\r\n        }\r\n\r\n        // Show the horizontal slide if it's within the view distance\r\n        if (distanceX < viewDistance) {\r\n          slideContent.load(horizontalSlide);\r\n        } else {\r\n          slideContent.unload(horizontalSlide);\r\n        }\r\n\r\n        if (verticalSlidesLength) {\r\n          let oy = getPreviousVerticalIndex(horizontalSlide);\r\n\r\n          for (let y = 0; y < verticalSlidesLength; y++) {\r\n            let verticalSlide = verticalSlides[y];\r\n\r\n            distanceY =\r\n              x === (indexh || 0)\r\n                ? Math.abs((indexv || 0) - y)\r\n                : Math.abs(y - oy);\r\n\r\n            if (distanceX + distanceY < viewDistance) {\r\n              slideContent.load(verticalSlide);\r\n            } else {\r\n              slideContent.unload(verticalSlide);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Flag if there are ANY vertical slides, anywhere in the deck\r\n      if (hasVerticalSlides()) {\r\n        dom.wrapper.classList.add('has-vertical-slides');\r\n      } else {\r\n        dom.wrapper.classList.remove('has-vertical-slides');\r\n      }\r\n\r\n      // Flag if there are ANY horizontal slides, anywhere in the deck\r\n      if (hasHorizontalSlides()) {\r\n        dom.wrapper.classList.add('has-horizontal-slides');\r\n      } else {\r\n        dom.wrapper.classList.remove('has-horizontal-slides');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine what available routes there are for navigation.\r\n   *\r\n   * @return {{left: boolean, right: boolean, up: boolean, down: boolean}}\r\n   */\r\n  function availableRoutes({ includeFragments = false } = {}) {\r\n    let horizontalSlides = dom.wrapper.querySelectorAll(\r\n        HORIZONTAL_SLIDES_SELECTOR\r\n      ),\r\n      verticalSlides = dom.wrapper.querySelectorAll(VERTICAL_SLIDES_SELECTOR);\r\n\r\n    let routes = {\r\n      left: indexh > 0,\r\n      right: indexh < horizontalSlides.length - 1,\r\n      up: indexv > 0,\r\n      down: indexv < verticalSlides.length - 1,\r\n    };\r\n\r\n    // Looped presentations can always be navigated as long as\r\n    // there are slides available\r\n    if (config.loop) {\r\n      if (horizontalSlides.length > 1) {\r\n        routes.left = true;\r\n        routes.right = true;\r\n      }\r\n\r\n      if (verticalSlides.length > 1) {\r\n        routes.up = true;\r\n        routes.down = true;\r\n      }\r\n    }\r\n\r\n    if (horizontalSlides.length > 1 && config.navigationMode === 'linear') {\r\n      routes.right = routes.right || routes.down;\r\n      routes.left = routes.left || routes.up;\r\n    }\r\n\r\n    // If includeFragments is set, a route will be considered\r\n    // availalbe if either a slid OR fragment is available in\r\n    // the given direction\r\n    if (includeFragments === true) {\r\n      let fragmentRoutes = fragments.availableRoutes();\r\n      routes.left = routes.left || fragmentRoutes.prev;\r\n      routes.up = routes.up || fragmentRoutes.prev;\r\n      routes.down = routes.down || fragmentRoutes.next;\r\n      routes.right = routes.right || fragmentRoutes.next;\r\n    }\r\n\r\n    // Reverse horizontal controls for rtl\r\n    if (config.rtl) {\r\n      let left = routes.left;\r\n      routes.left = routes.right;\r\n      routes.right = left;\r\n    }\r\n\r\n    return routes;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of past slides. This can be used as a global\r\n   * flattened index for slides.\r\n   *\r\n   * @param {HTMLElement} [slide=currentSlide] The slide we're counting before\r\n   *\r\n   * @return {number} Past slide count\r\n   */\r\n  function getSlidePastCount(slide = currentSlide) {\r\n    let horizontalSlides = getHorizontalSlides();\r\n\r\n    // The number of past slides\r\n    let pastCount = 0;\r\n\r\n    // Step through all slides and count the past ones\r\n    mainLoop: for (let i = 0; i < horizontalSlides.length; i++) {\r\n      let horizontalSlide = horizontalSlides[i];\r\n      let verticalSlides = horizontalSlide.querySelectorAll('section');\r\n\r\n      for (let j = 0; j < verticalSlides.length; j++) {\r\n        // Stop as soon as we arrive at the present\r\n        if (verticalSlides[j] === slide) {\r\n          break mainLoop;\r\n        }\r\n\r\n        // Don't count slides with the \"uncounted\" class\r\n        if (verticalSlides[j].dataset.visibility !== 'uncounted') {\r\n          pastCount++;\r\n        }\r\n      }\r\n\r\n      // Stop as soon as we arrive at the present\r\n      if (horizontalSlide === slide) {\r\n        break;\r\n      }\r\n\r\n      // Don't count the wrapping section for vertical slides and\r\n      // slides marked as uncounted\r\n      if (\r\n        horizontalSlide.classList.contains('stack') === false &&\r\n        horizontalSlide.dataset.visibility !== 'uncounted'\r\n      ) {\r\n        pastCount++;\r\n      }\r\n    }\r\n\r\n    return pastCount;\r\n  }\r\n\r\n  /**\r\n   * Returns a value ranging from 0-1 that represents\r\n   * how far into the presentation we have navigated.\r\n   *\r\n   * @return {number}\r\n   */\r\n  function getProgress() {\r\n    // The number of past and total slides\r\n    let totalCount = getTotalSlides();\r\n    let pastCount = getSlidePastCount();\r\n\r\n    if (currentSlide) {\r\n      let allFragments = currentSlide.querySelectorAll('.fragment');\r\n\r\n      // If there are fragments in the current slide those should be\r\n      // accounted for in the progress.\r\n      if (allFragments.length > 0) {\r\n        let visibleFragments =\r\n          currentSlide.querySelectorAll('.fragment.visible');\r\n\r\n        // This value represents how big a portion of the slide progress\r\n        // that is made up by its fragments (0-1)\r\n        let fragmentWeight = 0.9;\r\n\r\n        // Add fragment progress to the past slide count\r\n        pastCount +=\r\n          (visibleFragments.length / allFragments.length) * fragmentWeight;\r\n      }\r\n    }\r\n\r\n    return Math.min(pastCount / (totalCount - 1), 1);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the h/v location and fragment of the current,\r\n   * or specified, slide.\r\n   *\r\n   * @param {HTMLElement} [slide] If specified, the returned\r\n   * index will be for this slide rather than the currently\r\n   * active one\r\n   *\r\n   * @return {{h: number, v: number, f: number}}\r\n   */\r\n  function getIndices(slide) {\r\n    // By default, return the current indices\r\n    let h = indexh,\r\n      v = indexv,\r\n      f;\r\n\r\n    // If a slide is specified, return the indices of that slide\r\n    if (slide) {\r\n      let isVertical = isVerticalSlide(slide);\r\n      let slideh = isVertical ? slide.parentNode : slide;\r\n\r\n      // Select all horizontal slides\r\n      let horizontalSlides = getHorizontalSlides();\r\n\r\n      // Now that we know which the horizontal slide is, get its index\r\n      h = Math.max(horizontalSlides.indexOf(slideh), 0);\r\n\r\n      // Assume we're not vertical\r\n      v = undefined;\r\n\r\n      // If this is a vertical slide, grab the vertical index\r\n      if (isVertical) {\r\n        v = Math.max(\r\n          Util.queryAll(slide.parentNode, 'section').indexOf(slide),\r\n          0\r\n        );\r\n      }\r\n    }\r\n\r\n    if (!slide && currentSlide) {\r\n      let hasFragments = currentSlide.querySelectorAll('.fragment').length > 0;\r\n      if (hasFragments) {\r\n        let currentFragment = currentSlide.querySelector('.current-fragment');\r\n        if (\r\n          currentFragment &&\r\n          currentFragment.hasAttribute('data-fragment-index')\r\n        ) {\r\n          f = parseInt(currentFragment.getAttribute('data-fragment-index'), 10);\r\n        } else {\r\n          f = currentSlide.querySelectorAll('.fragment.visible').length - 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    return { h, v, f };\r\n  }\r\n\r\n  /**\r\n   * Retrieves all slides in this presentation.\r\n   */\r\n  function getSlides() {\r\n    return Util.queryAll(\r\n      dom.wrapper,\r\n      SLIDES_SELECTOR + ':not(.stack):not([data-visibility=\"uncounted\"])'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a list of all horizontal slides in the deck. Each\r\n   * vertical stack is included as one horizontal slide in the\r\n   * resulting array.\r\n   */\r\n  function getHorizontalSlides() {\r\n    return Util.queryAll(dom.wrapper, HORIZONTAL_SLIDES_SELECTOR);\r\n  }\r\n\r\n  /**\r\n   * Returns all vertical slides that exist within this deck.\r\n   */\r\n  function getVerticalSlides() {\r\n    return Util.queryAll(dom.wrapper, '.slides>section>section');\r\n  }\r\n\r\n  /**\r\n   * Returns all vertical stacks (each stack can contain multiple slides).\r\n   */\r\n  function getVerticalStacks() {\r\n    return Util.queryAll(dom.wrapper, HORIZONTAL_SLIDES_SELECTOR + '.stack');\r\n  }\r\n\r\n  /**\r\n   * Returns true if there are at least two horizontal slides.\r\n   */\r\n  function hasHorizontalSlides() {\r\n    return getHorizontalSlides().length > 1;\r\n  }\r\n\r\n  /**\r\n   * Returns true if there are at least two vertical slides.\r\n   */\r\n  function hasVerticalSlides() {\r\n    return getVerticalSlides().length > 1;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of objects where each object represents the\r\n   * attributes on its respective slide.\r\n   */\r\n  function getSlidesAttributes() {\r\n    return getSlides().map((slide) => {\r\n      let attributes = {};\r\n      for (let i = 0; i < slide.attributes.length; i++) {\r\n        let attribute = slide.attributes[i];\r\n        attributes[attribute.name] = attribute.value;\r\n      }\r\n      return attributes;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieves the total number of slides in this presentation.\r\n   *\r\n   * @return {number}\r\n   */\r\n  function getTotalSlides() {\r\n    return getSlides().length;\r\n  }\r\n\r\n  /**\r\n   * Returns the slide element matching the specified index.\r\n   *\r\n   * @return {HTMLElement}\r\n   */\r\n  function getSlide(x, y) {\r\n    let horizontalSlide = getHorizontalSlides()[x];\r\n    let verticalSlides =\r\n      horizontalSlide && horizontalSlide.querySelectorAll('section');\r\n\r\n    if (verticalSlides && verticalSlides.length && typeof y === 'number') {\r\n      return verticalSlides ? verticalSlides[y] : undefined;\r\n    }\r\n\r\n    return horizontalSlide;\r\n  }\r\n\r\n  /**\r\n   * Returns the background element for the given slide.\r\n   * All slides, even the ones with no background properties\r\n   * defined, have a background element so as long as the\r\n   * index is valid an element will be returned.\r\n   *\r\n   * @param {mixed} x Horizontal background index OR a slide\r\n   * HTML element\r\n   * @param {number} y Vertical background index\r\n   * @return {(HTMLElement[]|*)}\r\n   */\r\n  function getSlideBackground(x, y) {\r\n    let slide = typeof x === 'number' ? getSlide(x, y) : x;\r\n    if (slide) {\r\n      return slide.slideBackgroundElement;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the current state of the presentation as\r\n   * an object. This state can then be restored at any\r\n   * time.\r\n   *\r\n   * @return {{indexh: number, indexv: number, indexf: number, paused: boolean, overview: boolean}}\r\n   */\r\n  function getState() {\r\n    let indices = getIndices();\r\n\r\n    return {\r\n      indexh: indices.h,\r\n      indexv: indices.v,\r\n      indexf: indices.f,\r\n      paused: isPaused(),\r\n      overview: overview.isActive(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Restores the presentation to the given state.\r\n   *\r\n   * @param {object} state As generated by getState()\r\n   * @see {@link getState} generates the parameter `state`\r\n   */\r\n  function setState(state) {\r\n    if (typeof state === 'object') {\r\n      slide(\r\n        Util.deserialize(state.indexh),\r\n        Util.deserialize(state.indexv),\r\n        Util.deserialize(state.indexf)\r\n      );\r\n\r\n      let pausedFlag = Util.deserialize(state.paused),\r\n        overviewFlag = Util.deserialize(state.overview);\r\n\r\n      if (typeof pausedFlag === 'boolean' && pausedFlag !== isPaused()) {\r\n        togglePause(pausedFlag);\r\n      }\r\n\r\n      if (\r\n        typeof overviewFlag === 'boolean' &&\r\n        overviewFlag !== overview.isActive()\r\n      ) {\r\n        overview.toggle(overviewFlag);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cues a new automated slide if enabled in the config.\r\n   */\r\n  function cueAutoSlide() {\r\n    cancelAutoSlide();\r\n\r\n    if (currentSlide && config.autoSlide !== false) {\r\n      let fragment = currentSlide.querySelector('.current-fragment');\r\n\r\n      // When the slide first appears there is no \"current\" fragment so\r\n      // we look for a data-autoslide timing on the first fragment\r\n      if (!fragment) fragment = currentSlide.querySelector('.fragment');\r\n\r\n      let fragmentAutoSlide = fragment\r\n        ? fragment.getAttribute('data-autoslide')\r\n        : null;\r\n      let parentAutoSlide = currentSlide.parentNode\r\n        ? currentSlide.parentNode.getAttribute('data-autoslide')\r\n        : null;\r\n      let slideAutoSlide = currentSlide.getAttribute('data-autoslide');\r\n\r\n      // Pick value in the following priority order:\r\n      // 1. Current fragment's data-autoslide\r\n      // 2. Current slide's data-autoslide\r\n      // 3. Parent slide's data-autoslide\r\n      // 4. Global autoSlide setting\r\n      if (fragmentAutoSlide) {\r\n        autoSlide = parseInt(fragmentAutoSlide, 10);\r\n      } else if (slideAutoSlide) {\r\n        autoSlide = parseInt(slideAutoSlide, 10);\r\n      } else if (parentAutoSlide) {\r\n        autoSlide = parseInt(parentAutoSlide, 10);\r\n      } else {\r\n        autoSlide = config.autoSlide;\r\n\r\n        // If there are media elements with data-autoplay,\r\n        // automatically set the autoSlide duration to the\r\n        // length of that media. Not applicable if the slide\r\n        // is divided up into fragments.\r\n        // playbackRate is accounted for in the duration.\r\n        if (currentSlide.querySelectorAll('.fragment').length === 0) {\r\n          Util.queryAll(currentSlide, 'video, audio').forEach((el) => {\r\n            if (el.hasAttribute('data-autoplay')) {\r\n              if (\r\n                autoSlide &&\r\n                (el.duration * 1000) / el.playbackRate > autoSlide\r\n              ) {\r\n                autoSlide = (el.duration * 1000) / el.playbackRate + 1000;\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Cue the next auto-slide if:\r\n      // - There is an autoSlide value\r\n      // - Auto-sliding isn't paused by the user\r\n      // - The presentation isn't paused\r\n      // - The overview isn't active\r\n      // - The presentation isn't over\r\n      if (\r\n        autoSlide &&\r\n        !autoSlidePaused &&\r\n        !isPaused() &&\r\n        !overview.isActive() &&\r\n        (!isLastSlide() ||\r\n          fragments.availableRoutes().next ||\r\n          config.loop === true)\r\n      ) {\r\n        autoSlideTimeout = setTimeout(() => {\r\n          if (typeof config.autoSlideMethod === 'function') {\r\n            config.autoSlideMethod();\r\n          } else {\r\n            navigateNext();\r\n          }\r\n          cueAutoSlide();\r\n        }, autoSlide);\r\n        autoSlideStartTime = Date.now();\r\n      }\r\n\r\n      if (autoSlidePlayer) {\r\n        autoSlidePlayer.setPlaying(autoSlideTimeout !== -1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels any ongoing request to auto-slide.\r\n   */\r\n  function cancelAutoSlide() {\r\n    clearTimeout(autoSlideTimeout);\r\n    autoSlideTimeout = -1;\r\n  }\r\n\r\n  function pauseAutoSlide() {\r\n    if (autoSlide && !autoSlidePaused) {\r\n      autoSlidePaused = true;\r\n      dispatchEvent({ type: 'autoslidepaused' });\r\n      clearTimeout(autoSlideTimeout);\r\n\r\n      if (autoSlidePlayer) {\r\n        autoSlidePlayer.setPlaying(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  function resumeAutoSlide() {\r\n    if (autoSlide && autoSlidePaused) {\r\n      autoSlidePaused = false;\r\n      dispatchEvent({ type: 'autoslideresumed' });\r\n      cueAutoSlide();\r\n    }\r\n  }\r\n\r\n  function navigateLeft({ skipFragments = false } = {}) {\r\n    navigationHistory.hasNavigatedHorizontally = true;\r\n\r\n    // Reverse for RTL\r\n    if (config.rtl) {\r\n      if (\r\n        (overview.isActive() || skipFragments || fragments.next() === false) &&\r\n        availableRoutes().left\r\n      ) {\r\n        slide(\r\n          indexh + 1,\r\n          config.navigationMode === 'grid' ? indexv : undefined\r\n        );\r\n      }\r\n    }\r\n    // Normal navigation\r\n    else if (\r\n      (overview.isActive() || skipFragments || fragments.prev() === false) &&\r\n      availableRoutes().left\r\n    ) {\r\n      slide(indexh - 1, config.navigationMode === 'grid' ? indexv : undefined);\r\n    }\r\n  }\r\n\r\n  function navigateRight({ skipFragments = false } = {}) {\r\n    navigationHistory.hasNavigatedHorizontally = true;\r\n\r\n    // Reverse for RTL\r\n    if (config.rtl) {\r\n      if (\r\n        (overview.isActive() || skipFragments || fragments.prev() === false) &&\r\n        availableRoutes().right\r\n      ) {\r\n        slide(\r\n          indexh - 1,\r\n          config.navigationMode === 'grid' ? indexv : undefined\r\n        );\r\n      }\r\n    }\r\n    // Normal navigation\r\n    else if (\r\n      (overview.isActive() || skipFragments || fragments.next() === false) &&\r\n      availableRoutes().right\r\n    ) {\r\n      slide(indexh + 1, config.navigationMode === 'grid' ? indexv : undefined);\r\n    }\r\n  }\r\n\r\n  function navigateUp({ skipFragments = false } = {}) {\r\n    // Prioritize hiding fragments\r\n    if (\r\n      (overview.isActive() || skipFragments || fragments.prev() === false) &&\r\n      availableRoutes().up\r\n    ) {\r\n      slide(indexh, indexv - 1);\r\n    }\r\n  }\r\n\r\n  function navigateDown({ skipFragments = false } = {}) {\r\n    navigationHistory.hasNavigatedVertically = true;\r\n\r\n    // Prioritize revealing fragments\r\n    if (\r\n      (overview.isActive() || skipFragments || fragments.next() === false) &&\r\n      availableRoutes().down\r\n    ) {\r\n      slide(indexh, indexv + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Navigates backwards, prioritized in the following order:\r\n   * 1) Previous fragment\r\n   * 2) Previous vertical slide\r\n   * 3) Previous horizontal slide\r\n   */\r\n  function navigatePrev({ skipFragments = false } = {}) {\r\n    // Prioritize revealing fragments\r\n    if (skipFragments || fragments.prev() === false) {\r\n      if (availableRoutes().up) {\r\n        navigateUp({ skipFragments });\r\n      } else {\r\n        // Fetch the previous horizontal slide, if there is one\r\n        let previousSlide;\r\n\r\n        if (config.rtl) {\r\n          previousSlide = Util.queryAll(\r\n            dom.wrapper,\r\n            HORIZONTAL_SLIDES_SELECTOR + '.future'\r\n          ).pop();\r\n        } else {\r\n          previousSlide = Util.queryAll(\r\n            dom.wrapper,\r\n            HORIZONTAL_SLIDES_SELECTOR + '.past'\r\n          ).pop();\r\n        }\r\n\r\n        // When going backwards and arriving on a stack we start\r\n        // at the bottom of the stack\r\n        if (previousSlide && previousSlide.classList.contains('stack')) {\r\n          let v =\r\n            previousSlide.querySelectorAll('section').length - 1 || undefined;\r\n          let h = indexh - 1;\r\n          slide(h, v);\r\n        } else {\r\n          navigateLeft({ skipFragments });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The reverse of #navigatePrev().\r\n   */\r\n  function navigateNext({ skipFragments = false } = {}) {\r\n    navigationHistory.hasNavigatedHorizontally = true;\r\n    navigationHistory.hasNavigatedVertically = true;\r\n\r\n    // Prioritize revealing fragments\r\n    if (skipFragments || fragments.next() === false) {\r\n      let routes = availableRoutes();\r\n\r\n      // When looping is enabled `routes.down` is always available\r\n      // so we need a separate check for when we've reached the\r\n      // end of a stack and should move horizontally\r\n      if (routes.down && routes.right && config.loop && isLastVerticalSlide()) {\r\n        routes.down = false;\r\n      }\r\n\r\n      if (routes.down) {\r\n        navigateDown({ skipFragments });\r\n      } else if (config.rtl) {\r\n        navigateLeft({ skipFragments });\r\n      } else {\r\n        navigateRight({ skipFragments });\r\n      }\r\n    }\r\n  }\r\n\r\n  // --------------------------------------------------------------------//\r\n  // ----------------------------- EVENTS -------------------------------//\r\n  // --------------------------------------------------------------------//\r\n\r\n  /**\r\n   * Called by all event handlers that are based on user\r\n   * input.\r\n   *\r\n   * @param {object} [event]\r\n   */\r\n  function onUserInput(event) {\r\n    if (config.autoSlideStoppable) {\r\n      pauseAutoSlide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listener for post message events posted to this window.\r\n   */\r\n  function onPostMessage(event) {\r\n    let data = event.data;\r\n\r\n    // Make sure we're dealing with JSON\r\n    if (\r\n      typeof data === 'string' &&\r\n      data.charAt(0) === '{' &&\r\n      data.charAt(data.length - 1) === '}'\r\n    ) {\r\n      data = JSON.parse(data);\r\n\r\n      // Check if the requested method can be found\r\n      if (data.method && typeof Reveal[data.method] === 'function') {\r\n        if (POST_MESSAGE_METHOD_BLACKLIST.test(data.method) === false) {\r\n          const result = Reveal[data.method].apply(Reveal, data.args);\r\n\r\n          // Dispatch a postMessage event with the returned value from\r\n          // our method invocation for getter functions\r\n          dispatchPostMessage('callback', {\r\n            method: data.method,\r\n            result: result,\r\n          });\r\n        } else {\r\n          console.warn(\r\n            'reveal.js: \"' +\r\n              data.method +\r\n              '\" is is blacklisted from the postMessage API'\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event listener for transition end on the current slide.\r\n   *\r\n   * @param {object} [event]\r\n   */\r\n  function onTransitionEnd(event) {\r\n    if (transition === 'running' && /section/gi.test(event.target.nodeName)) {\r\n      transition = 'idle';\r\n      dispatchEvent({\r\n        type: 'slidetransitionend',\r\n        data: { indexh, indexv, previousSlide, currentSlide },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A global listener for all click events inside of the\r\n   * .slides container.\r\n   *\r\n   * @param {object} [event]\r\n   */\r\n  function onSlidesClicked(event) {\r\n    const anchor = Util.closest(event.target, 'a[href^=\"#\"]');\r\n\r\n    // If a hash link is clicked, we find the target slide\r\n    // and navigate to it. We previously relied on 'hashchange'\r\n    // for links like these but that prevented media with\r\n    // audio tracks from playing in mobile browsers since it\r\n    // wasn't considered a direct interaction with the document.\r\n    if (anchor) {\r\n      const hash = anchor.getAttribute('href');\r\n      const indices = location.getIndicesFromHash(hash);\r\n\r\n      if (indices) {\r\n        Reveal.slide(indices.h, indices.v, indices.f);\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler for the window level 'resize' event.\r\n   *\r\n   * @param {object} [event]\r\n   */\r\n  function onWindowResize(event) {\r\n    layout();\r\n  }\r\n\r\n  /**\r\n   * Handle for the window level 'visibilitychange' event.\r\n   *\r\n   * @param {object} [event]\r\n   */\r\n  function onPageVisibilityChange(event) {\r\n    // If, after clicking a link or similar and we're coming back,\r\n    // focus the document.body to ensure we can use keyboard shortcuts\r\n    if (document.hidden === false && document.activeElement !== document.body) {\r\n      // Not all elements support .blur() - SVGs among them.\r\n      if (typeof document.activeElement.blur === 'function') {\r\n        document.activeElement.blur();\r\n      }\r\n      document.body.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler for the document level 'fullscreenchange' event.\r\n   *\r\n   * @param {object} [event]\r\n   */\r\n  function onFullscreenChange(event) {\r\n    let element =\r\n      document.fullscreenElement || document.webkitFullscreenElement;\r\n    if (element === dom.wrapper) {\r\n      event.stopImmediatePropagation();\r\n\r\n      // Timeout to avoid layout shift in Safari\r\n      setTimeout(() => {\r\n        Reveal.layout();\r\n        Reveal.focus.focus(); // focus.focus :'(\r\n      }, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles clicks on links that are set to preview in the\r\n   * iframe overlay.\r\n   *\r\n   * @param {object} event\r\n   */\r\n  function onPreviewLinkClicked(event) {\r\n    if (event.currentTarget && event.currentTarget.hasAttribute('href')) {\r\n      let url = event.currentTarget.getAttribute('href');\r\n      if (url) {\r\n        showPreview(url);\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles click on the auto-sliding controls element.\r\n   *\r\n   * @param {object} [event]\r\n   */\r\n  function onAutoSlidePlayerClick(event) {\r\n    // Replay\r\n    if (isLastSlide() && config.loop === false) {\r\n      slide(0, 0);\r\n      resumeAutoSlide();\r\n    }\r\n    // Resume\r\n    else if (autoSlidePaused) {\r\n      resumeAutoSlide();\r\n    }\r\n    // Pause\r\n    else {\r\n      pauseAutoSlide();\r\n    }\r\n  }\r\n\r\n  // --------------------------------------------------------------------//\r\n  // ------------------------------- API --------------------------------//\r\n  // --------------------------------------------------------------------//\r\n\r\n  // The public reveal.js API\r\n  const API = {\r\n    VERSION,\r\n\r\n    initialize,\r\n    configure,\r\n    destroy,\r\n\r\n    sync,\r\n    syncSlide,\r\n    syncFragments: fragments.sync.bind(fragments),\r\n\r\n    // Navigation methods\r\n    slide,\r\n    left: navigateLeft,\r\n    right: navigateRight,\r\n    up: navigateUp,\r\n    down: navigateDown,\r\n    prev: navigatePrev,\r\n    next: navigateNext,\r\n\r\n    // Navigation aliases\r\n    navigateLeft,\r\n    navigateRight,\r\n    navigateUp,\r\n    navigateDown,\r\n    navigatePrev,\r\n    navigateNext,\r\n\r\n    // Fragment methods\r\n    navigateFragment: fragments.goto.bind(fragments),\r\n    prevFragment: fragments.prev.bind(fragments),\r\n    nextFragment: fragments.next.bind(fragments),\r\n\r\n    // Event binding\r\n    on,\r\n    off,\r\n\r\n    // Legacy event binding methods left in for backwards compatibility\r\n    addEventListener: on,\r\n    removeEventListener: off,\r\n\r\n    // Forces an update in slide layout\r\n    layout,\r\n\r\n    // Randomizes the order of slides\r\n    shuffle,\r\n\r\n    // Returns an object with the available routes as booleans (left/right/top/bottom)\r\n    availableRoutes,\r\n\r\n    // Returns an object with the available fragments as booleans (prev/next)\r\n    availableFragments: fragments.availableRoutes.bind(fragments),\r\n\r\n    // Toggles a help overlay with keyboard shortcuts\r\n    toggleHelp,\r\n\r\n    // Toggles the overview mode on/off\r\n    toggleOverview: overview.toggle.bind(overview),\r\n\r\n    // Toggles the \"black screen\" mode on/off\r\n    togglePause,\r\n\r\n    // Toggles the auto slide mode on/off\r\n    toggleAutoSlide,\r\n\r\n    // Slide navigation checks\r\n    isFirstSlide,\r\n    isLastSlide,\r\n    isLastVerticalSlide,\r\n    isVerticalSlide,\r\n\r\n    // State checks\r\n    isPaused,\r\n    isAutoSliding,\r\n    isSpeakerNotes: notes.isSpeakerNotesWindow.bind(notes),\r\n    isOverview: overview.isActive.bind(overview),\r\n    isFocused: focus.isFocused.bind(focus),\r\n    isPrintingPDF: print.isPrintingPDF.bind(print),\r\n\r\n    // Checks if reveal.js has been loaded and is ready for use\r\n    isReady: () => ready,\r\n\r\n    // Slide preloading\r\n    loadSlide: slideContent.load.bind(slideContent),\r\n    unloadSlide: slideContent.unload.bind(slideContent),\r\n\r\n    // Preview management\r\n    showPreview,\r\n    hidePreview: closeOverlay,\r\n\r\n    // Adds or removes all internal event listeners\r\n    addEventListeners,\r\n    removeEventListeners,\r\n    dispatchEvent,\r\n\r\n    // Facility for persisting and restoring the presentation state\r\n    getState,\r\n    setState,\r\n\r\n    // Presentation progress on range of 0-1\r\n    getProgress,\r\n\r\n    // Returns the indices of the current, or specified, slide\r\n    getIndices,\r\n\r\n    // Returns an Array of key:value maps of the attributes of each\r\n    // slide in the deck\r\n    getSlidesAttributes,\r\n\r\n    // Returns the number of slides that we have passed\r\n    getSlidePastCount,\r\n\r\n    // Returns the total number of slides\r\n    getTotalSlides,\r\n\r\n    // Returns the slide element at the specified index\r\n    getSlide,\r\n\r\n    // Returns the previous slide element, may be null\r\n    getPreviousSlide: () => previousSlide,\r\n\r\n    // Returns the current slide element\r\n    getCurrentSlide: () => currentSlide,\r\n\r\n    // Returns the slide background element at the specified index\r\n    getSlideBackground,\r\n\r\n    // Returns the speaker notes string for a slide, or null\r\n    getSlideNotes: notes.getSlideNotes.bind(notes),\r\n\r\n    // Returns an Array of all slides\r\n    getSlides,\r\n\r\n    // Returns an array with all horizontal/vertical slides in the deck\r\n    getHorizontalSlides,\r\n    getVerticalSlides,\r\n\r\n    // Checks if the presentation contains two or more horizontal\r\n    // and vertical slides\r\n    hasHorizontalSlides,\r\n    hasVerticalSlides,\r\n\r\n    // Checks if the deck has navigated on either axis at least once\r\n    hasNavigatedHorizontally: () => navigationHistory.hasNavigatedHorizontally,\r\n    hasNavigatedVertically: () => navigationHistory.hasNavigatedVertically,\r\n\r\n    // Adds/removes a custom key binding\r\n    addKeyBinding: keyboard.addKeyBinding.bind(keyboard),\r\n    removeKeyBinding: keyboard.removeKeyBinding.bind(keyboard),\r\n\r\n    // Programmatically triggers a keyboard event\r\n    triggerKey: keyboard.triggerKey.bind(keyboard),\r\n\r\n    // Registers a new shortcut to include in the help overlay\r\n    registerKeyboardShortcut: keyboard.registerKeyboardShortcut.bind(keyboard),\r\n\r\n    getComputedSlideSize,\r\n\r\n    // Returns the current scale of the presentation content\r\n    getScale: () => scale,\r\n\r\n    // Returns the current configuration object\r\n    getConfig: () => config,\r\n\r\n    // Helper method, retrieves query string as a key:value map\r\n    getQueryHash: Util.getQueryHash,\r\n\r\n    // Returns the path to the current slide as represented in the URL\r\n    getSlidePath: location.getHash.bind(location),\r\n\r\n    // Returns reveal.js DOM elements\r\n    getRevealElement: () => revealElement,\r\n    getSlidesElement: () => dom.slides,\r\n    getViewportElement: () => dom.viewport,\r\n    getBackgroundsElement: () => backgrounds.element,\r\n\r\n    // API for registering and retrieving plugins\r\n    registerPlugin: plugins.registerPlugin.bind(plugins),\r\n    hasPlugin: plugins.hasPlugin.bind(plugins),\r\n    getPlugin: plugins.getPlugin.bind(plugins),\r\n    getPlugins: plugins.getRegisteredPlugins.bind(plugins),\r\n  };\r\n\r\n  // Our internal API which controllers have access to\r\n  Util.extend(Reveal, {\r\n    ...API,\r\n\r\n    // Methods for announcing content to screen readers\r\n    announceStatus,\r\n    getStatusText,\r\n\r\n    // Controllers\r\n    print,\r\n    focus,\r\n    progress,\r\n    controls,\r\n    location,\r\n    overview,\r\n    fragments,\r\n    slideContent,\r\n    slideNumber,\r\n\r\n    onUserInput,\r\n    closeOverlay,\r\n    updateSlidesVisibility,\r\n    layoutSlideContents,\r\n    transformSlides,\r\n    cueAutoSlide,\r\n    cancelAutoSlide,\r\n  });\r\n\r\n  return API;\r\n}\r\n","import Deck, { VERSION } from './reveal.js';\r\n\r\n/**\r\n * Expose the Reveal class to the window. To create a\r\n * new instance:\r\n * let deck = new Reveal( document.querySelector( '.reveal' ), {\r\n *   controls: false\r\n * } );\r\n * deck.initialize().then(() => {\r\n *   // reveal.js is ready\r\n * });\r\n */\r\nlet Reveal = Deck;\r\n\r\n/**\r\n * The below is a thin shell that mimics the pre 4.0\r\n * reveal.js API and ensures backwards compatibility.\r\n * This API only allows for one Reveal instance per\r\n * page, whereas the new API above lets you run many\r\n * presentations on the same page.\r\n *\r\n * Reveal.initialize( { controls: false } ).then(() => {\r\n *   // reveal.js is ready\r\n * });\r\n */\r\n\r\nlet enqueuedAPICalls = [];\r\n\r\nReveal.initialize = (options) => {\r\n  // Create our singleton reveal.js instance\r\n  Object.assign(Reveal, new Deck(document.querySelector('.reveal'), options));\r\n\r\n  // Invoke any enqueued API calls\r\n  enqueuedAPICalls.map((method) => method(Reveal));\r\n\r\n  return Reveal.initialize();\r\n};\r\n\r\n/**\r\n * The pre 4.0 API let you add event listener before\r\n * initializing. We maintain the same behavior by\r\n * queuing up premature API calls and invoking all\r\n * of them when Reveal.initialize is called.\r\n */\r\n[\r\n  'configure',\r\n  'on',\r\n  'off',\r\n  'addEventListener',\r\n  'removeEventListener',\r\n  'registerPlugin',\r\n].forEach((method) => {\r\n  Reveal[method] = (...args) => {\r\n    enqueuedAPICalls.push((deck) => deck[method].call(null, ...args));\r\n  };\r\n});\r\n\r\nReveal.isReady = () => false;\r\n\r\nReveal.VERSION = VERSION;\r\n\r\nexport default Reveal;\r\n"],"names":["extend","a","b","i","queryAll","el","selector","Array","from","querySelectorAll","toggleClass","className","value","classList","add","remove","deserialize","match","parseFloat","transformElement","element","transform","style","matches","target","matchesMethod","matchesSelector","msMatchesSelector","call","closest","parentNode","createSingletonNode","container","tagname","classname","innerHTML","nodes","length","testNode","node","document","createElement","appendChild","createStyleSheet","tag","type","styleSheet","cssText","createTextNode","head","getQueryHash","query","location","search","replace","split","shift","pop","unescape","getRemainingHeight","height","newHeight","oldHeight","offsetHeight","removeProperty","fileExtensionToMimeMap","mp4","m4a","ogv","mpeg","webm","UA","navigator","userAgent","isMobile","test","platform","maxTouchPoints","isAndroid","Object","defineProperty","fitty_module","_extends","assign","arguments","source","key","prototype","hasOwnProperty","w","toArray","nl","slice","DrawState","fitties","redrawFrame","requestRedraw","cancelAnimationFrame","requestAnimationFrame","redraw","filter","f","dirty","active","redrawAll","forEach","styleComputed","computeStyle","shouldPreStyle","applyStyle","fittiesToRedraw","shouldRedraw","calculateStyles","markAsClean","dispatchFitEvent","availableWidth","clientWidth","currentWidth","scrollWidth","previousFontSize","currentFontSize","Math","min","max","minSize","maxSize","whiteSpace","multiLine","getComputedStyle","getPropertyValue","display","preStyle","preStyleTestCompleted","fontSize","dispatchEvent","CustomEvent","detail","oldValue","newValue","scaleFactor","fit","destroy","_","observeMutations","observer","disconnect","originalStyle","subscribe","unsubscribe","MutationObserver","observe","defaultOptions","subtree","childList","characterData","resizeDebounce","onWindowResized","clearTimeout","setTimeout","fitty","observeWindowDelay","events","set","enabled","method","e","observeWindow","fitAll","fittyCreate","elements","options","fittyOptions","publicFitties","map","newbie","push","init","unfreeze","freeze","undefined","window","SlideContent","constructor","Reveal","startEmbeddedIframe","this","bind","shouldPreload","preload","getConfig","preloadIframes","hasAttribute","load","slide","tagName","setAttribute","getAttribute","removeAttribute","media","sources","background","slideBackgroundElement","backgroundContent","slideBackgroundContentElement","backgroundIframe","backgroundImage","backgroundVideo","backgroundVideoLoop","backgroundVideoMuted","trim","encodeURI","join","isSpeakerNotes","video","muted","filename","getMimeTypeFromFile","excludeIframes","iframe","width","maxHeight","maxWidth","backgroundIframeElement","querySelector","layout","scopeElement","unload","getSlideBackground","formatEmbeddedContent","_appendParamToIframeSource","sourceAttribute","sourceURL","param","getSlidesElement","src","indexOf","startEmbeddedContent","autoplay","autoPlayMedia","play","readyState","startEmbeddedMedia","promise","catch","controls","addEventListener","removeEventListener","event","isAttachedToDOM","isVisible","currentTime","contentWindow","postMessage","stopEmbeddedContent","unloadIframes","pause","SlideNumber","render","getRevealElement","configure","config","oldConfig","slideNumberDisplay","slideNumber","isPrintingPDF","showSlideNumber","update","getSlideNumber","getCurrentSlide","format","getHorizontalSlides","horizontalOffset","dataset","visibility","getSlidePastCount","getTotalSlides","indices","getIndices","h","sep","isVerticalSlide","v","url","getHash","formatNumber","delimiter","isNaN","colorToRgb","color","hex3","r","parseInt","charAt","g","hex6","rgb","rgba","Backgrounds","create","slideh","backgroundStack","createBackground","slidev","parallaxBackgroundImage","backgroundSize","parallaxBackgroundSize","backgroundRepeat","parallaxBackgroundRepeat","backgroundPosition","parallaxBackgroundPosition","contentElement","sync","data","backgroundColor","backgroundGradient","backgroundTransition","backgroundOpacity","dataPreload","opacity","contrastColor","computedBackgroundStyle","includeAll","currentSlide","currentBackground","horizontalPast","rtl","horizontalFuture","childNodes","backgroundh","backgroundv","previousBackground","slideContent","currentBackgroundContent","backgroundImageURL","previousBackgroundHash","currentBackgroundHash","classToBubble","contains","updateParallax","backgroundWidth","backgroundHeight","horizontalSlides","verticalSlides","getVerticalSlides","horizontalOffsetMultiplier","slideWidth","offsetWidth","horizontalSlideCount","parallaxBackgroundHorizontal","verticalOffsetMultiplier","verticalOffset","slideHeight","verticalSlideCount","parallaxBackgroundVertical","POST_MESSAGE_METHOD_BLACKLIST","FRAGMENT_STYLE_REGEX","autoAnimateCounter","AutoAnimate","run","fromSlide","toSlide","reset","allSlides","getSlides","toSlideIndex","fromSlideIndex","autoAnimateStyleSheet","animationOptions","getAutoAnimateOptions","autoAnimate","slideDirection","fromSlideIsHidden","css","getAutoAnimatableElements","autoAnimateElements","to","autoAnimateUnmatched","defaultUnmatchedDuration","duration","defaultUnmatchedDelay","getUnmatchedAutoAnimateElements","unmatchedElement","unmatchedOptions","id","delay","autoAnimateTarget","fontWeight","sheet","removeChild","elementOptions","easing","fromProps","getAutoAnimatableProperties","toProps","styles","translate","scale","presentationScale","getScale","delta","x","y","scaleX","scaleY","round","propertyName","toValue","fromValue","explicitValue","toStyleProperties","keys","inheritedOptions","autoAnimateEasing","autoAnimateDuration","autoAnimatedParent","autoAnimateDelay","direction","properties","bounds","measure","center","getBoundingClientRect","offsetLeft","offsetTop","computedStyles","autoAnimateStyles","property","pairs","autoAnimateMatcher","getAutoAnimatePairs","reserved","pair","index","textNodes","findAutoAnimateMatches","nodeName","innerText","textContent","getLocalBoundingBox","fromScope","toScope","serializer","fromMatches","toMatches","fromElement","pimaryIndex","secondaryIndex","rootElement","children","reduce","result","containsAnimatedElements","concat","Fragments","fragments","disable","enable","availableRoutes","hiddenFragments","prev","next","sort","grouped","ordered","unordered","sorted","fragment","group","sortAll","horizontalSlide","verticalSlide","changedFragments","shown","hidden","maxIndex","currentFragment","wasVisible","announceStatus","getStatusText","bubbles","goto","offset","lastVisibleFragment","progress","fragmentInURL","writeURL","Overview","onSlideClicked","activate","overview","isActive","cancelAutoSlide","getBackgroundsElement","margin","slideSize","getComputedSlideSize","overviewSlideWidth","overviewSlideHeight","updateSlidesVisibility","indexh","indexv","hslide","vslide","hbackground","vbackground","vmin","innerWidth","innerHeight","transformSlides","deactivate","cueAutoSlide","toggle","override","preventDefault","Keyboard","shortcuts","bindings","onDocumentKeyDown","onDocumentKeyPress","navigationMode","unbind","addKeyBinding","binding","callback","keyCode","description","removeKeyBinding","triggerKey","registerKeyboardShortcut","getShortcuts","getBindings","shiftKey","charCode","toggleHelp","keyboardCondition","isFocused","autoSlideWasPaused","isAutoSliding","onUserInput","activeElementIsCE","activeElement","isContentEditable","activeElementIsInput","activeElementIsNotes","unusedModifier","altKey","ctrlKey","metaKey","resumeKeyCodes","keyboard","isPaused","useLinearMode","hasHorizontalSlides","hasVerticalSlides","triggered","apply","action","skipFragments","left","right","up","Number","MAX_VALUE","down","togglePause","requestMethod","documentElement","requestFullscreen","webkitRequestFullscreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen","enterFullscreen","embedded","getViewportElement","autoSlideStoppable","toggleAutoSlide","closeOverlay","Location","writeURLTimeout","replaceStateTimestamp","onWindowHashChange","getIndicesFromHash","hash","name","bits","hashIndexBase","hashOneBasedIndex","getElementById","decodeURIComponent","error","readURL","currentIndices","newIndices","history","debouncedReplaceState","pathname","replaceState","Date","now","replaceStateTimeout","MAX_REPLACE_STATE_FREQUENCY","s","encodeURIComponent","Controls","onNavigateLeftClicked","onNavigateRightClicked","onNavigateUpClicked","onNavigateDownClicked","onNavigatePrevClicked","onNavigateNextClicked","revealElement","controlsLeft","controlsRight","controlsUp","controlsDown","controlsPrev","controlsNext","controlsRightArrow","controlsLeftArrow","controlsDownArrow","controlsLayout","controlsBackArrows","pointerEvents","eventName","routes","fragmentsRoutes","controlsTutorial","hasNavigatedVertically","hasNavigatedHorizontally","Progress","onProgressClicked","bar","getProgress","getMaxWidth","slides","slidesTotal","slideIndex","floor","clientX","targetIndices","Pointer","lastMouseWheelStep","cursorHidden","cursorInactiveTimeout","onDocumentCursorActive","onDocumentMouseScroll","mouseWheel","hideInactiveCursor","showCursor","cursor","hideCursor","hideCursorTime","wheelDelta","loadScript","script","async","defer","onload","onreadystatechange","onerror","err","Error","insertBefore","lastChild","Plugins","reveal","state","registeredPlugins","asyncDependencies","plugins","dependencies","registerPlugin","Promise","resolve","scripts","scriptsToLoad","condition","scriptLoadedCallback","initPlugins","then","console","warn","pluginValues","values","pluginsToInitialize","loadAsync","initNextPlugin","afterPlugInitialized","plugin","hasPlugin","getPlugin","getRegisteredPlugins","Print","injectPageNumbers","pageWidth","pageHeight","body","viewportElement","presentationBackground","viewportStyles","layoutSlideContents","slideScrollHeights","scrollHeight","pages","pageContainer","top","contentHeight","numberOfPages","ceil","pdfMaxPagesPerSlide","page","pdfPageHeightOffset","showNotes","notes","getSlideNotes","notesSpacing","notesLayout","notesElement","bottom","numberElement","pdfSeparateFragments","fragmentGroups","previousFragmentStep","clonedPage","cloneNode","fragmentNumber","Touch","touchStartX","touchStartY","touchStartCount","touchCaptured","onPointerDown","onPointerMove","onPointerUp","onTouchStart","onTouchMove","onTouchEnd","msPointerEnabled","isSwipePrevented","touches","clientY","currentX","currentY","includeFragments","deltaX","deltaY","abs","pointerType","MSPOINTER_TYPE_TOUCH","Focus","onRevealPointerDown","onDocumentPointerDown","blur","focus","Notes","print","updateVisibility","hasNotes","isSpeakerNotesWindow","notesElements","Playback","progressCheck","diameter","diameter2","thickness","playing","progressOffset","canvas","context","getContext","setPlaying","wasPlaying","animate","progressBefore","radius","iconSize","endAngle","PI","startAngle","save","clearRect","beginPath","arc","fillStyle","fill","lineWidth","strokeStyle","stroke","fillRect","moveTo","lineTo","restore","on","listener","off","minScale","maxScale","respondToHashChanges","disableLayout","touch","loop","shuffle","help","showHiddenSlides","autoSlide","autoSlideMethod","defaultTiming","previewLinks","postMessageEvents","focusBodyOnPageVisibilityChange","transition","transitionSpeed","POSITIVE_INFINITY","viewDistance","mobileViewDistance","previousSlide","autoSlidePlayer","ready","navigationHistory","slidesTransform","dom","autoSlideTimeout","autoSlideStartTime","autoSlidePaused","backgrounds","pointer","initialize","initOptions","wrapper","defaultConfig","Util","setViewport","start","viewport","removeHiddenSlides","setupDOM","setupPostMessage","setupScrollPrevention","setupFullscreen","resetVerticalSlides","removeEventListeners","setupPDF","Device","pauseOverlay","statusElement","createStatusElement","position","overflow","clip","text","nodeType","isAriaHidden","isDisplayHidden","child","setInterval","scrollTop","scrollLeft","onFullscreenChange","onPostMessage","isReady","numberOfSlides","setProperty","resume","enablePreviewLinks","disablePreviewLinks","onAutoSlidePlayerClick","addEventListeners","onWindowResize","onSlidesClicked","onTransitionEnd","onPageVisibilityChange","useCapture","transforms","createEvent","initEvent","dispatchPostMessage","parent","self","message","namespace","getState","JSON","stringify","onPreviewLinkClicked","showPreview","overlay","showHelp","html","size","oldScale","presentationWidth","presentationHeight","zoom","len","remainingHeight","nw","naturalWidth","videoWidth","nh","naturalHeight","videoHeight","es","setPreviousVerticalIndex","stack","getPreviousVerticalIndex","attributeName","isLastVerticalSlide","nextElementSibling","isFirstSlide","isLastSlide","wasPaused","resumeAutoSlide","pauseAutoSlide","origin","defaultPrevented","stateBefore","indexhBefore","indexvBefore","updateSlides","slideChanged","currentHorizontalSlide","currentVerticalSlides","autoAnimateTransition","getVerticalStacks","stateLoop","j","splice","syncSlide","beforeSlide","random","slidesLength","printMode","loopedForwards","loopedBackwards","reverse","showFragmentsIn","hideFragmentsIn","wasPresent","slideState","distanceX","distanceY","horizontalSlidesLength","verticalSlidesLength","oy","fragmentRoutes","pastCount","mainLoop","totalCount","allFragments","fragmentWeight","isVertical","SLIDES_SELECTOR","HORIZONTAL_SLIDES_SELECTOR","getSlidesAttributes","attributes","attribute","getSlide","indexf","paused","setState","pausedFlag","overviewFlag","fragmentAutoSlide","parentAutoSlide","slideAutoSlide","playbackRate","navigateNext","navigateLeft","navigateRight","navigateUp","navigateDown","navigatePrev","parse","args","anchor","fullscreenElement","webkitFullscreenElement","stopImmediatePropagation","currentTarget","API","VERSION","syncFragments","navigateFragment","prevFragment","nextFragment","availableFragments","toggleOverview","isOverview","loadSlide","unloadSlide","hidePreview","getPreviousSlide","getSlidePath","getPlugins","Deck","enqueuedAPICalls","deck"],"mappings":"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"}